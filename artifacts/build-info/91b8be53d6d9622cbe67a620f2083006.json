{
	"id": "91b8be53d6d9622cbe67a620f2083006",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"TecnoCoin.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TecnoCoin is ERC20Capped, ERC20Burnable, Ownable {\r\n    error MaxSupplyAlcanzado();\r\n\r\n    constructor(uint256 initialSupply, uint256 maxSupply)\r\n        ERC20(\"TecnoCoin\", \"TNC\")\r\n        ERC20Capped(maxSupply * 10 ** decimals())\r\n        Ownable(msg.sender) // ✅ Ahora sí especificamos el owner correctamente\r\n    {\r\n        _mint(msg.sender, initialSupply * 10 ** decimals());\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        if (totalSupply() + (amount * 10 ** decimals()) > cap()) {\r\n            revert MaxSupplyAlcanzado();\r\n        }\r\n        _mint(to, amount * 10 ** decimals());\r\n    }\r\n\r\n    // Necesario por conflicto entre ERC20 y ERC20Capped\r\n    function _update(address from, address to, uint256 value)\r\n        internal\r\n        override(ERC20, ERC20Capped)\r\n    {\r\n        super._update(from, to, value);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Total supply cap has been exceeded.\n     */\n    error ERC20ExceededCap(uint256 increasedSupply, uint256 cap);\n\n    /**\n     * @dev The supplied cap is not a valid cap.\n     */\n    error ERC20InvalidCap(uint256 cap);\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        if (cap_ == 0) {\n            revert ERC20InvalidCap(0);\n        }\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_update}.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n\n        if (from == address(0)) {\n            uint256 maxSupply = cap();\n            uint256 supply = totalSupply();\n            if (supply > maxSupply) {\n                revert ERC20ExceededCap(supply, maxSupply);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
				"ERC20Capped": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "increasedSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20ExceededCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20InvalidCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "cap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that adds a cap to the supply of tokens.",
						"errors": {
							"ERC20ExceededCap(uint256,uint256)": [
								{
									"details": "Total supply cap has been exceeded."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidCap(uint256)": [
								{
									"details": "The supplied cap is not a valid cap."
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"cap()": {
								"details": "Returns the cap on the token's total supply."
							},
							"constructor": {
								"details": "Sets the value of the `cap`. This value is immutable, it can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"cap()": "355274ea",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20InvalidCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that adds a cap to the supply of tokens.\",\"errors\":{\"ERC20ExceededCap(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidCap(uint256)\":[{\"details\":\"The supplied cap is not a valid cap.\"}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"constructor\":{\"details\":\"Sets the value of the `cap`. This value is immutable, it can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":\"ERC20Capped\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"keccak256\":\"0x9a961321311c070327b31fba89d821346225a411f946c9e84b330afdfdbb1d60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://084698c9feace630ff29919baad9df0721944eb2ecaf942ef807935bbbe41b5a\",\"dweb:/ipfs/Qmet4EQYqPLSKo7UPBNGaVw5NPATNkiLsqSCnCgg5kAPg4\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol:ERC20Capped",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol:ERC20Capped",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol:ERC20Capped",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol:ERC20Capped",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol:ERC20Capped",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"TecnoCoin.sol": {
				"TecnoCoin": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "initialSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxSupply",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "increasedSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20ExceededCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"name": "ERC20InvalidCap",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MaxSupplyAlcanzado",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "cap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC20ExceededCap(uint256,uint256)": [
								{
									"details": "Total supply cap has been exceeded."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidCap(uint256)": [
								{
									"details": "The supplied cap is not a valid cap."
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"cap()": {
								"details": "Returns the cap on the token's total supply."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"TecnoCoin.sol\":267:1145  contract TecnoCoin is ERC20Capped, ERC20Burnable, Ownable {... */\n  mstore(0x40, 0xa0)\n    /* \"TecnoCoin.sol\":367:665  constructor(uint256 initialSupply, uint256 maxSupply)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"TecnoCoin.sol\":524:534  msg.sender */\n  caller\n    /* \"TecnoCoin.sol\":489:505  10 ** decimals() */\n  tag_8\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n  0x12\n    /* \"TecnoCoin.sol\":489:491  10 */\n  0x0a\n    /* \"TecnoCoin.sol\":489:505  10 ** decimals() */\n  tag_9\n  jump\t// in\ntag_8:\n    /* \"TecnoCoin.sol\":477:505  maxSupply * 10 ** decimals() */\n  tag_10\n  swap1\n    /* \"TecnoCoin.sol\":477:486  maxSupply */\n  dup4\n    /* \"TecnoCoin.sol\":477:505  maxSupply * 10 ** decimals() */\n  tag_11\n  jump\t// in\ntag_10:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1582:1695  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x09\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xb9, 0x2a32b1b737a1b7b4b7)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe8, 0x544e43)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1656:1661  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1653  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  swap1\n  dup2\n  tag_15\n  swap2\n  swap1\n  tag_16\n  jump\t// in\ntag_15:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1678  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  tag_17\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1681:1688  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1678  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  tag_16\n  jump\t// in\ntag_17:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1582:1695  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":756:760  cap_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":764:765  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":756:765  cap_ == 0 */\n  sub\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":752:817  if (cap_ == 0) {... */\n  tag_19\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":788:806  ERC20InvalidCap(0) */\n  mload(0x40)\n  shl(0xe0, 0x392e1e27)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":804:805  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":788:806  ERC20InvalidCap(0) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":4894:4919   */\n  mstore\n    /* \"#utility.yul\":4867:4885   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":788:806  ERC20InvalidCap(0) */\ntag_20:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":752:817  if (cap_ == 0) {... */\ntag_19:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":826:837  _cap = cap_ */\n  0x80\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_23\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":5076:5127   */\n  mstore\n    /* \"#utility.yul\":5049:5067   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  tag_20\n    /* \"#utility.yul\":4930:5133   */\n  jump\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_23:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_26\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_27\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_26:\n  pop\n    /* \"TecnoCoin.sol\":606:657  _mint(msg.sender, initialSupply * 10 ** decimals()) */\n  tag_29\n    /* \"TecnoCoin.sol\":612:622  msg.sender */\n  caller\n    /* \"TecnoCoin.sol\":640:656  10 ** decimals() */\n  tag_31\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n  0x12\n    /* \"TecnoCoin.sol\":640:642  10 */\n  0x0a\n    /* \"TecnoCoin.sol\":640:656  10 ** decimals() */\n  tag_9\n  jump\t// in\ntag_31:\n    /* \"TecnoCoin.sol\":624:656  initialSupply * 10 ** decimals() */\n  tag_32\n  swap1\n    /* \"TecnoCoin.sol\":624:637  initialSupply */\n  dup6\n    /* \"TecnoCoin.sol\":624:656  initialSupply * 10 ** decimals() */\n  tag_11\n  jump\t// in\ntag_32:\n    /* \"TecnoCoin.sol\":606:611  _mint */\n  tag_33\n    /* \"TecnoCoin.sol\":606:657  _mint(msg.sender, initialSupply * 10 ** decimals()) */\n  jump\t// in\ntag_29:\n    /* \"TecnoCoin.sol\":367:665  constructor(uint256 initialSupply, uint256 maxSupply)... */\n  pop\n  pop\n    /* \"TecnoCoin.sol\":267:1145  contract TecnoCoin is ERC20Capped, ERC20Burnable, Ownable {... */\n  jump(tag_78)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_27:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x05\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7439:7647  function _mint(address account, uint256 value) internal {... */\ntag_33:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7509:7530  account == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n  tag_38\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0xec442f05)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7582:7583  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":5076:5127   */\n  mstore\n    /* \"#utility.yul\":5049:5067   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n  tag_20\n    /* \"#utility.yul\":4930:5133   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\ntag_38:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7605:7640  _update(address(0), account, value) */\n  tag_40\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7621:7622  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7625:7632  account */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7634:7639  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7605:7612  _update */\n  tag_41\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7605:7640  _update(address(0), account, value) */\n  jump\t// in\ntag_40:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7439:7647  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"TecnoCoin.sol\":974:1142  function _update(address from, address to, uint256 value)... */\ntag_41:\n    /* \"TecnoCoin.sol\":1104:1134  super._update(from, to, value) */\n  tag_43\n    /* \"TecnoCoin.sol\":1118:1122  from */\n  dup4\n    /* \"TecnoCoin.sol\":1124:1126  to */\n  dup4\n    /* \"TecnoCoin.sol\":1128:1133  value */\n  dup4\n    /* \"TecnoCoin.sol\":1104:1117  super._update */\n  tag_44\n    /* \"TecnoCoin.sol\":1104:1134  super._update(from, to, value) */\n  jump\t// in\ntag_43:\n    /* \"TecnoCoin.sol\":974:1142  function _update(address from, address to, uint256 value)... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1059:1430  function _update(address from, address to, uint256 value) internal virtual override {... */\ntag_44:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1153:1183  super._update(from, to, value) */\n  tag_46\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1167:1171  from */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1173:1175  to */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1177:1182  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1153:1166  super._update */\n  tag_47\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1153:1183  super._update(from, to, value) */\n  jump\t// in\ntag_46:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1198:1216  from == address(0) */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1194:1424  if (from == address(0)) {... */\n  tag_43\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1232:1249  uint256 maxSupply */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1252:1257  cap() */\n  tag_49\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":993:997  _cap */\n  mload(0x80)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":923:1004  function cap() public view virtual returns (uint256) {... */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1252:1257  cap() */\ntag_49:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1232:1257  uint256 maxSupply = cap() */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1271:1285  uint256 supply */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1288:1301  totalSupply() */\n  tag_51\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n  sload(0x02)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2830:2927  function totalSupply() public view virtual returns (uint256) {... */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1288:1301  totalSupply() */\ntag_51:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1271:1301  uint256 supply = totalSupply() */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1328:1337  maxSupply */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1319:1325  supply */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1319:1337  supply > maxSupply */\n  gt\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1315:1414  if (supply > maxSupply) {... */\n  iszero\n  tag_53\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1364:1399  ERC20ExceededCap(supply, maxSupply) */\n  mload(0x40)\n  shl(0xe2, 0x279e7e15)\n  dup2\n  mstore\n  0x04\n  dup2\n  add\n    /* \"#utility.yul\":5312:5337   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":5353:5371   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":5346:5380   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":5285:5303   */\n  0x44\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1364:1399  ERC20ExceededCap(supply, maxSupply) */\n  tag_20\n    /* \"#utility.yul\":5138:5386   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1315:1414  if (supply > maxSupply) {... */\ntag_53:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1218:1424  {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1059:1430  function _update(address from, address to, uint256 value) internal virtual override {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5989:7096  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_47:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6078:6096  from == address(0) */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6074:6614  if (from == address(0)) {... */\n  tag_57\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6230:6235  value */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6226  _totalSupply */\n  0x02\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_58\n  swap2\n  swap1\n  tag_59\n  jump\t// in\ntag_58:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6074:6614  if (from == address(0)) {... */\n  tag_60\n  swap1\n  pop\n  jump\ntag_57:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6288:6303  _balances[from] */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6266:6285  uint256 fromBalance */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6288:6303  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6321:6340  fromBalance < value */\n  dup2\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n  iszero\n  tag_61\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  shl(0xe2, 0x391434e3)\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":5741:5773   */\n  dup6\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":5723:5774   */\n  mstore\n    /* \"#utility.yul\":5790:5808   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":5783:5817   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":5833:5851   */\n  0x44\n  dup2\n  add\n    /* \"#utility.yul\":5826:5860   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":5696:5714   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n  tag_20\n    /* \"#utility.yul\":5521:5866   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\ntag_61:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6567  _balances[from] */\n  dup5\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6561  _balances */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6567  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6589  fromBalance - value */\n  swap1\n  dup3\n  swap1\n  sub\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6589  _balances[from] = fromBalance - value */\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6074:6614  if (from == address(0)) {... */\ntag_60:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6628:6644  to == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6624:7049  if (to == address(0)) {... */\n  tag_64\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6791:6803  _totalSupply */\n  0x02\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6791:6812  _totalSupply -= value */\n  dup1\n  sload\n  dup3\n  swap1\n  sub\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6624:7049  if (to == address(0)) {... */\n  jump(tag_65)\ntag_64:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7015  _balances[to] */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7011  _balances */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7015  _balances[to] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7024  _balances[to] += value */\n  dup1\n  sload\n  dup3\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6624:7049  if (to == address(0)) {... */\ntag_65:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7079:7081  to */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7077  from */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7088  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n  mload(0x40)\n  tag_66\n  swap2\n    /* \"#utility.yul\":4894:4919   */\n  dup2\n  mstore\n    /* \"#utility.yul\":4882:4884   */\n  0x20\n    /* \"#utility.yul\":4867:4885   */\n  add\n  swap1\n    /* \"#utility.yul\":4740:4925   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\ntag_66:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5989:7096  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:357   */\ntag_3:\n    /* \"#utility.yul\":93:99   */\n  0x00\n    /* \"#utility.yul\":101:107   */\n  0x00\n    /* \"#utility.yul\":154:156   */\n  0x40\n    /* \"#utility.yul\":142:151   */\n  dup4\n    /* \"#utility.yul\":133:140   */\n  dup6\n    /* \"#utility.yul\":129:152   */\n  sub\n    /* \"#utility.yul\":125:157   */\n  slt\n    /* \"#utility.yul\":122:174   */\n  iszero\n  tag_80\n  jumpi\n    /* \"#utility.yul\":170:171   */\n  0x00\n    /* \"#utility.yul\":167:168   */\n  0x00\n    /* \"#utility.yul\":160:172   */\n  revert\n    /* \"#utility.yul\":122:174   */\ntag_80:\n  pop\n  pop\n    /* \"#utility.yul\":215:231   */\n  dup1\n  mload\n    /* \"#utility.yul\":321:323   */\n  0x20\n    /* \"#utility.yul\":306:324   */\n  swap1\n  swap2\n  add\n    /* \"#utility.yul\":300:325   */\n  mload\n    /* \"#utility.yul\":215:231   */\n  swap1\n  swap3\n    /* \"#utility.yul\":300:325   */\n  swap1\n  swap2\n  pop\n    /* \"#utility.yul\":14:357   */\n  jump\t// out\n    /* \"#utility.yul\":362:489   */\ntag_70:\n    /* \"#utility.yul\":423:433   */\n  0x4e487b71\n    /* \"#utility.yul\":418:421   */\n  0xe0\n    /* \"#utility.yul\":414:434   */\n  shl\n    /* \"#utility.yul\":411:412   */\n  0x00\n    /* \"#utility.yul\":404:435   */\n  mstore\n    /* \"#utility.yul\":454:458   */\n  0x11\n    /* \"#utility.yul\":451:452   */\n  0x04\n    /* \"#utility.yul\":444:459   */\n  mstore\n    /* \"#utility.yul\":478:482   */\n  0x24\n    /* \"#utility.yul\":475:476   */\n  0x00\n    /* \"#utility.yul\":468:483   */\n  revert\n    /* \"#utility.yul\":494:869   */\ntag_71:\n    /* \"#utility.yul\":582:583   */\n  0x01\n    /* \"#utility.yul\":600:605   */\n  dup2\n    /* \"#utility.yul\":614:863   */\ntag_83:\n    /* \"#utility.yul\":635:636   */\n  0x01\n    /* \"#utility.yul\":625:633   */\n  dup5\n    /* \"#utility.yul\":622:637   */\n  gt\n    /* \"#utility.yul\":614:863   */\n  iszero\n  tag_85\n  jumpi\n    /* \"#utility.yul\":685:689   */\n  dup1\n    /* \"#utility.yul\":680:683   */\n  dup6\n    /* \"#utility.yul\":676:690   */\n  div\n    /* \"#utility.yul\":670:674   */\n  dup2\n    /* \"#utility.yul\":667:691   */\n  gt\n    /* \"#utility.yul\":664:714   */\n  iszero\n  tag_87\n  jumpi\n    /* \"#utility.yul\":694:712   */\n  tag_87\n  tag_70\n  jump\t// in\ntag_87:\n    /* \"#utility.yul\":744:745   */\n  0x01\n    /* \"#utility.yul\":734:742   */\n  dup5\n    /* \"#utility.yul\":730:746   */\n  and\n    /* \"#utility.yul\":727:776   */\n  iszero\n  tag_88\n  jumpi\n    /* \"#utility.yul\":758:774   */\n  swap1\n  dup2\n  mul\n  swap1\n    /* \"#utility.yul\":727:776   */\ntag_88:\n    /* \"#utility.yul\":841:842   */\n  0x01\n    /* \"#utility.yul\":837:853   */\n  swap4\n  swap1\n  swap4\n  shr\n  swap3\n    /* \"#utility.yul\":797:812   */\n  dup1\n  mul\n    /* \"#utility.yul\":614:863   */\n  jump(tag_83)\ntag_85:\n    /* \"#utility.yul\":494:869   */\n  swap4\n  pop\n  swap4\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":874:1776   */\ntag_72:\n    /* \"#utility.yul\":923:928   */\n  0x00\n    /* \"#utility.yul\":953:961   */\n  dup3\n    /* \"#utility.yul\":943:1023   */\n  tag_90\n  jumpi\n  pop\n    /* \"#utility.yul\":994:995   */\n  0x01\n    /* \"#utility.yul\":1008:1013   */\n  jump(tag_89)\n    /* \"#utility.yul\":943:1023   */\ntag_90:\n    /* \"#utility.yul\":1042:1046   */\n  dup2\n    /* \"#utility.yul\":1032:1108   */\n  tag_91\n  jumpi\n  pop\n    /* \"#utility.yul\":1079:1080   */\n  0x00\n    /* \"#utility.yul\":1093:1098   */\n  jump(tag_89)\n    /* \"#utility.yul\":1032:1108   */\ntag_91:\n    /* \"#utility.yul\":1124:1128   */\n  dup2\n    /* \"#utility.yul\":1142:1143   */\n  0x01\n    /* \"#utility.yul\":1137:1196   */\n  dup2\n  eq\n  tag_93\n  jumpi\n    /* \"#utility.yul\":1210:1211   */\n  0x02\n    /* \"#utility.yul\":1205:1379   */\n  dup2\n  eq\n  tag_94\n  jumpi\n    /* \"#utility.yul\":1117:1379   */\n  jump(tag_92)\n    /* \"#utility.yul\":1137:1196   */\ntag_93:\n    /* \"#utility.yul\":1167:1168   */\n  0x01\n    /* \"#utility.yul\":1158:1168   */\n  swap2\n  pop\n    /* \"#utility.yul\":1181:1186   */\n  pop\n  jump(tag_89)\n    /* \"#utility.yul\":1205:1379   */\ntag_94:\n    /* \"#utility.yul\":1242:1245   */\n  0xff\n    /* \"#utility.yul\":1232:1240   */\n  dup5\n    /* \"#utility.yul\":1229:1246   */\n  gt\n    /* \"#utility.yul\":1226:1269   */\n  iszero\n  tag_96\n  jumpi\n    /* \"#utility.yul\":1249:1267   */\n  tag_96\n  tag_70\n  jump\t// in\ntag_96:\n  pop\n  pop\n    /* \"#utility.yul\":1305:1306   */\n  0x01\n    /* \"#utility.yul\":1291:1307   */\n  dup3\n  shl\n    /* \"#utility.yul\":1364:1369   */\n  jump(tag_89)\n    /* \"#utility.yul\":1117:1379   */\ntag_92:\n  pop\n    /* \"#utility.yul\":1463:1465   */\n  0x20\n    /* \"#utility.yul\":1453:1461   */\n  dup4\n    /* \"#utility.yul\":1450:1466   */\n  lt\n    /* \"#utility.yul\":1444:1447   */\n  0x0133\n    /* \"#utility.yul\":1438:1442   */\n  dup4\n    /* \"#utility.yul\":1435:1448   */\n  lt\n    /* \"#utility.yul\":1431:1467   */\n  and\n    /* \"#utility.yul\":1425:1427   */\n  0x4e\n    /* \"#utility.yul\":1415:1423   */\n  dup5\n    /* \"#utility.yul\":1412:1428   */\n  lt\n    /* \"#utility.yul\":1407:1409   */\n  0x0b\n    /* \"#utility.yul\":1401:1405   */\n  dup5\n    /* \"#utility.yul\":1398:1410   */\n  lt\n    /* \"#utility.yul\":1394:1429   */\n  and\n    /* \"#utility.yul\":1391:1468   */\n  or\n    /* \"#utility.yul\":1388:1591   */\n  iszero\n  tag_97\n  jumpi\n  pop\n    /* \"#utility.yul\":1500:1519   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":1576:1581   */\n  jump(tag_89)\n    /* \"#utility.yul\":1388:1591   */\ntag_97:\n    /* \"#utility.yul\":1623:1665   */\n  tag_98\n  not(0x00)\n    /* \"#utility.yul\":1648:1656   */\n  dup5\n    /* \"#utility.yul\":1642:1646   */\n  dup5\n    /* \"#utility.yul\":1623:1665   */\n  tag_71\n  jump\t// in\ntag_98:\n    /* \"#utility.yul\":1701:1707   */\n  dup1\n    /* \"#utility.yul\":1697:1698   */\n  0x00\n    /* \"#utility.yul\":1693:1699   */\n  not\n    /* \"#utility.yul\":1689:1708   */\n  div\n    /* \"#utility.yul\":1680:1687   */\n  dup3\n    /* \"#utility.yul\":1677:1709   */\n  gt\n    /* \"#utility.yul\":1674:1732   */\n  iszero\n  tag_100\n  jumpi\n    /* \"#utility.yul\":1712:1730   */\n  tag_100\n  tag_70\n  jump\t// in\ntag_100:\n    /* \"#utility.yul\":1750:1770   */\n  mul\n  swap1\n  pop\n    /* \"#utility.yul\":874:1776   */\ntag_89:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1781:1921   */\ntag_9:\n    /* \"#utility.yul\":1839:1844   */\n  0x00\n    /* \"#utility.yul\":1868:1915   */\n  tag_102\n    /* \"#utility.yul\":1909:1913   */\n  0xff\n    /* \"#utility.yul\":1899:1907   */\n  dup5\n    /* \"#utility.yul\":1895:1914   */\n  and\n    /* \"#utility.yul\":1889:1893   */\n  dup4\n    /* \"#utility.yul\":1868:1915   */\n  tag_72\n  jump\t// in\ntag_102:\n    /* \"#utility.yul\":1859:1915   */\n  swap4\n    /* \"#utility.yul\":1781:1921   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1926:2094   */\ntag_11:\n    /* \"#utility.yul\":1999:2008   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":2030:2039   */\n  dup2\n  iszero\n    /* \"#utility.yul\":2047:2062   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":2041:2063   */\n  dup5\n  eq\n    /* \"#utility.yul\":2027:2064   */\n  or\n    /* \"#utility.yul\":2017:2088   */\n  tag_89\n  jumpi\n    /* \"#utility.yul\":2068:2086   */\n  tag_89\n  tag_70\n  jump\t// in\n    /* \"#utility.yul\":2099:2226   */\ntag_73:\n    /* \"#utility.yul\":2160:2170   */\n  0x4e487b71\n    /* \"#utility.yul\":2155:2158   */\n  0xe0\n    /* \"#utility.yul\":2151:2171   */\n  shl\n    /* \"#utility.yul\":2148:2149   */\n  0x00\n    /* \"#utility.yul\":2141:2172   */\n  mstore\n    /* \"#utility.yul\":2191:2195   */\n  0x41\n    /* \"#utility.yul\":2188:2189   */\n  0x04\n    /* \"#utility.yul\":2181:2196   */\n  mstore\n    /* \"#utility.yul\":2215:2219   */\n  0x24\n    /* \"#utility.yul\":2212:2213   */\n  0x00\n    /* \"#utility.yul\":2205:2220   */\n  revert\n    /* \"#utility.yul\":2231:2611   */\ntag_74:\n    /* \"#utility.yul\":2310:2311   */\n  0x01\n    /* \"#utility.yul\":2306:2318   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":2353:2365   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":2374:2435   */\n  tag_108\n  jumpi\n    /* \"#utility.yul\":2428:2432   */\n  0x7f\n    /* \"#utility.yul\":2420:2426   */\n  dup3\n    /* \"#utility.yul\":2416:2433   */\n  and\n    /* \"#utility.yul\":2406:2433   */\n  swap2\n  pop\n    /* \"#utility.yul\":2374:2435   */\ntag_108:\n    /* \"#utility.yul\":2481:2483   */\n  0x20\n    /* \"#utility.yul\":2473:2479   */\n  dup3\n    /* \"#utility.yul\":2470:2484   */\n  lt\n    /* \"#utility.yul\":2450:2468   */\n  dup2\n    /* \"#utility.yul\":2447:2485   */\n  sub\n    /* \"#utility.yul\":2444:2605   */\n  tag_109\n  jumpi\n    /* \"#utility.yul\":2527:2537   */\n  0x4e487b71\n    /* \"#utility.yul\":2522:2525   */\n  0xe0\n    /* \"#utility.yul\":2518:2538   */\n  shl\n    /* \"#utility.yul\":2515:2516   */\n  0x00\n    /* \"#utility.yul\":2508:2539   */\n  mstore\n    /* \"#utility.yul\":2562:2566   */\n  0x22\n    /* \"#utility.yul\":2559:2560   */\n  0x04\n    /* \"#utility.yul\":2552:2567   */\n  mstore\n    /* \"#utility.yul\":2590:2594   */\n  0x24\n    /* \"#utility.yul\":2587:2588   */\n  0x00\n    /* \"#utility.yul\":2580:2595   */\n  revert\n    /* \"#utility.yul\":2444:2605   */\ntag_109:\n  pop\n    /* \"#utility.yul\":2231:2611   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2742:3260   */\ntag_76:\n    /* \"#utility.yul\":2844:2846   */\n  0x1f\n    /* \"#utility.yul\":2839:2842   */\n  dup3\n    /* \"#utility.yul\":2836:2847   */\n  gt\n    /* \"#utility.yul\":2833:3254   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":2880:2885   */\n  dup1\n    /* \"#utility.yul\":2877:2878   */\n  0x00\n    /* \"#utility.yul\":2870:2886   */\n  mstore\n    /* \"#utility.yul\":2924:2928   */\n  0x20\n    /* \"#utility.yul\":2921:2922   */\n  0x00\n    /* \"#utility.yul\":2911:2929   */\n  keccak256\n    /* \"#utility.yul\":2994:2996   */\n  0x1f\n    /* \"#utility.yul\":2982:2992   */\n  dup5\n    /* \"#utility.yul\":2978:2997   */\n  add\n    /* \"#utility.yul\":2975:2976   */\n  0x05\n    /* \"#utility.yul\":2971:2998   */\n  shr\n    /* \"#utility.yul\":2965:2969   */\n  dup2\n    /* \"#utility.yul\":2961:2999   */\n  add\n    /* \"#utility.yul\":3030:3034   */\n  0x20\n    /* \"#utility.yul\":3018:3028   */\n  dup6\n    /* \"#utility.yul\":3015:3035   */\n  lt\n    /* \"#utility.yul\":3012:3059   */\n  iszero\n  tag_113\n  jumpi\n  pop\n    /* \"#utility.yul\":3053:3057   */\n  dup1\n    /* \"#utility.yul\":3012:3059   */\ntag_113:\n    /* \"#utility.yul\":3108:3110   */\n  0x1f\n    /* \"#utility.yul\":3103:3106   */\n  dup5\n    /* \"#utility.yul\":3099:3111   */\n  add\n    /* \"#utility.yul\":3096:3097   */\n  0x05\n    /* \"#utility.yul\":3092:3112   */\n  shr\n    /* \"#utility.yul\":3086:3090   */\n  dup3\n    /* \"#utility.yul\":3082:3113   */\n  add\n    /* \"#utility.yul\":3072:3113   */\n  swap2\n  pop\n    /* \"#utility.yul\":3163:3244   */\ntag_114:\n    /* \"#utility.yul\":3181:3183   */\n  dup2\n    /* \"#utility.yul\":3174:3179   */\n  dup2\n    /* \"#utility.yul\":3171:3184   */\n  lt\n    /* \"#utility.yul\":3163:3244   */\n  iszero\n  tag_53\n  jumpi\n    /* \"#utility.yul\":3240:3241   */\n  0x00\n    /* \"#utility.yul\":3226:3242   */\n  dup2\n  sstore\n    /* \"#utility.yul\":3207:3208   */\n  0x01\n    /* \"#utility.yul\":3196:3209   */\n  add\n    /* \"#utility.yul\":3163:3244   */\n  jump(tag_114)\n    /* \"#utility.yul\":3436:4735   */\ntag_16:\n    /* \"#utility.yul\":3556:3566   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":3578:3608   */\n  dup2\n  gt\n    /* \"#utility.yul\":3575:3631   */\n  iszero\n  tag_120\n  jumpi\n    /* \"#utility.yul\":3611:3629   */\n  tag_120\n  tag_73\n  jump\t// in\ntag_120:\n    /* \"#utility.yul\":3640:3737   */\n  tag_121\n    /* \"#utility.yul\":3730:3736   */\n  dup2\n    /* \"#utility.yul\":3690:3728   */\n  tag_122\n    /* \"#utility.yul\":3722:3726   */\n  dup5\n    /* \"#utility.yul\":3716:3727   */\n  sload\n    /* \"#utility.yul\":3690:3728   */\n  tag_74\n  jump\t// in\ntag_122:\n    /* \"#utility.yul\":3684:3688   */\n  dup5\n    /* \"#utility.yul\":3640:3737   */\n  tag_76\n  jump\t// in\ntag_121:\n    /* \"#utility.yul\":3786:3790   */\n  0x20\n    /* \"#utility.yul\":3817:3819   */\n  0x1f\n    /* \"#utility.yul\":3806:3820   */\n  dup3\n  gt\n    /* \"#utility.yul\":3834:3835   */\n  0x01\n    /* \"#utility.yul\":3829:4478   */\n  dup2\n  eq\n  tag_124\n  jumpi\n    /* \"#utility.yul\":4522:4523   */\n  0x00\n    /* \"#utility.yul\":4539:4545   */\n  dup4\n    /* \"#utility.yul\":4536:4625   */\n  iszero\n  tag_125\n  jumpi\n  pop\n    /* \"#utility.yul\":4591:4610   */\n  dup5\n  dup3\n  add\n    /* \"#utility.yul\":4585:4611   */\n  mload\n    /* \"#utility.yul\":4536:4625   */\ntag_125:\n  not(0x00)\n    /* \"#utility.yul\":3393:3394   */\n  0x03\n    /* \"#utility.yul\":3389:3400   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":3385:3409   */\n  shr\n    /* \"#utility.yul\":3381:3410   */\n  not\n    /* \"#utility.yul\":3371:3411   */\n  and\n    /* \"#utility.yul\":3417:3418   */\n  0x01\n    /* \"#utility.yul\":3413:3424   */\n  dup5\n  swap1\n  shl\n    /* \"#utility.yul\":3368:3425   */\n  or\n    /* \"#utility.yul\":4638:4719   */\n  dup5\n  sstore\n    /* \"#utility.yul\":3799:4729   */\n  jump(tag_53)\n    /* \"#utility.yul\":3829:4478   */\ntag_124:\n    /* \"#utility.yul\":2689:2690   */\n  0x00\n    /* \"#utility.yul\":2682:2696   */\n  dup5\n  dup2\n  mstore\n    /* \"#utility.yul\":2726:2730   */\n  0x20\n    /* \"#utility.yul\":2713:2731   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":3865:3885   */\n  dup6\n  and\n  swap2\n    /* \"#utility.yul\":3983:4205   */\ntag_128:\n    /* \"#utility.yul\":3997:4004   */\n  dup3\n    /* \"#utility.yul\":3994:3995   */\n  dup2\n    /* \"#utility.yul\":3991:4005   */\n  lt\n    /* \"#utility.yul\":3983:4205   */\n  iszero\n  tag_130\n  jumpi\n    /* \"#utility.yul\":4079:4098   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":4073:4099   */\n  mload\n    /* \"#utility.yul\":4058:4100   */\n  dup3\n  sstore\n    /* \"#utility.yul\":4186:4190   */\n  0x20\n    /* \"#utility.yul\":4171:4191   */\n  swap5\n  dup6\n  add\n  swap5\n    /* \"#utility.yul\":4139:4140   */\n  0x01\n    /* \"#utility.yul\":4127:4141   */\n  swap1\n  swap3\n  add\n  swap2\n    /* \"#utility.yul\":4013:4025   */\n  add\n    /* \"#utility.yul\":3983:4205   */\n  jump(tag_128)\ntag_130:\n    /* \"#utility.yul\":3987:3990   */\n  pop\n    /* \"#utility.yul\":4233:4239   */\n  dup5\n    /* \"#utility.yul\":4224:4231   */\n  dup3\n    /* \"#utility.yul\":4221:4240   */\n  lt\n    /* \"#utility.yul\":4218:4419   */\n  iszero\n  tag_131\n  jumpi\n    /* \"#utility.yul\":4294:4313   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":4288:4314   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":4377:4378   */\n  0x03\n    /* \"#utility.yul\":4373:4387   */\n  dup8\n  swap1\n  shl\n    /* \"#utility.yul\":4389:4392   */\n  0xf8\n    /* \"#utility.yul\":4369:4393   */\n  and\n    /* \"#utility.yul\":4365:4402   */\n  shr\n    /* \"#utility.yul\":4361:4403   */\n  not\n    /* \"#utility.yul\":4346:4404   */\n  and\n    /* \"#utility.yul\":4331:4405   */\n  dup2\n  sstore\n    /* \"#utility.yul\":4218:4419   */\ntag_131:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":4465:4466   */\n  0x01\n    /* \"#utility.yul\":4449:4463   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":4445:4467   */\n  add\n    /* \"#utility.yul\":4432:4468   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":3436:4735   */\n  jump\t// out\n    /* \"#utility.yul\":5391:5516   */\ntag_59:\n    /* \"#utility.yul\":5456:5465   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":5477:5487   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":5474:5510   */\n  iszero\n  tag_89\n  jumpi\n    /* \"#utility.yul\":5490:5508   */\n  tag_89\n  tag_70\n  jump\t// in\n    /* \"#utility.yul\":5871:6048   */\ntag_78:\n    /* \"TecnoCoin.sol\":267:1145  contract TecnoCoin is ERC20Capped, ERC20Burnable, Ownable {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x69de3b38836c938ac93bb31643655e6e0a011af0f354a009a432084d0f963864\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"TecnoCoin.sol\":267:1145  contract TecnoCoin is ERC20Capped, ERC20Burnable, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_18\n      jumpi\n      revert(0x00, 0x00)\n    tag_20:\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_14\n      jumpi\n      revert(0x00, 0x00)\n    tag_19:\n      dup1\n      0x313ce567\n      gt\n      tag_21\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x355274ea\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_10\n      jumpi\n      revert(0x00, 0x00)\n    tag_21:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1760:1849  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_24\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3979:4165  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n        /* \"#utility.yul\":1085:1099   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1078:1100   */\n      iszero\n        /* \"#utility.yul\":1060:1101   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1048:1050   */\n      0x20\n        /* \"#utility.yul\":1033:1051   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3979:4165  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_24\n        /* \"#utility.yul\":920:1107   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2830:2927  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2830:2927  function totalSupply() public view virtual returns (uint256) {... */\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":1258:1283   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2830:2927  function totalSupply() public view virtual returns (uint256) {... */\n      tag_24\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4757:5001  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_26\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2688:2770  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n      0x12\n        /* \"#utility.yul\":1815:1851   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1803:1805   */\n      0x20\n        /* \"#utility.yul\":1788:1806   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2688:2770  function decimals() public view virtual returns (uint8) {... */\n      tag_24\n        /* \"#utility.yul\":1673:1857   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":923:1004  function cap() public view virtual returns (uint256) {... */\n    tag_8:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":993:997  _cap */\n      immutable(\"0x69de3b38836c938ac93bb31643655e6e0a011af0f354a009a432084d0f963864\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":923:1004  function cap() public view virtual returns (uint256) {... */\n      jump(tag_32)\n        /* \"TecnoCoin.sol\":673:908  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_9:\n      tag_48\n      tag_49\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_49:\n      tag_50\n      jump\t// in\n    tag_48:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_10:\n      tag_48\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2985:3101  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_11:\n      tag_32\n      tag_56\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_56:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3076:3094  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3050:3057  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3076:3094  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2985:3101  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n      tag_48\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_13:\n      tag_48\n      tag_63\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_63:\n      tag_64\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_14:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload(0x05)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2430:2481   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2418:2420   */\n      0x20\n        /* \"#utility.yul\":2403:2421   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      tag_24\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:2055  function symbol() public view virtual returns (string memory) {... */\n    tag_15:\n      tag_22\n      tag_70\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3296:3474  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_16:\n      tag_26\n      tag_73\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_73:\n      tag_74\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3532:3672  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_17:\n      tag_32\n      tag_77\n      calldatasize\n      0x04\n      tag_78\n      jump\t// in\n    tag_77:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3656  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3612:3619  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3656  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3649  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3656  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3665  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3532:3672  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_18:\n      tag_48\n      tag_82\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_82:\n      tag_83\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1760:1849  function name() public view virtual returns (string memory) {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1805:1818  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1837:1842  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1830:1842  return _name */\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_87\n      swap1\n      tag_86\n      jump\t// in\n    tag_87:\n      dup1\n      iszero\n      tag_88\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_89\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_88)\n    tag_89:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_90:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_90\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_88:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1760:1849  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3979:4165  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4052:4056  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4106:4137  _approve(owner, spender, value) */\n      tag_94\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4122:4129  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4131:4136  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4106:4114  _approve */\n      tag_95\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4106:4137  _approve(owner, spender, value) */\n      jump\t// in\n    tag_94:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4154:4158  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4147:4158  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3979:4165  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_91:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4757:5001  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4844:4848  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4900:4937  _spendAllowance(from, spender, value) */\n      tag_99\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4916:4920  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4931:4936  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4900:4915  _spendAllowance */\n      tag_100\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4900:4937  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4947:4973  _transfer(from, to, value) */\n      tag_101\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4957:4961  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4963:4965  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4967:4972  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4947:4956  _transfer */\n      tag_102\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4947:4973  _transfer(from, to, value) */\n      jump\t// in\n    tag_101:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4990:4994  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4757:5001  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"TecnoCoin.sol\":673:908  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_50:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_106\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_107\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_106:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":993:997  _cap */\n      immutable(\"0x69de3b38836c938ac93bb31643655e6e0a011af0f354a009a432084d0f963864\")\n        /* \"TecnoCoin.sol\":773:789  10 ** decimals() */\n      tag_111\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n      0x12\n        /* \"TecnoCoin.sol\":773:775  10 */\n      0x0a\n        /* \"TecnoCoin.sol\":773:789  10 ** decimals() */\n      tag_112\n      jump\t// in\n    tag_111:\n        /* \"TecnoCoin.sol\":764:789  amount * 10 ** decimals() */\n      tag_113\n      swap1\n        /* \"TecnoCoin.sol\":764:770  amount */\n      dup4\n        /* \"TecnoCoin.sol\":764:789  amount * 10 ** decimals() */\n      tag_114\n      jump\t// in\n    tag_113:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      sload(0x02)\n        /* \"TecnoCoin.sol\":747:790  totalSupply() + (amount * 10 ** decimals()) */\n      tag_116\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_116:\n        /* \"TecnoCoin.sol\":747:798  totalSupply() + (amount * 10 ** decimals()) > cap() */\n      gt\n        /* \"TecnoCoin.sol\":743:854  if (totalSupply() + (amount * 10 ** decimals()) > cap()) {... */\n      iszero\n      tag_118\n      jumpi\n        /* \"TecnoCoin.sol\":822:842  MaxSupplyAlcanzado() */\n      mload(0x40)\n      shl(0xe4, 0x0bf3aa03)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"TecnoCoin.sol\":743:854  if (totalSupply() + (amount * 10 ** decimals()) > cap()) {... */\n    tag_118:\n        /* \"TecnoCoin.sol\":864:900  _mint(to, amount * 10 ** decimals()) */\n      tag_119\n        /* \"TecnoCoin.sol\":870:872  to */\n      dup3\n        /* \"TecnoCoin.sol\":883:899  10 ** decimals() */\n      tag_121\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n      0x12\n        /* \"TecnoCoin.sol\":883:885  10 */\n      0x0a\n        /* \"TecnoCoin.sol\":883:899  10 ** decimals() */\n      tag_112\n      jump\t// in\n    tag_121:\n        /* \"TecnoCoin.sol\":874:899  amount * 10 ** decimals() */\n      tag_122\n      swap1\n        /* \"TecnoCoin.sol\":874:880  amount */\n      dup5\n        /* \"TecnoCoin.sol\":874:899  amount * 10 ** decimals() */\n      tag_114\n      jump\t// in\n    tag_122:\n        /* \"TecnoCoin.sol\":864:869  _mint */\n      tag_123\n        /* \"TecnoCoin.sol\":864:900  _mint(to, amount * 10 ** decimals()) */\n      jump\t// in\n    tag_119:\n        /* \"TecnoCoin.sol\":673:908  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_54:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      tag_125\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":692:697  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:677  _burn */\n      tag_127\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_61:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_130\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_107\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_130:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_132\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_133\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_132:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      tag_135\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1112:1119  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1135:1140  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1111  _spendAllowance */\n      tag_100\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_135:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1157:1164  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1166:1171  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1156  _burn */\n      tag_127\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:2055  function symbol() public view virtual returns (string memory) {... */\n    tag_70:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2009:2022  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2041:2048  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2034:2048  return _symbol */\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3296:3474  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3365:3369  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3419:3446  _transfer(owner, to, value) */\n      tag_94\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3436:3438  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3440:3445  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3419:3428  _transfer */\n      tag_102\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3419:3446  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_83:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_150\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_107\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_150:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_152\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n    tag_153:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_152:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_125\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_133\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8707:8835  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_95:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8791:8828  _approve(owner, spender, value, true) */\n      tag_157\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8800:8805  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8807:8814  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8816:8821  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8823:8827  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8791:8799  _approve */\n      tag_158\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8791:8828  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8707:8835  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10396:10872  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3656  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10495:10519  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3656  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3649  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3656  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3665  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10561:10597  currentAllowance < type(uint256).max */\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n      iszero\n      tag_165\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10636:10641  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10617:10633  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10617:10641  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10613:10743  if (currentAllowance < value) {... */\n      iszero\n      tag_162\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5229:5261   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5211:5262   */\n      mstore\n        /* \"#utility.yul\":5278:5296   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":5271:5305   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":5321:5339   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":5314:5348   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":5184:5202   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_153\n        /* \"#utility.yul\":5009:5354   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10613:10743  if (currentAllowance < value) {... */\n    tag_162:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10841  _approve(owner, spender, currentAllowance - value, false) */\n      tag_165\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10793:10798  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10800:10807  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10833  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10809:10825  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10809:10833  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10840  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10792  _approve */\n      tag_158\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10841  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10485:10872  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10396:10872  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5374:5674  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5457:5475  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5453:5539  if (from == address(0)) {... */\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5525:5526  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5453:5539  if (from == address(0)) {... */\n    tag_167:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5552:5568  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5548:5634  if (to == address(0)) {... */\n      tag_169\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5591:5623  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5620:5621  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5591:5623  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5591:5623  ERC20InvalidReceiver(address(0)) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5548:5634  if (to == address(0)) {... */\n    tag_169:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5643:5667  _update(from, to, value) */\n      tag_157\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5651:5655  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5657:5659  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5661:5666  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5643:5650  _update */\n      tag_172\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5643:5667  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_107:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_132\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7439:7647  function _mint(address account, uint256 value) internal {... */\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7509:7530  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n      tag_180\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7582:7583  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n    tag_180:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7605:7640  _update(address(0), account, value) */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7621:7622  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7625:7632  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7634:7639  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7605:7612  _update */\n      tag_172\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7605:7640  _update(address(0), account, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7965:8171  function _burn(address account, uint256 value) internal {... */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8035:8056  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8031:8120  if (account == address(0)) {... */\n      tag_184\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8079:8109  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8106:8107  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8079:8109  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8079:8109  ERC20InvalidSender(address(0)) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8031:8120  if (account == address(0)) {... */\n    tag_184:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8129:8164  _update(account, address(0), value) */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8137:8144  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8154:8155  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8158:8163  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8129:8136  _update */\n      tag_172\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8129:8164  _update(account, address(0), value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_133:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x05\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9682:10114  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_158:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9794:9813  owner == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n      tag_189\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9865:9866  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n    tag_189:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9892:9913  spender == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n      tag_191\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9964:9965  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2430:2481   */\n      mstore\n        /* \"#utility.yul\":2403:2421   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      tag_153\n        /* \"#utility.yul\":2284:2487   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n    tag_191:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9987:10005  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9987:9998  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9987:10005  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9987:10014  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9987:10022  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10032:10108  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_165\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10082:10089  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10075:10080  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10091:10096  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_194\n      swap2\n        /* \"#utility.yul\":1258:1283   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n      swap1\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n    tag_194:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9682:10114  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"TecnoCoin.sol\":974:1142  function _update(address from, address to, uint256 value)... */\n    tag_172:\n        /* \"TecnoCoin.sol\":1104:1134  super._update(from, to, value) */\n      tag_157\n        /* \"TecnoCoin.sol\":1118:1122  from */\n      dup4\n        /* \"TecnoCoin.sol\":1124:1126  to */\n      dup4\n        /* \"TecnoCoin.sol\":1128:1133  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1153:1183  super._update(from, to, value) */\n      tag_199\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1167:1171  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1173:1175  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1177:1182  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1153:1166  super._update */\n      tag_200\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1153:1183  super._update(from, to, value) */\n      jump\t// in\n    tag_199:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1198:1216  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1194:1424  if (from == address(0)) {... */\n      tag_157\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":993:997  _cap */\n      immutable(\"0x69de3b38836c938ac93bb31643655e6e0a011af0f354a009a432084d0f963864\")\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1328:1337  maxSupply */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1319:1325  supply */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1319:1337  supply > maxSupply */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1315:1414  if (supply > maxSupply) {... */\n      iszero\n      tag_204\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1364:1399  ERC20ExceededCap(supply, maxSupply) */\n      mload(0x40)\n      shl(0xe2, 0x279e7e15)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":5533:5558   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":5574:5592   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":5567:5601   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":5506:5524   */\n      0x44\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1364:1399  ERC20ExceededCap(supply, maxSupply) */\n      tag_153\n        /* \"#utility.yul\":5359:5607   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1315:1414  if (supply > maxSupply) {... */\n    tag_204:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1218:1424  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":1059:1430  function _update(address from, address to, uint256 value) internal virtual override {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5989:7096  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_200:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6078:6096  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6074:6614  if (from == address(0)) {... */\n      tag_208\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6230:6235  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6226  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_209\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_209:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6074:6614  if (from == address(0)) {... */\n      tag_210\n      swap1\n      pop\n      jump\n    tag_208:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6288:6303  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6266:6285  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6288:6303  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6321:6340  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n      iszero\n      tag_211\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5229:5261   */\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5211:5262   */\n      mstore\n        /* \"#utility.yul\":5278:5296   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":5271:5305   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":5321:5339   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":5314:5348   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":5184:5202   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_153\n        /* \"#utility.yul\":5009:5354   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n    tag_211:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6567  _balances[from] */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6561  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6567  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6589  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6552:6589  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6074:6614  if (from == address(0)) {... */\n    tag_210:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6628:6644  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6624:7049  if (to == address(0)) {... */\n      tag_213\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6791:6803  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6791:6812  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6624:7049  if (to == address(0)) {... */\n      jump(tag_214)\n    tag_213:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7015  _balances[to] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7011  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7015  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7002:7024  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6624:7049  if (to == address(0)) {... */\n    tag_214:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7079:7081  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7077  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7088  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      mload(0x40)\n      tag_215\n      swap2\n        /* \"#utility.yul\":1258:1283   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n      swap1\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n    tag_215:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5989:7096  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:432   */\n    tag_25:\n        /* \"#utility.yul\":163:165   */\n      0x20\n        /* \"#utility.yul\":152:161   */\n      dup2\n        /* \"#utility.yul\":145:166   */\n      mstore\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":195:201   */\n      dup3\n        /* \"#utility.yul\":189:202   */\n      mload\n        /* \"#utility.yul\":238:244   */\n      dup1\n        /* \"#utility.yul\":233:235   */\n      0x20\n        /* \"#utility.yul\":222:231   */\n      dup5\n        /* \"#utility.yul\":218:236   */\n      add\n        /* \"#utility.yul\":211:245   */\n      mstore\n        /* \"#utility.yul\":297:303   */\n      dup1\n        /* \"#utility.yul\":292:294   */\n      0x20\n        /* \"#utility.yul\":284:290   */\n      dup6\n        /* \"#utility.yul\":280:295   */\n      add\n        /* \"#utility.yul\":275:277   */\n      0x40\n        /* \"#utility.yul\":264:273   */\n      dup6\n        /* \"#utility.yul\":260:278   */\n      add\n        /* \"#utility.yul\":254:304   */\n      mcopy\n        /* \"#utility.yul\":353:354   */\n      0x00\n        /* \"#utility.yul\":348:350   */\n      0x40\n        /* \"#utility.yul\":339:345   */\n      dup3\n        /* \"#utility.yul\":328:337   */\n      dup6\n        /* \"#utility.yul\":324:346   */\n      add\n        /* \"#utility.yul\":320:351   */\n      add\n        /* \"#utility.yul\":313:355   */\n      mstore\n        /* \"#utility.yul\":423:425   */\n      0x40\n        /* \"#utility.yul\":416:418   */\n      0x1f\n        /* \"#utility.yul\":412:419   */\n      not\n        /* \"#utility.yul\":407:409   */\n      0x1f\n        /* \"#utility.yul\":399:405   */\n      dup4\n        /* \"#utility.yul\":395:410   */\n      add\n        /* \"#utility.yul\":391:420   */\n      and\n        /* \"#utility.yul\":380:389   */\n      dup5\n        /* \"#utility.yul\":376:421   */\n      add\n        /* \"#utility.yul\":372:426   */\n      add\n        /* \"#utility.yul\":364:426   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:432   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":437:610   */\n    tag_216:\n        /* \"#utility.yul\":505:525   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":554:585   */\n      dup2\n      and\n        /* \"#utility.yul\":544:586   */\n      dup2\n      eq\n        /* \"#utility.yul\":534:604   */\n      tag_223\n      jumpi\n        /* \"#utility.yul\":600:601   */\n      0x00\n        /* \"#utility.yul\":597:598   */\n      0x00\n        /* \"#utility.yul\":590:602   */\n      revert\n        /* \"#utility.yul\":534:604   */\n    tag_223:\n        /* \"#utility.yul\":437:610   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:915   */\n    tag_28:\n        /* \"#utility.yul\":683:689   */\n      0x00\n        /* \"#utility.yul\":691:697   */\n      0x00\n        /* \"#utility.yul\":744:746   */\n      0x40\n        /* \"#utility.yul\":732:741   */\n      dup4\n        /* \"#utility.yul\":723:730   */\n      dup6\n        /* \"#utility.yul\":719:742   */\n      sub\n        /* \"#utility.yul\":715:747   */\n      slt\n        /* \"#utility.yul\":712:764   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":760:761   */\n      0x00\n        /* \"#utility.yul\":757:758   */\n      0x00\n        /* \"#utility.yul\":750:762   */\n      revert\n        /* \"#utility.yul\":712:764   */\n    tag_225:\n        /* \"#utility.yul\":783:812   */\n      tag_226\n        /* \"#utility.yul\":802:811   */\n      dup4\n        /* \"#utility.yul\":783:812   */\n      tag_216\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":773:812   */\n      swap5\n        /* \"#utility.yul\":881:883   */\n      0x20\n        /* \"#utility.yul\":866:884   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":853:885   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":615:915   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1668   */\n    tag_38:\n        /* \"#utility.yul\":1371:1377   */\n      0x00\n        /* \"#utility.yul\":1379:1385   */\n      0x00\n        /* \"#utility.yul\":1387:1393   */\n      0x00\n        /* \"#utility.yul\":1440:1442   */\n      0x60\n        /* \"#utility.yul\":1428:1437   */\n      dup5\n        /* \"#utility.yul\":1419:1426   */\n      dup7\n        /* \"#utility.yul\":1415:1438   */\n      sub\n        /* \"#utility.yul\":1411:1443   */\n      slt\n        /* \"#utility.yul\":1408:1460   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":1456:1457   */\n      0x00\n        /* \"#utility.yul\":1453:1454   */\n      0x00\n        /* \"#utility.yul\":1446:1458   */\n      revert\n        /* \"#utility.yul\":1408:1460   */\n    tag_230:\n        /* \"#utility.yul\":1479:1508   */\n      tag_231\n        /* \"#utility.yul\":1498:1507   */\n      dup5\n        /* \"#utility.yul\":1479:1508   */\n      tag_216\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":1469:1508   */\n      swap3\n      pop\n        /* \"#utility.yul\":1527:1565   */\n      tag_232\n        /* \"#utility.yul\":1561:1563   */\n      0x20\n        /* \"#utility.yul\":1550:1559   */\n      dup6\n        /* \"#utility.yul\":1546:1564   */\n      add\n        /* \"#utility.yul\":1527:1565   */\n      tag_216\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":1294:1668   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1517:1565   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1634:1636   */\n      0x40\n        /* \"#utility.yul\":1619:1637   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1606:1638   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1294:1668   */\n      jump\t// out\n        /* \"#utility.yul\":1862:2088   */\n    tag_53:\n        /* \"#utility.yul\":1921:1927   */\n      0x00\n        /* \"#utility.yul\":1974:1976   */\n      0x20\n        /* \"#utility.yul\":1962:1971   */\n      dup3\n        /* \"#utility.yul\":1953:1960   */\n      dup5\n        /* \"#utility.yul\":1949:1972   */\n      sub\n        /* \"#utility.yul\":1945:1977   */\n      slt\n        /* \"#utility.yul\":1942:1994   */\n      iszero\n      tag_235\n      jumpi\n        /* \"#utility.yul\":1990:1991   */\n      0x00\n        /* \"#utility.yul\":1987:1988   */\n      0x00\n        /* \"#utility.yul\":1980:1992   */\n      revert\n        /* \"#utility.yul\":1942:1994   */\n    tag_235:\n      pop\n        /* \"#utility.yul\":2035:2058   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1862:2088   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2093:2279   */\n    tag_57:\n        /* \"#utility.yul\":2152:2158   */\n      0x00\n        /* \"#utility.yul\":2205:2207   */\n      0x20\n        /* \"#utility.yul\":2193:2202   */\n      dup3\n        /* \"#utility.yul\":2184:2191   */\n      dup5\n        /* \"#utility.yul\":2180:2203   */\n      sub\n        /* \"#utility.yul\":2176:2208   */\n      slt\n        /* \"#utility.yul\":2173:2225   */\n      iszero\n      tag_237\n      jumpi\n        /* \"#utility.yul\":2221:2222   */\n      0x00\n        /* \"#utility.yul\":2218:2219   */\n      0x00\n        /* \"#utility.yul\":2211:2223   */\n      revert\n        /* \"#utility.yul\":2173:2225   */\n    tag_237:\n        /* \"#utility.yul\":2244:2273   */\n      tag_238\n        /* \"#utility.yul\":2263:2272   */\n      dup3\n        /* \"#utility.yul\":2244:2273   */\n      tag_216\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":2234:2273   */\n      swap4\n        /* \"#utility.yul\":2093:2279   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2492:2752   */\n    tag_78:\n        /* \"#utility.yul\":2560:2566   */\n      0x00\n        /* \"#utility.yul\":2568:2574   */\n      0x00\n        /* \"#utility.yul\":2621:2623   */\n      0x40\n        /* \"#utility.yul\":2609:2618   */\n      dup4\n        /* \"#utility.yul\":2600:2607   */\n      dup6\n        /* \"#utility.yul\":2596:2619   */\n      sub\n        /* \"#utility.yul\":2592:2624   */\n      slt\n        /* \"#utility.yul\":2589:2641   */\n      iszero\n      tag_241\n      jumpi\n        /* \"#utility.yul\":2637:2638   */\n      0x00\n        /* \"#utility.yul\":2634:2635   */\n      0x00\n        /* \"#utility.yul\":2627:2639   */\n      revert\n        /* \"#utility.yul\":2589:2641   */\n    tag_241:\n        /* \"#utility.yul\":2660:2689   */\n      tag_242\n        /* \"#utility.yul\":2679:2688   */\n      dup4\n        /* \"#utility.yul\":2660:2689   */\n      tag_216\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":2650:2689   */\n      swap2\n      pop\n        /* \"#utility.yul\":2708:2746   */\n      tag_243\n        /* \"#utility.yul\":2742:2744   */\n      0x20\n        /* \"#utility.yul\":2731:2740   */\n      dup5\n        /* \"#utility.yul\":2727:2745   */\n      add\n        /* \"#utility.yul\":2708:2746   */\n      tag_216\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":2698:2746   */\n      swap1\n      pop\n        /* \"#utility.yul\":2492:2752   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2757:3137   */\n    tag_86:\n        /* \"#utility.yul\":2836:2837   */\n      0x01\n        /* \"#utility.yul\":2832:2844   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2879:2891   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2900:2961   */\n      tag_245\n      jumpi\n        /* \"#utility.yul\":2954:2958   */\n      0x7f\n        /* \"#utility.yul\":2946:2952   */\n      dup3\n        /* \"#utility.yul\":2942:2959   */\n      and\n        /* \"#utility.yul\":2932:2959   */\n      swap2\n      pop\n        /* \"#utility.yul\":2900:2961   */\n    tag_245:\n        /* \"#utility.yul\":3007:3009   */\n      0x20\n        /* \"#utility.yul\":2999:3005   */\n      dup3\n        /* \"#utility.yul\":2996:3010   */\n      lt\n        /* \"#utility.yul\":2976:2994   */\n      dup2\n        /* \"#utility.yul\":2973:3011   */\n      sub\n        /* \"#utility.yul\":2970:3131   */\n      tag_246\n      jumpi\n        /* \"#utility.yul\":3053:3063   */\n      0x4e487b71\n        /* \"#utility.yul\":3048:3051   */\n      0xe0\n        /* \"#utility.yul\":3044:3064   */\n      shl\n        /* \"#utility.yul\":3041:3042   */\n      0x00\n        /* \"#utility.yul\":3034:3065   */\n      mstore\n        /* \"#utility.yul\":3088:3092   */\n      0x22\n        /* \"#utility.yul\":3085:3086   */\n      0x04\n        /* \"#utility.yul\":3078:3093   */\n      mstore\n        /* \"#utility.yul\":3116:3120   */\n      0x24\n        /* \"#utility.yul\":3113:3114   */\n      0x00\n        /* \"#utility.yul\":3106:3121   */\n      revert\n        /* \"#utility.yul\":2970:3131   */\n    tag_246:\n      pop\n        /* \"#utility.yul\":2757:3137   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3142:3269   */\n    tag_217:\n        /* \"#utility.yul\":3203:3213   */\n      0x4e487b71\n        /* \"#utility.yul\":3198:3201   */\n      0xe0\n        /* \"#utility.yul\":3194:3214   */\n      shl\n        /* \"#utility.yul\":3191:3192   */\n      0x00\n        /* \"#utility.yul\":3184:3215   */\n      mstore\n        /* \"#utility.yul\":3234:3238   */\n      0x11\n        /* \"#utility.yul\":3231:3232   */\n      0x04\n        /* \"#utility.yul\":3224:3239   */\n      mstore\n        /* \"#utility.yul\":3258:3262   */\n      0x24\n        /* \"#utility.yul\":3255:3256   */\n      0x00\n        /* \"#utility.yul\":3248:3263   */\n      revert\n        /* \"#utility.yul\":3274:3649   */\n    tag_218:\n        /* \"#utility.yul\":3362:3363   */\n      0x01\n        /* \"#utility.yul\":3380:3385   */\n      dup2\n        /* \"#utility.yul\":3394:3643   */\n    tag_249:\n        /* \"#utility.yul\":3415:3416   */\n      0x01\n        /* \"#utility.yul\":3405:3413   */\n      dup5\n        /* \"#utility.yul\":3402:3417   */\n      gt\n        /* \"#utility.yul\":3394:3643   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":3465:3469   */\n      dup1\n        /* \"#utility.yul\":3460:3463   */\n      dup6\n        /* \"#utility.yul\":3456:3470   */\n      div\n        /* \"#utility.yul\":3450:3454   */\n      dup2\n        /* \"#utility.yul\":3447:3471   */\n      gt\n        /* \"#utility.yul\":3444:3494   */\n      iszero\n      tag_253\n      jumpi\n        /* \"#utility.yul\":3474:3492   */\n      tag_253\n      tag_217\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":3524:3525   */\n      0x01\n        /* \"#utility.yul\":3514:3522   */\n      dup5\n        /* \"#utility.yul\":3510:3526   */\n      and\n        /* \"#utility.yul\":3507:3556   */\n      iszero\n      tag_254\n      jumpi\n        /* \"#utility.yul\":3538:3554   */\n      swap1\n      dup2\n      mul\n      swap1\n        /* \"#utility.yul\":3507:3556   */\n    tag_254:\n        /* \"#utility.yul\":3621:3622   */\n      0x01\n        /* \"#utility.yul\":3617:3633   */\n      swap4\n      swap1\n      swap4\n      shr\n      swap3\n        /* \"#utility.yul\":3577:3592   */\n      dup1\n      mul\n        /* \"#utility.yul\":3394:3643   */\n      jump(tag_249)\n    tag_251:\n        /* \"#utility.yul\":3274:3649   */\n      swap4\n      pop\n      swap4\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3654:4556   */\n    tag_219:\n        /* \"#utility.yul\":3703:3708   */\n      0x00\n        /* \"#utility.yul\":3733:3741   */\n      dup3\n        /* \"#utility.yul\":3723:3803   */\n      tag_256\n      jumpi\n      pop\n        /* \"#utility.yul\":3774:3775   */\n      0x01\n        /* \"#utility.yul\":3788:3793   */\n      jump(tag_91)\n        /* \"#utility.yul\":3723:3803   */\n    tag_256:\n        /* \"#utility.yul\":3822:3826   */\n      dup2\n        /* \"#utility.yul\":3812:3888   */\n      tag_257\n      jumpi\n      pop\n        /* \"#utility.yul\":3859:3860   */\n      0x00\n        /* \"#utility.yul\":3873:3878   */\n      jump(tag_91)\n        /* \"#utility.yul\":3812:3888   */\n    tag_257:\n        /* \"#utility.yul\":3904:3908   */\n      dup2\n        /* \"#utility.yul\":3922:3923   */\n      0x01\n        /* \"#utility.yul\":3917:3976   */\n      dup2\n      eq\n      tag_259\n      jumpi\n        /* \"#utility.yul\":3990:3991   */\n      0x02\n        /* \"#utility.yul\":3985:4159   */\n      dup2\n      eq\n      tag_260\n      jumpi\n        /* \"#utility.yul\":3897:4159   */\n      jump(tag_258)\n        /* \"#utility.yul\":3917:3976   */\n    tag_259:\n        /* \"#utility.yul\":3947:3948   */\n      0x01\n        /* \"#utility.yul\":3938:3948   */\n      swap2\n      pop\n        /* \"#utility.yul\":3961:3966   */\n      pop\n      jump(tag_91)\n        /* \"#utility.yul\":3985:4159   */\n    tag_260:\n        /* \"#utility.yul\":4022:4025   */\n      0xff\n        /* \"#utility.yul\":4012:4020   */\n      dup5\n        /* \"#utility.yul\":4009:4026   */\n      gt\n        /* \"#utility.yul\":4006:4049   */\n      iszero\n      tag_262\n      jumpi\n        /* \"#utility.yul\":4029:4047   */\n      tag_262\n      tag_217\n      jump\t// in\n    tag_262:\n      pop\n      pop\n        /* \"#utility.yul\":4085:4086   */\n      0x01\n        /* \"#utility.yul\":4071:4087   */\n      dup3\n      shl\n        /* \"#utility.yul\":4144:4149   */\n      jump(tag_91)\n        /* \"#utility.yul\":3897:4159   */\n    tag_258:\n      pop\n        /* \"#utility.yul\":4243:4245   */\n      0x20\n        /* \"#utility.yul\":4233:4241   */\n      dup4\n        /* \"#utility.yul\":4230:4246   */\n      lt\n        /* \"#utility.yul\":4224:4227   */\n      0x0133\n        /* \"#utility.yul\":4218:4222   */\n      dup4\n        /* \"#utility.yul\":4215:4228   */\n      lt\n        /* \"#utility.yul\":4211:4247   */\n      and\n        /* \"#utility.yul\":4205:4207   */\n      0x4e\n        /* \"#utility.yul\":4195:4203   */\n      dup5\n        /* \"#utility.yul\":4192:4208   */\n      lt\n        /* \"#utility.yul\":4187:4189   */\n      0x0b\n        /* \"#utility.yul\":4181:4185   */\n      dup5\n        /* \"#utility.yul\":4178:4190   */\n      lt\n        /* \"#utility.yul\":4174:4209   */\n      and\n        /* \"#utility.yul\":4171:4248   */\n      or\n        /* \"#utility.yul\":4168:4371   */\n      iszero\n      tag_263\n      jumpi\n      pop\n        /* \"#utility.yul\":4280:4299   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":4356:4361   */\n      jump(tag_91)\n        /* \"#utility.yul\":4168:4371   */\n    tag_263:\n        /* \"#utility.yul\":4403:4445   */\n      tag_264\n      not(0x00)\n        /* \"#utility.yul\":4428:4436   */\n      dup5\n        /* \"#utility.yul\":4422:4426   */\n      dup5\n        /* \"#utility.yul\":4403:4445   */\n      tag_218\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":4481:4487   */\n      dup1\n        /* \"#utility.yul\":4477:4478   */\n      0x00\n        /* \"#utility.yul\":4473:4479   */\n      not\n        /* \"#utility.yul\":4469:4488   */\n      div\n        /* \"#utility.yul\":4460:4467   */\n      dup3\n        /* \"#utility.yul\":4457:4489   */\n      gt\n        /* \"#utility.yul\":4454:4512   */\n      iszero\n      tag_266\n      jumpi\n        /* \"#utility.yul\":4492:4510   */\n      tag_266\n      tag_217\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":4530:4550   */\n      mul\n      swap4\n        /* \"#utility.yul\":3654:4556   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4561:4701   */\n    tag_112:\n        /* \"#utility.yul\":4619:4624   */\n      0x00\n        /* \"#utility.yul\":4648:4695   */\n      tag_238\n        /* \"#utility.yul\":4689:4693   */\n      0xff\n        /* \"#utility.yul\":4679:4687   */\n      dup5\n        /* \"#utility.yul\":4675:4694   */\n      and\n        /* \"#utility.yul\":4669:4673   */\n      dup4\n        /* \"#utility.yul\":4648:4695   */\n      tag_219\n      jump\t// in\n        /* \"#utility.yul\":4706:4874   */\n    tag_114:\n        /* \"#utility.yul\":4779:4788   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":4810:4819   */\n      dup2\n      iszero\n        /* \"#utility.yul\":4827:4842   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":4821:4843   */\n      dup5\n      eq\n        /* \"#utility.yul\":4807:4844   */\n      or\n        /* \"#utility.yul\":4797:4868   */\n      tag_91\n      jumpi\n        /* \"#utility.yul\":4848:4866   */\n      tag_91\n      tag_217\n      jump\t// in\n        /* \"#utility.yul\":4879:5004   */\n    tag_117:\n        /* \"#utility.yul\":4944:4953   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4965:4975   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":4962:4998   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":4978:4996   */\n      tag_91\n      tag_217\n      jump\t// in\n\n    auxdata: 0xa264697066735822122026b89f27dc5c3be5b406c514b679a2db27e6f0d84171f8e671d49db8480acb2c64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1126": {
									"entryPoint": null,
									"id": 1126,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_336": {
									"entryPoint": null,
									"id": 336,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_964": {
									"entryPoint": null,
									"id": 964,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_mint_639": {
									"entryPoint": 374,
									"id": 639,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 293,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_1021": {
									"entryPoint": 446,
									"id": 1021,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_1185": {
									"entryPoint": 430,
									"id": 1185,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_606": {
									"entryPoint": 545,
									"id": 606,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@cap_973": {
									"entryPoint": null,
									"id": 973,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decimals_363": {
									"entryPoint": null,
									"id": 363,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_372": {
									"entryPoint": null,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256_fromMemory": {
									"entryPoint": 839,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1496,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 893,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 1122,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 960,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1143,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 1242,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1310,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 1186,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 873,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1166,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6050:9",
										"nodeType": "YulBlock",
										"src": "0:6050:9",
										"statements": [
											{
												"nativeSrc": "6:3:9",
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "112:245:9",
													"nodeType": "YulBlock",
													"src": "112:245:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "158:16:9",
																"nodeType": "YulBlock",
																"src": "158:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "167:1:9",
																					"nodeType": "YulLiteral",
																					"src": "167:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "170:1:9",
																					"nodeType": "YulLiteral",
																					"src": "170:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "160:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "160:6:9"
																			},
																			"nativeSrc": "160:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "160:12:9"
																		},
																		"nativeSrc": "160:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "160:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "133:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "133:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "142:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "142:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "129:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "129:3:9"
																		},
																		"nativeSrc": "129:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "129:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "154:2:9",
																		"nodeType": "YulLiteral",
																		"src": "154:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "125:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "125:3:9"
																},
																"nativeSrc": "125:32:9",
																"nodeType": "YulFunctionCall",
																"src": "125:32:9"
															},
															"nativeSrc": "122:52:9",
															"nodeType": "YulIf",
															"src": "122:52:9"
														},
														{
															"nativeSrc": "183:14:9",
															"nodeType": "YulVariableDeclaration",
															"src": "183:14:9",
															"value": {
																"kind": "number",
																"nativeSrc": "196:1:9",
																"nodeType": "YulLiteral",
																"src": "196:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "187:5:9",
																	"nodeType": "YulTypedName",
																	"src": "187:5:9",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "206:25:9",
															"nodeType": "YulAssignment",
															"src": "206:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "221:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "221:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "215:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "215:5:9"
																},
																"nativeSrc": "215:16:9",
																"nodeType": "YulFunctionCall",
																"src": "215:16:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "206:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "206:5:9"
																}
															]
														},
														{
															"nativeSrc": "240:15:9",
															"nodeType": "YulAssignment",
															"src": "240:15:9",
															"value": {
																"name": "value",
																"nativeSrc": "250:5:9",
																"nodeType": "YulIdentifier",
																"src": "250:5:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "240:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "240:6:9"
																}
															]
														},
														{
															"nativeSrc": "264:16:9",
															"nodeType": "YulVariableDeclaration",
															"src": "264:16:9",
															"value": {
																"kind": "number",
																"nativeSrc": "279:1:9",
																"nodeType": "YulLiteral",
																"src": "279:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "268:7:9",
																	"nodeType": "YulTypedName",
																	"src": "268:7:9",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "289:36:9",
															"nodeType": "YulAssignment",
															"src": "289:36:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "310:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "310:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "321:2:9",
																				"nodeType": "YulLiteral",
																				"src": "321:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "306:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "306:3:9"
																		},
																		"nativeSrc": "306:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "306:18:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "300:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "300:5:9"
																},
																"nativeSrc": "300:25:9",
																"nodeType": "YulFunctionCall",
																"src": "300:25:9"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "289:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "289:7:9"
																}
															]
														},
														{
															"nativeSrc": "334:17:9",
															"nodeType": "YulAssignment",
															"src": "334:17:9",
															"value": {
																"name": "value_1",
																"nativeSrc": "344:7:9",
																"nodeType": "YulIdentifier",
																"src": "344:7:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "334:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "334:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
												"nativeSrc": "14:343:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "70:9:9",
														"nodeType": "YulTypedName",
														"src": "70:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "81:7:9",
														"nodeType": "YulTypedName",
														"src": "81:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "93:6:9",
														"nodeType": "YulTypedName",
														"src": "93:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "101:6:9",
														"nodeType": "YulTypedName",
														"src": "101:6:9",
														"type": ""
													}
												],
												"src": "14:343:9"
											},
											{
												"body": {
													"nativeSrc": "394:95:9",
													"nodeType": "YulBlock",
													"src": "394:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "411:1:9",
																		"nodeType": "YulLiteral",
																		"src": "411:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "418:3:9",
																				"nodeType": "YulLiteral",
																				"src": "418:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "423:10:9",
																				"nodeType": "YulLiteral",
																				"src": "423:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "414:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "414:3:9"
																		},
																		"nativeSrc": "414:20:9",
																		"nodeType": "YulFunctionCall",
																		"src": "414:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "404:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "404:6:9"
																},
																"nativeSrc": "404:31:9",
																"nodeType": "YulFunctionCall",
																"src": "404:31:9"
															},
															"nativeSrc": "404:31:9",
															"nodeType": "YulExpressionStatement",
															"src": "404:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "451:1:9",
																		"nodeType": "YulLiteral",
																		"src": "451:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "454:4:9",
																		"nodeType": "YulLiteral",
																		"src": "454:4:9",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "444:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "444:6:9"
																},
																"nativeSrc": "444:15:9",
																"nodeType": "YulFunctionCall",
																"src": "444:15:9"
															},
															"nativeSrc": "444:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "444:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "475:1:9",
																		"nodeType": "YulLiteral",
																		"src": "475:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "478:4:9",
																		"nodeType": "YulLiteral",
																		"src": "478:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "468:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "468:6:9"
																},
																"nativeSrc": "468:15:9",
																"nodeType": "YulFunctionCall",
																"src": "468:15:9"
															},
															"nativeSrc": "468:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "468:15:9"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "362:127:9",
												"nodeType": "YulFunctionDefinition",
												"src": "362:127:9"
											},
											{
												"body": {
													"nativeSrc": "563:306:9",
													"nodeType": "YulBlock",
													"src": "563:306:9",
													"statements": [
														{
															"nativeSrc": "573:10:9",
															"nodeType": "YulAssignment",
															"src": "573:10:9",
															"value": {
																"kind": "number",
																"nativeSrc": "582:1:9",
																"nodeType": "YulLiteral",
																"src": "582:1:9",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "573:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "573:5:9"
																}
															]
														},
														{
															"nativeSrc": "592:13:9",
															"nodeType": "YulAssignment",
															"src": "592:13:9",
															"value": {
																"name": "_base",
																"nativeSrc": "600:5:9",
																"nodeType": "YulIdentifier",
																"src": "600:5:9"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "592:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "592:4:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "650:213:9",
																"nodeType": "YulBlock",
																"src": "650:213:9",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "692:22:9",
																			"nodeType": "YulBlock",
																			"src": "692:22:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "694:16:9",
																							"nodeType": "YulIdentifier",
																							"src": "694:16:9"
																						},
																						"nativeSrc": "694:18:9",
																						"nodeType": "YulFunctionCall",
																						"src": "694:18:9"
																					},
																					"nativeSrc": "694:18:9",
																					"nodeType": "YulExpressionStatement",
																					"src": "694:18:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "670:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "670:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "680:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "680:3:9"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "685:4:9",
																							"nodeType": "YulIdentifier",
																							"src": "685:4:9"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "676:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "676:3:9"
																					},
																					"nativeSrc": "676:14:9",
																					"nodeType": "YulFunctionCall",
																					"src": "676:14:9"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "667:2:9",
																				"nodeType": "YulIdentifier",
																				"src": "667:2:9"
																			},
																			"nativeSrc": "667:24:9",
																			"nodeType": "YulFunctionCall",
																			"src": "667:24:9"
																		},
																		"nativeSrc": "664:50:9",
																		"nodeType": "YulIf",
																		"src": "664:50:9"
																	},
																	{
																		"body": {
																			"nativeSrc": "747:29:9",
																			"nodeType": "YulBlock",
																			"src": "747:29:9",
																			"statements": [
																				{
																					"nativeSrc": "749:25:9",
																					"nodeType": "YulAssignment",
																					"src": "749:25:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "762:5:9",
																								"nodeType": "YulIdentifier",
																								"src": "762:5:9"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "769:4:9",
																								"nodeType": "YulIdentifier",
																								"src": "769:4:9"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "758:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "758:3:9"
																						},
																						"nativeSrc": "758:16:9",
																						"nodeType": "YulFunctionCall",
																						"src": "758:16:9"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "749:5:9",
																							"nodeType": "YulIdentifier",
																							"src": "749:5:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "734:8:9",
																					"nodeType": "YulIdentifier",
																					"src": "734:8:9"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "744:1:9",
																					"nodeType": "YulLiteral",
																					"src": "744:1:9",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "730:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "730:3:9"
																			},
																			"nativeSrc": "730:16:9",
																			"nodeType": "YulFunctionCall",
																			"src": "730:16:9"
																		},
																		"nativeSrc": "727:49:9",
																		"nodeType": "YulIf",
																		"src": "727:49:9"
																	},
																	{
																		"nativeSrc": "789:23:9",
																		"nodeType": "YulAssignment",
																		"src": "789:23:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "801:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "801:4:9"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "807:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "807:4:9"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "797:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "797:3:9"
																			},
																			"nativeSrc": "797:15:9",
																			"nodeType": "YulFunctionCall",
																			"src": "797:15:9"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "789:4:9",
																				"nodeType": "YulIdentifier",
																				"src": "789:4:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "825:28:9",
																		"nodeType": "YulAssignment",
																		"src": "825:28:9",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "841:1:9",
																					"nodeType": "YulLiteral",
																					"src": "841:1:9",
																					"type": "",
																					"value": "1"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "844:8:9",
																					"nodeType": "YulIdentifier",
																					"src": "844:8:9"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "837:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "837:3:9"
																			},
																			"nativeSrc": "837:16:9",
																			"nodeType": "YulFunctionCall",
																			"src": "837:16:9"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "825:8:9",
																				"nodeType": "YulIdentifier",
																				"src": "825:8:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "625:8:9",
																		"nodeType": "YulIdentifier",
																		"src": "625:8:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "635:1:9",
																		"nodeType": "YulLiteral",
																		"src": "635:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "622:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "622:2:9"
																},
																"nativeSrc": "622:15:9",
																"nodeType": "YulFunctionCall",
																"src": "622:15:9"
															},
															"nativeSrc": "614:249:9",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "638:3:9",
																"nodeType": "YulBlock",
																"src": "638:3:9",
																"statements": []
															},
															"pre": {
																"nativeSrc": "618:3:9",
																"nodeType": "YulBlock",
																"src": "618:3:9",
																"statements": []
															},
															"src": "614:249:9"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "494:375:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "522:5:9",
														"nodeType": "YulTypedName",
														"src": "522:5:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "529:8:9",
														"nodeType": "YulTypedName",
														"src": "529:8:9",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "539:3:9",
														"nodeType": "YulTypedName",
														"src": "539:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "547:5:9",
														"nodeType": "YulTypedName",
														"src": "547:5:9",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "554:4:9",
														"nodeType": "YulTypedName",
														"src": "554:4:9",
														"type": ""
													}
												],
												"src": "494:375:9"
											},
											{
												"body": {
													"nativeSrc": "933:843:9",
													"nodeType": "YulBlock",
													"src": "933:843:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "971:52:9",
																"nodeType": "YulBlock",
																"src": "971:52:9",
																"statements": [
																	{
																		"nativeSrc": "985:10:9",
																		"nodeType": "YulAssignment",
																		"src": "985:10:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "994:1:9",
																			"nodeType": "YulLiteral",
																			"src": "994:1:9",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "985:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "985:5:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "1008:5:9",
																		"nodeType": "YulLeave",
																		"src": "1008:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "953:8:9",
																		"nodeType": "YulIdentifier",
																		"src": "953:8:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "946:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "946:6:9"
																},
																"nativeSrc": "946:16:9",
																"nodeType": "YulFunctionCall",
																"src": "946:16:9"
															},
															"nativeSrc": "943:80:9",
															"nodeType": "YulIf",
															"src": "943:80:9"
														},
														{
															"body": {
																"nativeSrc": "1056:52:9",
																"nodeType": "YulBlock",
																"src": "1056:52:9",
																"statements": [
																	{
																		"nativeSrc": "1070:10:9",
																		"nodeType": "YulAssignment",
																		"src": "1070:10:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "1079:1:9",
																			"nodeType": "YulLiteral",
																			"src": "1079:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "1070:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "1070:5:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "1093:5:9",
																		"nodeType": "YulLeave",
																		"src": "1093:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "1042:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "1042:4:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1035:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1035:6:9"
																},
																"nativeSrc": "1035:12:9",
																"nodeType": "YulFunctionCall",
																"src": "1035:12:9"
															},
															"nativeSrc": "1032:76:9",
															"nodeType": "YulIf",
															"src": "1032:76:9"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "1144:52:9",
																		"nodeType": "YulBlock",
																		"src": "1144:52:9",
																		"statements": [
																			{
																				"nativeSrc": "1158:10:9",
																				"nodeType": "YulAssignment",
																				"src": "1158:10:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "1167:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1167:1:9",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "1158:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "1158:5:9"
																					}
																				]
																			},
																			{
																				"nativeSrc": "1181:5:9",
																				"nodeType": "YulLeave",
																				"src": "1181:5:9"
																			}
																		]
																	},
																	"nativeSrc": "1137:59:9",
																	"nodeType": "YulCase",
																	"src": "1137:59:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1142:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1142:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "1212:167:9",
																		"nodeType": "YulBlock",
																		"src": "1212:167:9",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "1247:22:9",
																					"nodeType": "YulBlock",
																					"src": "1247:22:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "1249:16:9",
																									"nodeType": "YulIdentifier",
																									"src": "1249:16:9"
																								},
																								"nativeSrc": "1249:18:9",
																								"nodeType": "YulFunctionCall",
																								"src": "1249:18:9"
																							},
																							"nativeSrc": "1249:18:9",
																							"nodeType": "YulExpressionStatement",
																							"src": "1249:18:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "1232:8:9",
																							"nodeType": "YulIdentifier",
																							"src": "1232:8:9"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "1242:3:9",
																							"nodeType": "YulLiteral",
																							"src": "1242:3:9",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "1229:2:9",
																						"nodeType": "YulIdentifier",
																						"src": "1229:2:9"
																					},
																					"nativeSrc": "1229:17:9",
																					"nodeType": "YulFunctionCall",
																					"src": "1229:17:9"
																				},
																				"nativeSrc": "1226:43:9",
																				"nodeType": "YulIf",
																				"src": "1226:43:9"
																			},
																			{
																				"nativeSrc": "1282:25:9",
																				"nodeType": "YulAssignment",
																				"src": "1282:25:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "1295:8:9",
																							"nodeType": "YulIdentifier",
																							"src": "1295:8:9"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "1305:1:9",
																							"nodeType": "YulLiteral",
																							"src": "1305:1:9",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "1291:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "1291:3:9"
																					},
																					"nativeSrc": "1291:16:9",
																					"nodeType": "YulFunctionCall",
																					"src": "1291:16:9"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "1282:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "1282:5:9"
																					}
																				]
																			},
																			{
																				"nativeSrc": "1320:11:9",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1320:11:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "1330:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1330:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "_1",
																						"nativeSrc": "1324:2:9",
																						"nodeType": "YulTypedName",
																						"src": "1324:2:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "1344:7:9",
																				"nodeType": "YulAssignment",
																				"src": "1344:7:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "1350:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1350:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variableNames": [
																					{
																						"name": "_1",
																						"nativeSrc": "1344:2:9",
																						"nodeType": "YulIdentifier",
																						"src": "1344:2:9"
																					}
																				]
																			},
																			{
																				"nativeSrc": "1364:5:9",
																				"nodeType": "YulLeave",
																				"src": "1364:5:9"
																			}
																		]
																	},
																	"nativeSrc": "1205:174:9",
																	"nodeType": "YulCase",
																	"src": "1205:174:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1210:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1210:1:9",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "1124:4:9",
																"nodeType": "YulIdentifier",
																"src": "1124:4:9"
															},
															"nativeSrc": "1117:262:9",
															"nodeType": "YulSwitch",
															"src": "1117:262:9"
														},
														{
															"body": {
																"nativeSrc": "1477:114:9",
																"nodeType": "YulBlock",
																"src": "1477:114:9",
																"statements": [
																	{
																		"nativeSrc": "1491:28:9",
																		"nodeType": "YulAssignment",
																		"src": "1491:28:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "1504:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "1504:4:9"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "1510:8:9",
																					"nodeType": "YulIdentifier",
																					"src": "1510:8:9"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "1500:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "1500:3:9"
																			},
																			"nativeSrc": "1500:19:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1500:19:9"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "1491:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "1491:5:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "1532:11:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1532:11:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "1542:1:9",
																			"nodeType": "YulLiteral",
																			"src": "1542:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nativeSrc": "1536:2:9",
																				"nodeType": "YulTypedName",
																				"src": "1536:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1556:7:9",
																		"nodeType": "YulAssignment",
																		"src": "1556:7:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "1562:1:9",
																			"nodeType": "YulLiteral",
																			"src": "1562:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "_2",
																				"nativeSrc": "1556:2:9",
																				"nodeType": "YulIdentifier",
																				"src": "1556:2:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "1576:5:9",
																		"nodeType": "YulLeave",
																		"src": "1576:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "1401:4:9",
																						"nodeType": "YulIdentifier",
																						"src": "1401:4:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1407:2:9",
																						"nodeType": "YulLiteral",
																						"src": "1407:2:9",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "1398:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "1398:2:9"
																				},
																				"nativeSrc": "1398:12:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1398:12:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "1415:8:9",
																						"nodeType": "YulIdentifier",
																						"src": "1415:8:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1425:2:9",
																						"nodeType": "YulLiteral",
																						"src": "1425:2:9",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "1412:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "1412:2:9"
																				},
																				"nativeSrc": "1412:16:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1412:16:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1394:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1394:3:9"
																		},
																		"nativeSrc": "1394:35:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1394:35:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "1438:4:9",
																						"nodeType": "YulIdentifier",
																						"src": "1438:4:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1444:3:9",
																						"nodeType": "YulLiteral",
																						"src": "1444:3:9",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "1435:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "1435:2:9"
																				},
																				"nativeSrc": "1435:13:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1435:13:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "1453:8:9",
																						"nodeType": "YulIdentifier",
																						"src": "1453:8:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1463:2:9",
																						"nodeType": "YulLiteral",
																						"src": "1463:2:9",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "1450:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "1450:2:9"
																				},
																				"nativeSrc": "1450:16:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1450:16:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1431:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1431:3:9"
																		},
																		"nativeSrc": "1431:36:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1431:36:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1391:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "1391:2:9"
																},
																"nativeSrc": "1391:77:9",
																"nodeType": "YulFunctionCall",
																"src": "1391:77:9"
															},
															"nativeSrc": "1388:203:9",
															"nodeType": "YulIf",
															"src": "1388:203:9"
														},
														{
															"nativeSrc": "1600:65:9",
															"nodeType": "YulVariableDeclaration",
															"src": "1600:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "1642:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "1642:4:9"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "1648:8:9",
																		"nodeType": "YulIdentifier",
																		"src": "1648:8:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1662:1:9",
																				"nodeType": "YulLiteral",
																				"src": "1662:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1658:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1658:3:9"
																		},
																		"nativeSrc": "1658:6:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1658:6:9"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "1623:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "1623:18:9"
																},
																"nativeSrc": "1623:42:9",
																"nodeType": "YulFunctionCall",
																"src": "1623:42:9"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "1604:7:9",
																	"nodeType": "YulTypedName",
																	"src": "1604:7:9",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "1613:6:9",
																	"nodeType": "YulTypedName",
																	"src": "1613:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1710:22:9",
																"nodeType": "YulBlock",
																"src": "1710:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "1712:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "1712:16:9"
																			},
																			"nativeSrc": "1712:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1712:18:9"
																		},
																		"nativeSrc": "1712:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1712:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "1680:7:9",
																		"nodeType": "YulIdentifier",
																		"src": "1680:7:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1697:1:9",
																						"nodeType": "YulLiteral",
																						"src": "1697:1:9",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "1693:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "1693:3:9"
																				},
																				"nativeSrc": "1693:6:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1693:6:9"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "1701:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "1701:6:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "1689:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1689:3:9"
																		},
																		"nativeSrc": "1689:19:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1689:19:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1677:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "1677:2:9"
																},
																"nativeSrc": "1677:32:9",
																"nodeType": "YulFunctionCall",
																"src": "1677:32:9"
															},
															"nativeSrc": "1674:58:9",
															"nodeType": "YulIf",
															"src": "1674:58:9"
														},
														{
															"nativeSrc": "1741:29:9",
															"nodeType": "YulAssignment",
															"src": "1741:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "1754:7:9",
																		"nodeType": "YulIdentifier",
																		"src": "1754:7:9"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "1763:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1763:6:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "1750:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1750:3:9"
																},
																"nativeSrc": "1750:20:9",
																"nodeType": "YulFunctionCall",
																"src": "1750:20:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "1741:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "1741:5:9"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "874:902:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "904:4:9",
														"nodeType": "YulTypedName",
														"src": "904:4:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "910:8:9",
														"nodeType": "YulTypedName",
														"src": "910:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "923:5:9",
														"nodeType": "YulTypedName",
														"src": "923:5:9",
														"type": ""
													}
												],
												"src": "874:902:9"
											},
											{
												"body": {
													"nativeSrc": "1849:72:9",
													"nodeType": "YulBlock",
													"src": "1849:72:9",
													"statements": [
														{
															"nativeSrc": "1859:56:9",
															"nodeType": "YulAssignment",
															"src": "1859:56:9",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "1889:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "1889:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nativeSrc": "1899:8:9",
																				"nodeType": "YulIdentifier",
																				"src": "1899:8:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1909:4:9",
																				"nodeType": "YulLiteral",
																				"src": "1909:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1895:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1895:3:9"
																		},
																		"nativeSrc": "1895:19:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1895:19:9"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "1868:20:9",
																	"nodeType": "YulIdentifier",
																	"src": "1868:20:9"
																},
																"nativeSrc": "1868:47:9",
																"nodeType": "YulFunctionCall",
																"src": "1868:47:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "1859:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "1859:5:9"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "1781:140:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "1820:4:9",
														"nodeType": "YulTypedName",
														"src": "1820:4:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "1826:8:9",
														"nodeType": "YulTypedName",
														"src": "1826:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "1839:5:9",
														"nodeType": "YulTypedName",
														"src": "1839:5:9",
														"type": ""
													}
												],
												"src": "1781:140:9"
											},
											{
												"body": {
													"nativeSrc": "1978:116:9",
													"nodeType": "YulBlock",
													"src": "1978:116:9",
													"statements": [
														{
															"nativeSrc": "1988:20:9",
															"nodeType": "YulAssignment",
															"src": "1988:20:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2003:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "2003:1:9"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2006:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "2006:1:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "1999:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1999:3:9"
																},
																"nativeSrc": "1999:9:9",
																"nodeType": "YulFunctionCall",
																"src": "1999:9:9"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "1988:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "1988:7:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2066:22:9",
																"nodeType": "YulBlock",
																"src": "2066:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "2068:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "2068:16:9"
																			},
																			"nativeSrc": "2068:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2068:18:9"
																		},
																		"nativeSrc": "2068:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2068:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "2037:1:9",
																						"nodeType": "YulIdentifier",
																						"src": "2037:1:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "2030:6:9",
																					"nodeType": "YulIdentifier",
																					"src": "2030:6:9"
																				},
																				"nativeSrc": "2030:9:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2030:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "2044:1:9",
																						"nodeType": "YulIdentifier",
																						"src": "2044:1:9"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "2051:7:9",
																								"nodeType": "YulIdentifier",
																								"src": "2051:7:9"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "2060:1:9",
																								"nodeType": "YulIdentifier",
																								"src": "2060:1:9"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "2047:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "2047:3:9"
																						},
																						"nativeSrc": "2047:15:9",
																						"nodeType": "YulFunctionCall",
																						"src": "2047:15:9"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "2041:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "2041:2:9"
																				},
																				"nativeSrc": "2041:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2041:22:9"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2027:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "2027:2:9"
																		},
																		"nativeSrc": "2027:37:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2027:37:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2020:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2020:6:9"
																},
																"nativeSrc": "2020:45:9",
																"nodeType": "YulFunctionCall",
																"src": "2020:45:9"
															},
															"nativeSrc": "2017:71:9",
															"nodeType": "YulIf",
															"src": "2017:71:9"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "1926:168:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "1957:1:9",
														"nodeType": "YulTypedName",
														"src": "1957:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "1960:1:9",
														"nodeType": "YulTypedName",
														"src": "1960:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "1966:7:9",
														"nodeType": "YulTypedName",
														"src": "1966:7:9",
														"type": ""
													}
												],
												"src": "1926:168:9"
											},
											{
												"body": {
													"nativeSrc": "2131:95:9",
													"nodeType": "YulBlock",
													"src": "2131:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2148:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2148:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2155:3:9",
																				"nodeType": "YulLiteral",
																				"src": "2155:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2160:10:9",
																				"nodeType": "YulLiteral",
																				"src": "2160:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "2151:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2151:3:9"
																		},
																		"nativeSrc": "2151:20:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2151:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2141:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2141:6:9"
																},
																"nativeSrc": "2141:31:9",
																"nodeType": "YulFunctionCall",
																"src": "2141:31:9"
															},
															"nativeSrc": "2141:31:9",
															"nodeType": "YulExpressionStatement",
															"src": "2141:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2188:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2188:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2191:4:9",
																		"nodeType": "YulLiteral",
																		"src": "2191:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2181:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2181:6:9"
																},
																"nativeSrc": "2181:15:9",
																"nodeType": "YulFunctionCall",
																"src": "2181:15:9"
															},
															"nativeSrc": "2181:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "2181:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2212:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2212:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2215:4:9",
																		"nodeType": "YulLiteral",
																		"src": "2215:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2205:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2205:6:9"
																},
																"nativeSrc": "2205:15:9",
																"nodeType": "YulFunctionCall",
																"src": "2205:15:9"
															},
															"nativeSrc": "2205:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "2205:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "2099:127:9",
												"nodeType": "YulFunctionDefinition",
												"src": "2099:127:9"
											},
											{
												"body": {
													"nativeSrc": "2286:325:9",
													"nodeType": "YulBlock",
													"src": "2286:325:9",
													"statements": [
														{
															"nativeSrc": "2296:22:9",
															"nodeType": "YulAssignment",
															"src": "2296:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2310:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2310:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "2313:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "2313:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "2306:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2306:3:9"
																},
																"nativeSrc": "2306:12:9",
																"nodeType": "YulFunctionCall",
																"src": "2306:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "2296:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2296:6:9"
																}
															]
														},
														{
															"nativeSrc": "2327:38:9",
															"nodeType": "YulVariableDeclaration",
															"src": "2327:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "2357:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "2357:4:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2363:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2363:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2353:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2353:3:9"
																},
																"nativeSrc": "2353:12:9",
																"nodeType": "YulFunctionCall",
																"src": "2353:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "2331:18:9",
																	"nodeType": "YulTypedName",
																	"src": "2331:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2404:31:9",
																"nodeType": "YulBlock",
																"src": "2404:31:9",
																"statements": [
																	{
																		"nativeSrc": "2406:27:9",
																		"nodeType": "YulAssignment",
																		"src": "2406:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "2420:6:9",
																					"nodeType": "YulIdentifier",
																					"src": "2420:6:9"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2428:4:9",
																					"nodeType": "YulLiteral",
																					"src": "2428:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "2416:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "2416:3:9"
																			},
																			"nativeSrc": "2416:17:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2416:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "2406:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2406:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2384:18:9",
																		"nodeType": "YulIdentifier",
																		"src": "2384:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2377:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2377:6:9"
																},
																"nativeSrc": "2377:26:9",
																"nodeType": "YulFunctionCall",
																"src": "2377:26:9"
															},
															"nativeSrc": "2374:61:9",
															"nodeType": "YulIf",
															"src": "2374:61:9"
														},
														{
															"body": {
																"nativeSrc": "2494:111:9",
																"nodeType": "YulBlock",
																"src": "2494:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2515:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2515:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2522:3:9",
																							"nodeType": "YulLiteral",
																							"src": "2522:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2527:10:9",
																							"nodeType": "YulLiteral",
																							"src": "2527:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "2518:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "2518:3:9"
																					},
																					"nativeSrc": "2518:20:9",
																					"nodeType": "YulFunctionCall",
																					"src": "2518:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2508:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2508:6:9"
																			},
																			"nativeSrc": "2508:31:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2508:31:9"
																		},
																		"nativeSrc": "2508:31:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2508:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2559:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2559:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2562:4:9",
																					"nodeType": "YulLiteral",
																					"src": "2562:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2552:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2552:6:9"
																			},
																			"nativeSrc": "2552:15:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2552:15:9"
																		},
																		"nativeSrc": "2552:15:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2552:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2587:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2587:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2590:4:9",
																					"nodeType": "YulLiteral",
																					"src": "2590:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2580:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:9"
																			},
																			"nativeSrc": "2580:15:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2580:15:9"
																		},
																		"nativeSrc": "2580:15:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2580:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2450:18:9",
																		"nodeType": "YulIdentifier",
																		"src": "2450:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2473:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2473:6:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2481:2:9",
																				"nodeType": "YulLiteral",
																				"src": "2481:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "2470:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "2470:2:9"
																		},
																		"nativeSrc": "2470:14:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2470:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "2447:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "2447:2:9"
																},
																"nativeSrc": "2447:38:9",
																"nodeType": "YulFunctionCall",
																"src": "2447:38:9"
															},
															"nativeSrc": "2444:161:9",
															"nodeType": "YulIf",
															"src": "2444:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "2231:380:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "2266:4:9",
														"nodeType": "YulTypedName",
														"src": "2266:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "2275:6:9",
														"nodeType": "YulTypedName",
														"src": "2275:6:9",
														"type": ""
													}
												],
												"src": "2231:380:9"
											},
											{
												"body": {
													"nativeSrc": "2672:65:9",
													"nodeType": "YulBlock",
													"src": "2672:65:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2689:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2689:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "2692:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "2692:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2682:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2682:6:9"
																},
																"nativeSrc": "2682:14:9",
																"nodeType": "YulFunctionCall",
																"src": "2682:14:9"
															},
															"nativeSrc": "2682:14:9",
															"nodeType": "YulExpressionStatement",
															"src": "2682:14:9"
														},
														{
															"nativeSrc": "2705:26:9",
															"nodeType": "YulAssignment",
															"src": "2705:26:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2723:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2723:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2726:4:9",
																		"nodeType": "YulLiteral",
																		"src": "2726:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "2713:9:9",
																	"nodeType": "YulIdentifier",
																	"src": "2713:9:9"
																},
																"nativeSrc": "2713:18:9",
																"nodeType": "YulFunctionCall",
																"src": "2713:18:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2705:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "2705:4:9"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "2616:121:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "2655:3:9",
														"nodeType": "YulTypedName",
														"src": "2655:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "2663:4:9",
														"nodeType": "YulTypedName",
														"src": "2663:4:9",
														"type": ""
													}
												],
												"src": "2616:121:9"
											},
											{
												"body": {
													"nativeSrc": "2823:437:9",
													"nodeType": "YulBlock",
													"src": "2823:437:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "2856:398:9",
																"nodeType": "YulBlock",
																"src": "2856:398:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2877:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2877:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "2880:5:9",
																					"nodeType": "YulIdentifier",
																					"src": "2880:5:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2870:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2870:6:9"
																			},
																			"nativeSrc": "2870:16:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2870:16:9"
																		},
																		"nativeSrc": "2870:16:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2870:16:9"
																	},
																	{
																		"nativeSrc": "2899:30:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2899:30:9",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2921:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2921:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2924:4:9",
																					"nodeType": "YulLiteral",
																					"src": "2924:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "2911:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "2911:9:9"
																			},
																			"nativeSrc": "2911:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2911:18:9"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "2903:4:9",
																				"nodeType": "YulTypedName",
																				"src": "2903:4:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "2942:57:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2942:57:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "2965:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "2965:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2975:1:9",
																							"nodeType": "YulLiteral",
																							"src": "2975:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "2982:10:9",
																									"nodeType": "YulIdentifier",
																									"src": "2982:10:9"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2994:2:9",
																									"nodeType": "YulLiteral",
																									"src": "2994:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2978:3:9",
																								"nodeType": "YulIdentifier",
																								"src": "2978:3:9"
																							},
																							"nativeSrc": "2978:19:9",
																							"nodeType": "YulFunctionCall",
																							"src": "2978:19:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "2971:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "2971:3:9"
																					},
																					"nativeSrc": "2971:27:9",
																					"nodeType": "YulFunctionCall",
																					"src": "2971:27:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2961:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "2961:3:9"
																			},
																			"nativeSrc": "2961:38:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2961:38:9"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "2946:11:9",
																				"nodeType": "YulTypedName",
																				"src": "2946:11:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "3036:23:9",
																			"nodeType": "YulBlock",
																			"src": "3036:23:9",
																			"statements": [
																				{
																					"nativeSrc": "3038:19:9",
																					"nodeType": "YulAssignment",
																					"src": "3038:19:9",
																					"value": {
																						"name": "data",
																						"nativeSrc": "3053:4:9",
																						"nodeType": "YulIdentifier",
																						"src": "3053:4:9"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "3038:11:9",
																							"nodeType": "YulIdentifier",
																							"src": "3038:11:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "3018:10:9",
																					"nodeType": "YulIdentifier",
																					"src": "3018:10:9"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3030:4:9",
																					"nodeType": "YulLiteral",
																					"src": "3030:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "3015:2:9",
																				"nodeType": "YulIdentifier",
																				"src": "3015:2:9"
																			},
																			"nativeSrc": "3015:20:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3015:20:9"
																		},
																		"nativeSrc": "3012:47:9",
																		"nodeType": "YulIf",
																		"src": "3012:47:9"
																	},
																	{
																		"nativeSrc": "3072:41:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "3072:41:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "3086:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "3086:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "3096:1:9",
																							"nodeType": "YulLiteral",
																							"src": "3096:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "3103:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "3103:3:9"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "3108:2:9",
																									"nodeType": "YulLiteral",
																									"src": "3108:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "3099:3:9",
																								"nodeType": "YulIdentifier",
																								"src": "3099:3:9"
																							},
																							"nativeSrc": "3099:12:9",
																							"nodeType": "YulFunctionCall",
																							"src": "3099:12:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "3092:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "3092:3:9"
																					},
																					"nativeSrc": "3092:20:9",
																					"nodeType": "YulFunctionCall",
																					"src": "3092:20:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3082:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "3082:3:9"
																			},
																			"nativeSrc": "3082:31:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3082:31:9"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "3076:2:9",
																				"nodeType": "YulTypedName",
																				"src": "3076:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "3126:24:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "3126:24:9",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "3139:11:9",
																			"nodeType": "YulIdentifier",
																			"src": "3139:11:9"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "3130:5:9",
																				"nodeType": "YulTypedName",
																				"src": "3130:5:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "3224:20:9",
																			"nodeType": "YulBlock",
																			"src": "3224:20:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "3233:5:9",
																								"nodeType": "YulIdentifier",
																								"src": "3233:5:9"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3240:1:9",
																								"nodeType": "YulLiteral",
																								"src": "3240:1:9",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "3226:6:9",
																							"nodeType": "YulIdentifier",
																							"src": "3226:6:9"
																						},
																						"nativeSrc": "3226:16:9",
																						"nodeType": "YulFunctionCall",
																						"src": "3226:16:9"
																					},
																					"nativeSrc": "3226:16:9",
																					"nodeType": "YulExpressionStatement",
																					"src": "3226:16:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3174:5:9",
																					"nodeType": "YulIdentifier",
																					"src": "3174:5:9"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "3181:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "3181:2:9"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "3171:2:9",
																				"nodeType": "YulIdentifier",
																				"src": "3171:2:9"
																			},
																			"nativeSrc": "3171:13:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3171:13:9"
																		},
																		"nativeSrc": "3163:81:9",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "3185:26:9",
																			"nodeType": "YulBlock",
																			"src": "3185:26:9",
																			"statements": [
																				{
																					"nativeSrc": "3187:22:9",
																					"nodeType": "YulAssignment",
																					"src": "3187:22:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "3200:5:9",
																								"nodeType": "YulIdentifier",
																								"src": "3200:5:9"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3207:1:9",
																								"nodeType": "YulLiteral",
																								"src": "3207:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "3196:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "3196:3:9"
																						},
																						"nativeSrc": "3196:13:9",
																						"nodeType": "YulFunctionCall",
																						"src": "3196:13:9"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "3187:5:9",
																							"nodeType": "YulIdentifier",
																							"src": "3187:5:9"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "3167:3:9",
																			"nodeType": "YulBlock",
																			"src": "3167:3:9",
																			"statements": []
																		},
																		"src": "3163:81:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "2839:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "2839:3:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2844:2:9",
																		"nodeType": "YulLiteral",
																		"src": "2844:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2836:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "2836:2:9"
																},
																"nativeSrc": "2836:11:9",
																"nodeType": "YulFunctionCall",
																"src": "2836:11:9"
															},
															"nativeSrc": "2833:421:9",
															"nodeType": "YulIf",
															"src": "2833:421:9"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "2742:518:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "2795:5:9",
														"nodeType": "YulTypedName",
														"src": "2795:5:9",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "2802:3:9",
														"nodeType": "YulTypedName",
														"src": "2802:3:9",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "2807:10:9",
														"nodeType": "YulTypedName",
														"src": "2807:10:9",
														"type": ""
													}
												],
												"src": "2742:518:9"
											},
											{
												"body": {
													"nativeSrc": "3350:81:9",
													"nodeType": "YulBlock",
													"src": "3350:81:9",
													"statements": [
														{
															"nativeSrc": "3360:65:9",
															"nodeType": "YulAssignment",
															"src": "3360:65:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "3375:4:9",
																				"nodeType": "YulIdentifier",
																				"src": "3375:4:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "3393:1:9",
																										"nodeType": "YulLiteral",
																										"src": "3393:1:9",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "3396:3:9",
																										"nodeType": "YulIdentifier",
																										"src": "3396:3:9"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "3389:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "3389:3:9"
																								},
																								"nativeSrc": "3389:11:9",
																								"nodeType": "YulFunctionCall",
																								"src": "3389:11:9"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "3406:1:9",
																										"nodeType": "YulLiteral",
																										"src": "3406:1:9",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "3402:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "3402:3:9"
																								},
																								"nativeSrc": "3402:6:9",
																								"nodeType": "YulFunctionCall",
																								"src": "3402:6:9"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "3385:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "3385:3:9"
																						},
																						"nativeSrc": "3385:24:9",
																						"nodeType": "YulFunctionCall",
																						"src": "3385:24:9"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "3381:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "3381:3:9"
																				},
																				"nativeSrc": "3381:29:9",
																				"nodeType": "YulFunctionCall",
																				"src": "3381:29:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3371:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "3371:3:9"
																		},
																		"nativeSrc": "3371:40:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3371:40:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3417:1:9",
																				"nodeType": "YulLiteral",
																				"src": "3417:1:9",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "3420:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "3420:3:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "3413:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "3413:3:9"
																		},
																		"nativeSrc": "3413:11:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3413:11:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "3368:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "3368:2:9"
																},
																"nativeSrc": "3368:57:9",
																"nodeType": "YulFunctionCall",
																"src": "3368:57:9"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "3360:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "3360:4:9"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "3265:166:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "3327:4:9",
														"nodeType": "YulTypedName",
														"src": "3327:4:9",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "3333:3:9",
														"nodeType": "YulTypedName",
														"src": "3333:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "3341:4:9",
														"nodeType": "YulTypedName",
														"src": "3341:4:9",
														"type": ""
													}
												],
												"src": "3265:166:9"
											},
											{
												"body": {
													"nativeSrc": "3532:1203:9",
													"nodeType": "YulBlock",
													"src": "3532:1203:9",
													"statements": [
														{
															"nativeSrc": "3542:24:9",
															"nodeType": "YulVariableDeclaration",
															"src": "3542:24:9",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "3562:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "3562:3:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3556:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "3556:5:9"
																},
																"nativeSrc": "3556:10:9",
																"nodeType": "YulFunctionCall",
																"src": "3556:10:9"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "3546:6:9",
																	"nodeType": "YulTypedName",
																	"src": "3546:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3609:22:9",
																"nodeType": "YulBlock",
																"src": "3609:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "3611:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "3611:16:9"
																			},
																			"nativeSrc": "3611:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3611:18:9"
																		},
																		"nativeSrc": "3611:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "3611:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "3581:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "3581:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "3597:2:9",
																						"nodeType": "YulLiteral",
																						"src": "3597:2:9",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3601:1:9",
																						"nodeType": "YulLiteral",
																						"src": "3601:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "3593:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "3593:3:9"
																				},
																				"nativeSrc": "3593:10:9",
																				"nodeType": "YulFunctionCall",
																				"src": "3593:10:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3605:1:9",
																				"nodeType": "YulLiteral",
																				"src": "3605:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3589:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "3589:3:9"
																		},
																		"nativeSrc": "3589:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3589:18:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3578:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "3578:2:9"
																},
																"nativeSrc": "3578:30:9",
																"nodeType": "YulFunctionCall",
																"src": "3578:30:9"
															},
															"nativeSrc": "3575:56:9",
															"nodeType": "YulIf",
															"src": "3575:56:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3684:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "3684:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "3722:4:9",
																						"nodeType": "YulIdentifier",
																						"src": "3722:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "3716:5:9",
																					"nodeType": "YulIdentifier",
																					"src": "3716:5:9"
																				},
																				"nativeSrc": "3716:11:9",
																				"nodeType": "YulFunctionCall",
																				"src": "3716:11:9"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "3690:25:9",
																			"nodeType": "YulIdentifier",
																			"src": "3690:25:9"
																		},
																		"nativeSrc": "3690:38:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3690:38:9"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "3730:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "3730:6:9"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "3640:43:9",
																	"nodeType": "YulIdentifier",
																	"src": "3640:43:9"
																},
																"nativeSrc": "3640:97:9",
																"nodeType": "YulFunctionCall",
																"src": "3640:97:9"
															},
															"nativeSrc": "3640:97:9",
															"nodeType": "YulExpressionStatement",
															"src": "3640:97:9"
														},
														{
															"nativeSrc": "3746:18:9",
															"nodeType": "YulVariableDeclaration",
															"src": "3746:18:9",
															"value": {
																"kind": "number",
																"nativeSrc": "3763:1:9",
																"nodeType": "YulLiteral",
																"src": "3763:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "3750:9:9",
																	"nodeType": "YulTypedName",
																	"src": "3750:9:9",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3773:17:9",
															"nodeType": "YulAssignment",
															"src": "3773:17:9",
															"value": {
																"kind": "number",
																"nativeSrc": "3786:4:9",
																"nodeType": "YulLiteral",
																"src": "3786:4:9",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "3773:9:9",
																	"nodeType": "YulIdentifier",
																	"src": "3773:9:9"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "3836:642:9",
																		"nodeType": "YulBlock",
																		"src": "3836:642:9",
																		"statements": [
																			{
																				"nativeSrc": "3850:35:9",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3850:35:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "3869:6:9",
																							"nodeType": "YulIdentifier",
																							"src": "3869:6:9"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "3881:2:9",
																									"nodeType": "YulLiteral",
																									"src": "3881:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "3877:3:9",
																								"nodeType": "YulIdentifier",
																								"src": "3877:3:9"
																							},
																							"nativeSrc": "3877:7:9",
																							"nodeType": "YulFunctionCall",
																							"src": "3877:7:9"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "3865:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "3865:3:9"
																					},
																					"nativeSrc": "3865:20:9",
																					"nodeType": "YulFunctionCall",
																					"src": "3865:20:9"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "3854:7:9",
																						"nodeType": "YulTypedName",
																						"src": "3854:7:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "3898:49:9",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3898:49:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "3942:4:9",
																							"nodeType": "YulIdentifier",
																							"src": "3942:4:9"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "3912:29:9",
																						"nodeType": "YulIdentifier",
																						"src": "3912:29:9"
																					},
																					"nativeSrc": "3912:35:9",
																					"nodeType": "YulFunctionCall",
																					"src": "3912:35:9"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "3902:6:9",
																						"nodeType": "YulTypedName",
																						"src": "3902:6:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "3960:10:9",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3960:10:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3969:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3969:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "3964:1:9",
																						"nodeType": "YulTypedName",
																						"src": "3964:1:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "4040:165:9",
																					"nodeType": "YulBlock",
																					"src": "4040:165:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "4065:6:9",
																										"nodeType": "YulIdentifier",
																										"src": "4065:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "4083:3:9",
																														"nodeType": "YulIdentifier",
																														"src": "4083:3:9"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "4088:9:9",
																														"nodeType": "YulIdentifier",
																														"src": "4088:9:9"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "4079:3:9",
																													"nodeType": "YulIdentifier",
																													"src": "4079:3:9"
																												},
																												"nativeSrc": "4079:19:9",
																												"nodeType": "YulFunctionCall",
																												"src": "4079:19:9"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "4073:5:9",
																											"nodeType": "YulIdentifier",
																											"src": "4073:5:9"
																										},
																										"nativeSrc": "4073:26:9",
																										"nodeType": "YulFunctionCall",
																										"src": "4073:26:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "4058:6:9",
																									"nodeType": "YulIdentifier",
																									"src": "4058:6:9"
																								},
																								"nativeSrc": "4058:42:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4058:42:9"
																							},
																							"nativeSrc": "4058:42:9",
																							"nodeType": "YulExpressionStatement",
																							"src": "4058:42:9"
																						},
																						{
																							"nativeSrc": "4117:24:9",
																							"nodeType": "YulAssignment",
																							"src": "4117:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "4131:6:9",
																										"nodeType": "YulIdentifier",
																										"src": "4131:6:9"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "4139:1:9",
																										"nodeType": "YulLiteral",
																										"src": "4139:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "4127:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "4127:3:9"
																								},
																								"nativeSrc": "4127:14:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4127:14:9"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "4117:6:9",
																									"nodeType": "YulIdentifier",
																									"src": "4117:6:9"
																								}
																							]
																						},
																						{
																							"nativeSrc": "4158:33:9",
																							"nodeType": "YulAssignment",
																							"src": "4158:33:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "4175:9:9",
																										"nodeType": "YulIdentifier",
																										"src": "4175:9:9"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "4186:4:9",
																										"nodeType": "YulLiteral",
																										"src": "4186:4:9",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "4171:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "4171:3:9"
																								},
																								"nativeSrc": "4171:20:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4171:20:9"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "4158:9:9",
																									"nodeType": "YulIdentifier",
																									"src": "4158:9:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "3994:1:9",
																							"nodeType": "YulIdentifier",
																							"src": "3994:1:9"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "3997:7:9",
																							"nodeType": "YulIdentifier",
																							"src": "3997:7:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "3991:2:9",
																						"nodeType": "YulIdentifier",
																						"src": "3991:2:9"
																					},
																					"nativeSrc": "3991:14:9",
																					"nodeType": "YulFunctionCall",
																					"src": "3991:14:9"
																				},
																				"nativeSrc": "3983:222:9",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "4006:21:9",
																					"nodeType": "YulBlock",
																					"src": "4006:21:9",
																					"statements": [
																						{
																							"nativeSrc": "4008:17:9",
																							"nodeType": "YulAssignment",
																							"src": "4008:17:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "4017:1:9",
																										"nodeType": "YulIdentifier",
																										"src": "4017:1:9"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "4020:4:9",
																										"nodeType": "YulLiteral",
																										"src": "4020:4:9",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "4013:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "4013:3:9"
																								},
																								"nativeSrc": "4013:12:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4013:12:9"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "4008:1:9",
																									"nodeType": "YulIdentifier",
																									"src": "4008:1:9"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "3987:3:9",
																					"nodeType": "YulBlock",
																					"src": "3987:3:9",
																					"statements": []
																				},
																				"src": "3983:222:9"
																			},
																			{
																				"body": {
																					"nativeSrc": "4253:166:9",
																					"nodeType": "YulBlock",
																					"src": "4253:166:9",
																					"statements": [
																						{
																							"nativeSrc": "4271:43:9",
																							"nodeType": "YulVariableDeclaration",
																							"src": "4271:43:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "4298:3:9",
																												"nodeType": "YulIdentifier",
																												"src": "4298:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "4303:9:9",
																												"nodeType": "YulIdentifier",
																												"src": "4303:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "4294:3:9",
																											"nodeType": "YulIdentifier",
																											"src": "4294:3:9"
																										},
																										"nativeSrc": "4294:19:9",
																										"nodeType": "YulFunctionCall",
																										"src": "4294:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "4288:5:9",
																									"nodeType": "YulIdentifier",
																									"src": "4288:5:9"
																								},
																								"nativeSrc": "4288:26:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4288:26:9"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "4275:9:9",
																									"nodeType": "YulTypedName",
																									"src": "4275:9:9",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "4338:6:9",
																										"nodeType": "YulIdentifier",
																										"src": "4338:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "4350:9:9",
																												"nodeType": "YulIdentifier",
																												"src": "4350:9:9"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "4377:1:9",
																																				"nodeType": "YulLiteral",
																																				"src": "4377:1:9",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "4380:6:9",
																																				"nodeType": "YulIdentifier",
																																				"src": "4380:6:9"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "4373:3:9",
																																			"nodeType": "YulIdentifier",
																																			"src": "4373:3:9"
																																		},
																																		"nativeSrc": "4373:14:9",
																																		"nodeType": "YulFunctionCall",
																																		"src": "4373:14:9"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "4389:3:9",
																																		"nodeType": "YulLiteral",
																																		"src": "4389:3:9",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "4369:3:9",
																																	"nodeType": "YulIdentifier",
																																	"src": "4369:3:9"
																																},
																																"nativeSrc": "4369:24:9",
																																"nodeType": "YulFunctionCall",
																																"src": "4369:24:9"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "4399:1:9",
																																		"nodeType": "YulLiteral",
																																		"src": "4399:1:9",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "4395:3:9",
																																	"nodeType": "YulIdentifier",
																																	"src": "4395:3:9"
																																},
																																"nativeSrc": "4395:6:9",
																																"nodeType": "YulFunctionCall",
																																"src": "4395:6:9"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "4365:3:9",
																															"nodeType": "YulIdentifier",
																															"src": "4365:3:9"
																														},
																														"nativeSrc": "4365:37:9",
																														"nodeType": "YulFunctionCall",
																														"src": "4365:37:9"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "4361:3:9",
																													"nodeType": "YulIdentifier",
																													"src": "4361:3:9"
																												},
																												"nativeSrc": "4361:42:9",
																												"nodeType": "YulFunctionCall",
																												"src": "4361:42:9"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "4346:3:9",
																											"nodeType": "YulIdentifier",
																											"src": "4346:3:9"
																										},
																										"nativeSrc": "4346:58:9",
																										"nodeType": "YulFunctionCall",
																										"src": "4346:58:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "4331:6:9",
																									"nodeType": "YulIdentifier",
																									"src": "4331:6:9"
																								},
																								"nativeSrc": "4331:74:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4331:74:9"
																							},
																							"nativeSrc": "4331:74:9",
																							"nodeType": "YulExpressionStatement",
																							"src": "4331:74:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "4224:7:9",
																							"nodeType": "YulIdentifier",
																							"src": "4224:7:9"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "4233:6:9",
																							"nodeType": "YulIdentifier",
																							"src": "4233:6:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "4221:2:9",
																						"nodeType": "YulIdentifier",
																						"src": "4221:2:9"
																					},
																					"nativeSrc": "4221:19:9",
																					"nodeType": "YulFunctionCall",
																					"src": "4221:19:9"
																				},
																				"nativeSrc": "4218:201:9",
																				"nodeType": "YulIf",
																				"src": "4218:201:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "4439:4:9",
																							"nodeType": "YulIdentifier",
																							"src": "4439:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "4453:1:9",
																											"nodeType": "YulLiteral",
																											"src": "4453:1:9",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "4456:6:9",
																											"nodeType": "YulIdentifier",
																											"src": "4456:6:9"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "4449:3:9",
																										"nodeType": "YulIdentifier",
																										"src": "4449:3:9"
																									},
																									"nativeSrc": "4449:14:9",
																									"nodeType": "YulFunctionCall",
																									"src": "4449:14:9"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4465:1:9",
																									"nodeType": "YulLiteral",
																									"src": "4465:1:9",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4445:3:9",
																								"nodeType": "YulIdentifier",
																								"src": "4445:3:9"
																							},
																							"nativeSrc": "4445:22:9",
																							"nodeType": "YulFunctionCall",
																							"src": "4445:22:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "4432:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "4432:6:9"
																					},
																					"nativeSrc": "4432:36:9",
																					"nodeType": "YulFunctionCall",
																					"src": "4432:36:9"
																				},
																				"nativeSrc": "4432:36:9",
																				"nodeType": "YulExpressionStatement",
																				"src": "4432:36:9"
																			}
																		]
																	},
																	"nativeSrc": "3829:649:9",
																	"nodeType": "YulCase",
																	"src": "3829:649:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3834:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3834:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "4495:234:9",
																		"nodeType": "YulBlock",
																		"src": "4495:234:9",
																		"statements": [
																			{
																				"nativeSrc": "4509:14:9",
																				"nodeType": "YulVariableDeclaration",
																				"src": "4509:14:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "4522:1:9",
																					"nodeType": "YulLiteral",
																					"src": "4522:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "4513:5:9",
																						"nodeType": "YulTypedName",
																						"src": "4513:5:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "4558:67:9",
																					"nodeType": "YulBlock",
																					"src": "4558:67:9",
																					"statements": [
																						{
																							"nativeSrc": "4576:35:9",
																							"nodeType": "YulAssignment",
																							"src": "4576:35:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "4595:3:9",
																												"nodeType": "YulIdentifier",
																												"src": "4595:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "4600:9:9",
																												"nodeType": "YulIdentifier",
																												"src": "4600:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "4591:3:9",
																											"nodeType": "YulIdentifier",
																											"src": "4591:3:9"
																										},
																										"nativeSrc": "4591:19:9",
																										"nodeType": "YulFunctionCall",
																										"src": "4591:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "4585:5:9",
																									"nodeType": "YulIdentifier",
																									"src": "4585:5:9"
																								},
																								"nativeSrc": "4585:26:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4585:26:9"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "4576:5:9",
																									"nodeType": "YulIdentifier",
																									"src": "4576:5:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "4539:6:9",
																					"nodeType": "YulIdentifier",
																					"src": "4539:6:9"
																				},
																				"nativeSrc": "4536:89:9",
																				"nodeType": "YulIf",
																				"src": "4536:89:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "4645:4:9",
																							"nodeType": "YulIdentifier",
																							"src": "4645:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "4704:5:9",
																									"nodeType": "YulIdentifier",
																									"src": "4704:5:9"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "4711:6:9",
																									"nodeType": "YulIdentifier",
																									"src": "4711:6:9"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "4651:52:9",
																								"nodeType": "YulIdentifier",
																								"src": "4651:52:9"
																							},
																							"nativeSrc": "4651:67:9",
																							"nodeType": "YulFunctionCall",
																							"src": "4651:67:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "4638:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "4638:6:9"
																					},
																					"nativeSrc": "4638:81:9",
																					"nodeType": "YulFunctionCall",
																					"src": "4638:81:9"
																				},
																				"nativeSrc": "4638:81:9",
																				"nodeType": "YulExpressionStatement",
																				"src": "4638:81:9"
																			}
																		]
																	},
																	"nativeSrc": "4487:242:9",
																	"nodeType": "YulCase",
																	"src": "4487:242:9",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "3809:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "3809:6:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3817:2:9",
																		"nodeType": "YulLiteral",
																		"src": "3817:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3806:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "3806:2:9"
																},
																"nativeSrc": "3806:14:9",
																"nodeType": "YulFunctionCall",
																"src": "3806:14:9"
															},
															"nativeSrc": "3799:930:9",
															"nodeType": "YulSwitch",
															"src": "3799:930:9"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "3436:1299:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3517:4:9",
														"nodeType": "YulTypedName",
														"src": "3517:4:9",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "3523:3:9",
														"nodeType": "YulTypedName",
														"src": "3523:3:9",
														"type": ""
													}
												],
												"src": "3436:1299:9"
											},
											{
												"body": {
													"nativeSrc": "4849:76:9",
													"nodeType": "YulBlock",
													"src": "4849:76:9",
													"statements": [
														{
															"nativeSrc": "4859:26:9",
															"nodeType": "YulAssignment",
															"src": "4859:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4871:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "4871:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4882:2:9",
																		"nodeType": "YulLiteral",
																		"src": "4882:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4867:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4867:3:9"
																},
																"nativeSrc": "4867:18:9",
																"nodeType": "YulFunctionCall",
																"src": "4867:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4859:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "4859:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4901:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "4901:9:9"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "4912:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "4912:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4894:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "4894:6:9"
																},
																"nativeSrc": "4894:25:9",
																"nodeType": "YulFunctionCall",
																"src": "4894:25:9"
															},
															"nativeSrc": "4894:25:9",
															"nodeType": "YulExpressionStatement",
															"src": "4894:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed",
												"nativeSrc": "4740:185:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4818:9:9",
														"nodeType": "YulTypedName",
														"src": "4818:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4829:6:9",
														"nodeType": "YulTypedName",
														"src": "4829:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4840:4:9",
														"nodeType": "YulTypedName",
														"src": "4840:4:9",
														"type": ""
													}
												],
												"src": "4740:185:9"
											},
											{
												"body": {
													"nativeSrc": "5031:102:9",
													"nodeType": "YulBlock",
													"src": "5031:102:9",
													"statements": [
														{
															"nativeSrc": "5041:26:9",
															"nodeType": "YulAssignment",
															"src": "5041:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5053:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5053:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5064:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5064:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5049:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5049:3:9"
																},
																"nativeSrc": "5049:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5049:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5041:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5041:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5083:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5083:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5098:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "5098:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5114:3:9",
																								"nodeType": "YulLiteral",
																								"src": "5114:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5119:1:9",
																								"nodeType": "YulLiteral",
																								"src": "5119:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5110:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "5110:3:9"
																						},
																						"nativeSrc": "5110:11:9",
																						"nodeType": "YulFunctionCall",
																						"src": "5110:11:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5123:1:9",
																						"nodeType": "YulLiteral",
																						"src": "5123:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5106:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "5106:3:9"
																				},
																				"nativeSrc": "5106:19:9",
																				"nodeType": "YulFunctionCall",
																				"src": "5106:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5094:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5094:3:9"
																		},
																		"nativeSrc": "5094:32:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5094:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5076:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5076:6:9"
																},
																"nativeSrc": "5076:51:9",
																"nodeType": "YulFunctionCall",
																"src": "5076:51:9"
															},
															"nativeSrc": "5076:51:9",
															"nodeType": "YulExpressionStatement",
															"src": "5076:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "4930:203:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5000:9:9",
														"nodeType": "YulTypedName",
														"src": "5000:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5011:6:9",
														"nodeType": "YulTypedName",
														"src": "5011:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5022:4:9",
														"nodeType": "YulTypedName",
														"src": "5022:4:9",
														"type": ""
													}
												],
												"src": "4930:203:9"
											},
											{
												"body": {
													"nativeSrc": "5267:119:9",
													"nodeType": "YulBlock",
													"src": "5267:119:9",
													"statements": [
														{
															"nativeSrc": "5277:26:9",
															"nodeType": "YulAssignment",
															"src": "5277:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5289:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5289:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5300:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5300:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5285:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5285:3:9"
																},
																"nativeSrc": "5285:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5285:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5277:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5277:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5319:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5319:9:9"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "5330:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5330:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5312:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5312:6:9"
																},
																"nativeSrc": "5312:25:9",
																"nodeType": "YulFunctionCall",
																"src": "5312:25:9"
															},
															"nativeSrc": "5312:25:9",
															"nodeType": "YulExpressionStatement",
															"src": "5312:25:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5357:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5357:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5368:2:9",
																				"nodeType": "YulLiteral",
																				"src": "5368:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5353:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5353:3:9"
																		},
																		"nativeSrc": "5353:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5353:18:9"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "5373:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5373:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5346:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5346:6:9"
																},
																"nativeSrc": "5346:34:9",
																"nodeType": "YulFunctionCall",
																"src": "5346:34:9"
															},
															"nativeSrc": "5346:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "5346:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5138:248:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5228:9:9",
														"nodeType": "YulTypedName",
														"src": "5228:9:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5239:6:9",
														"nodeType": "YulTypedName",
														"src": "5239:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5247:6:9",
														"nodeType": "YulTypedName",
														"src": "5247:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5258:4:9",
														"nodeType": "YulTypedName",
														"src": "5258:4:9",
														"type": ""
													}
												],
												"src": "5138:248:9"
											},
											{
												"body": {
													"nativeSrc": "5439:77:9",
													"nodeType": "YulBlock",
													"src": "5439:77:9",
													"statements": [
														{
															"nativeSrc": "5449:16:9",
															"nodeType": "YulAssignment",
															"src": "5449:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "5460:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "5460:1:9"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "5463:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "5463:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5456:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5456:3:9"
																},
																"nativeSrc": "5456:9:9",
																"nodeType": "YulFunctionCall",
																"src": "5456:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "5449:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5449:3:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5488:22:9",
																"nodeType": "YulBlock",
																"src": "5488:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "5490:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "5490:16:9"
																			},
																			"nativeSrc": "5490:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "5490:18:9"
																		},
																		"nativeSrc": "5490:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "5490:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "5480:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "5480:1:9"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "5483:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "5483:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5477:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "5477:2:9"
																},
																"nativeSrc": "5477:10:9",
																"nodeType": "YulFunctionCall",
																"src": "5477:10:9"
															},
															"nativeSrc": "5474:36:9",
															"nodeType": "YulIf",
															"src": "5474:36:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "5391:125:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "5422:1:9",
														"nodeType": "YulTypedName",
														"src": "5422:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "5425:1:9",
														"nodeType": "YulTypedName",
														"src": "5425:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "5431:3:9",
														"nodeType": "YulTypedName",
														"src": "5431:3:9",
														"type": ""
													}
												],
												"src": "5391:125:9"
											},
											{
												"body": {
													"nativeSrc": "5678:188:9",
													"nodeType": "YulBlock",
													"src": "5678:188:9",
													"statements": [
														{
															"nativeSrc": "5688:26:9",
															"nodeType": "YulAssignment",
															"src": "5688:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5700:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5700:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5711:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5711:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5696:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5696:3:9"
																},
																"nativeSrc": "5696:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5696:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5688:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5688:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5730:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5730:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5745:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "5745:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5761:3:9",
																								"nodeType": "YulLiteral",
																								"src": "5761:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5766:1:9",
																								"nodeType": "YulLiteral",
																								"src": "5766:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5757:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "5757:3:9"
																						},
																						"nativeSrc": "5757:11:9",
																						"nodeType": "YulFunctionCall",
																						"src": "5757:11:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5770:1:9",
																						"nodeType": "YulLiteral",
																						"src": "5770:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5753:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "5753:3:9"
																				},
																				"nativeSrc": "5753:19:9",
																				"nodeType": "YulFunctionCall",
																				"src": "5753:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5741:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5741:3:9"
																		},
																		"nativeSrc": "5741:32:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5741:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5723:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5723:6:9"
																},
																"nativeSrc": "5723:51:9",
																"nodeType": "YulFunctionCall",
																"src": "5723:51:9"
															},
															"nativeSrc": "5723:51:9",
															"nodeType": "YulExpressionStatement",
															"src": "5723:51:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5794:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5794:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5805:2:9",
																				"nodeType": "YulLiteral",
																				"src": "5805:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5790:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5790:3:9"
																		},
																		"nativeSrc": "5790:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5790:18:9"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "5810:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5810:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5783:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5783:6:9"
																},
																"nativeSrc": "5783:34:9",
																"nodeType": "YulFunctionCall",
																"src": "5783:34:9"
															},
															"nativeSrc": "5783:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "5783:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5837:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5837:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5848:2:9",
																				"nodeType": "YulLiteral",
																				"src": "5848:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5833:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5833:3:9"
																		},
																		"nativeSrc": "5833:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5833:18:9"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "5853:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5853:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5826:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5826:6:9"
																},
																"nativeSrc": "5826:34:9",
																"nodeType": "YulFunctionCall",
																"src": "5826:34:9"
															},
															"nativeSrc": "5826:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "5826:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5521:345:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5631:9:9",
														"nodeType": "YulTypedName",
														"src": "5631:9:9",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5642:6:9",
														"nodeType": "YulTypedName",
														"src": "5642:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5650:6:9",
														"nodeType": "YulTypedName",
														"src": "5650:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5658:6:9",
														"nodeType": "YulTypedName",
														"src": "5658:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5669:4:9",
														"nodeType": "YulTypedName",
														"src": "5669:4:9",
														"type": ""
													}
												],
												"src": "5521:345:9"
											},
											{
												"body": {
													"nativeSrc": "5972:76:9",
													"nodeType": "YulBlock",
													"src": "5972:76:9",
													"statements": [
														{
															"nativeSrc": "5982:26:9",
															"nodeType": "YulAssignment",
															"src": "5982:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5994:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5994:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6005:2:9",
																		"nodeType": "YulLiteral",
																		"src": "6005:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5990:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:9"
																},
																"nativeSrc": "5990:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5990:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5982:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5982:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6024:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "6024:9:9"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6035:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "6035:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6017:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "6017:6:9"
																},
																"nativeSrc": "6017:25:9",
																"nodeType": "YulFunctionCall",
																"src": "6017:25:9"
															},
															"nativeSrc": "6017:25:9",
															"nodeType": "YulExpressionStatement",
															"src": "6017:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "5871:177:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5941:9:9",
														"nodeType": "YulTypedName",
														"src": "5941:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5952:6:9",
														"nodeType": "YulTypedName",
														"src": "5952:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5963:4:9",
														"nodeType": "YulTypedName",
														"src": "5963:4:9",
														"type": ""
													}
												],
												"src": "5871:177:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := mload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := mload(add(headStart, 32))\n        value1 := value_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent, max) -> power, base\n    {\n        power := 1\n        base := _base\n        for { } gt(exponent, 1) { }\n        {\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            let _1 := 0\n            _1 := 0\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            let _2 := 0\n            _2 := 0\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent, not(0))\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a060405234801561000f575f5ffd5b5060405161117738038061117783398101604081905261002e91610347565b3361003b6012600a610462565b6100459083610477565b604051806040016040528060098152602001682a32b1b737a1b7b4b760b91b81525060405180604001604052806003815260200162544e4360e81b8152508160039081610092919061051e565b50600461009f828261051e565b505050805f036100c95760405163392e1e2760e01b81525f60048201526024015b60405180910390fd5b6080526001600160a01b0381166100f557604051631e4fbdf760e01b81525f60048201526024016100c0565b6100fe81610125565b5061011e3361010f6012600a610462565b6101199085610477565b610176565b50506105eb565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b03821661019f5760405163ec442f0560e01b81525f60048201526024016100c0565b6101aa5f83836101ae565b5050565b6101b98383836101be565b505050565b6101c9838383610221565b6001600160a01b0383166101b9575f6101e160805190565b90505f6101ed60025490565b90508181111561021a5760405163279e7e1560e21b815260048101829052602481018390526044016100c0565b5050505050565b6001600160a01b03831661024b578060025f82825461024091906105d8565b909155506102bb9050565b6001600160a01b0383165f908152602081905260409020548181101561029d5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100c0565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166102d7576002805482900390556102f5565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161033a91815260200190565b60405180910390a3505050565b5f5f60408385031215610358575f5ffd5b505080516020909101519092909150565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156103b85780850481111561039c5761039c610369565b60018416156103aa57908102905b60019390931c928002610381565b935093915050565b5f826103ce5750600161045c565b816103da57505f61045c565b81600181146103f057600281146103fa57610416565b600191505061045c565b60ff84111561040b5761040b610369565b50506001821b61045c565b5060208310610133831016604e8410600b8410161715610439575081810a61045c565b6104455f19848461037d565b805f190482111561045857610458610369565b0290505b92915050565b5f61047060ff8416836103c0565b9392505050565b808202811582820484141761045c5761045c610369565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806104b657607f821691505b6020821081036104d457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156101b957805f5260205f20601f840160051c810160208510156104ff5750805b601f840160051c820191505b8181101561021a575f815560010161050b565b81516001600160401b038111156105375761053761048e565b61054b8161054584546104a2565b846104da565b6020601f82116001811461057d575f83156105665750848201515b5f19600385901b1c1916600184901b17845561021a565b5f84815260208120601f198516915b828110156105ac578785015182556020948501946001909201910161058c565b50848210156105c957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561045c5761045c610369565b608051610b666106115f395f81816101760152818161035c01526107370152610b665ff3fe608060405234801561000f575f5ffd5b50600436106100fb575f3560e01c806370a082311161009357806395d89b411161006357806395d89b4114610220578063a9059cbb14610228578063dd62ed3e1461023b578063f2fde38b14610273575f5ffd5b806370a08231146101c2578063715018a6146101ea57806379cc6790146101f25780638da5cb5b14610205575f5ffd5b8063313ce567116100ce578063313ce56714610165578063355274ea1461017457806340c10f191461019a57806342966c68146101af575f5ffd5b806306fdde03146100ff578063095ea7b31461011d57806318160ddd1461014057806323b872dd14610152575b5f5ffd5b610107610286565b60405161011491906108af565b60405180910390f35b61013061012b3660046108ff565b610316565b6040519015158152602001610114565b6002545b604051908152602001610114565b610130610160366004610927565b61032f565b60405160128152602001610114565b7f0000000000000000000000000000000000000000000000000000000000000000610144565b6101ad6101a83660046108ff565b610352565b005b6101ad6101bd366004610961565b6103e0565b6101446101d0366004610978565b6001600160a01b03165f9081526020819052604090205490565b6101ad6103ed565b6101ad6102003660046108ff565b610400565b6005546040516001600160a01b039091168152602001610114565b610107610415565b6101306102363660046108ff565b610424565b610144610249366004610998565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6101ad610281366004610978565b610431565b606060038054610295906109c9565b80601f01602080910402602001604051908101604052809291908181526020018280546102c1906109c9565b801561030c5780601f106102e35761010080835404028352916020019161030c565b820191905f5260205f20905b8154815290600101906020018083116102ef57829003601f168201915b5050505050905090565b5f33610323818585610470565b60019150505b92915050565b5f3361033c858285610482565b6103478585856104fe565b506001949350505050565b61035a61055b565b7f00000000000000000000000000000000000000000000000000000000000000006103876012600a610af8565b6103919083610b06565b60025461039e9190610b1d565b11156103bd57604051630bf3aa0360e41b815260040160405180910390fd5b6103dc826103cd6012600a610af8565b6103d79084610b06565b610588565b5050565b6103ea33826105bc565b50565b6103f561055b565b6103fe5f6105f0565b565b61040b823383610482565b6103dc82826105bc565b606060048054610295906109c9565b5f336103238185856104fe565b61043961055b565b6001600160a01b03811661046757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6103ea816105f0565b61047d8383836001610641565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156104f857818110156104ea57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161045e565b6104f884848484035f610641565b50505050565b6001600160a01b03831661052757604051634b637e8f60e11b81525f600482015260240161045e565b6001600160a01b0382166105505760405163ec442f0560e01b81525f600482015260240161045e565b61047d838383610713565b6005546001600160a01b031633146103fe5760405163118cdaa760e01b815233600482015260240161045e565b6001600160a01b0382166105b15760405163ec442f0560e01b81525f600482015260240161045e565b6103dc5f8383610713565b6001600160a01b0382166105e557604051634b637e8f60e11b81525f600482015260240161045e565b6103dc825f83610713565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b03841661066a5760405163e602df0560e01b81525f600482015260240161045e565b6001600160a01b03831661069357604051634a1406b160e11b81525f600482015260240161045e565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156104f857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161070591815260200190565b60405180910390a350505050565b61047d838383610724838383610789565b6001600160a01b03831661047d576002547f000000000000000000000000000000000000000000000000000000000000000090818111156107825760405163279e7e1560e21b8152600481018290526024810183905260440161045e565b5050505050565b6001600160a01b0383166107b3578060025f8282546107a89190610b1d565b909155506108239050565b6001600160a01b0383165f90815260208190526040902054818110156108055760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161045e565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661083f5760028054829003905561085d565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108a291815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146108fa575f5ffd5b919050565b5f5f60408385031215610910575f5ffd5b610919836108e4565b946020939093013593505050565b5f5f5f60608486031215610939575f5ffd5b610942846108e4565b9250610950602085016108e4565b929592945050506040919091013590565b5f60208284031215610971575f5ffd5b5035919050565b5f60208284031215610988575f5ffd5b610991826108e4565b9392505050565b5f5f604083850312156109a9575f5ffd5b6109b2836108e4565b91506109c0602084016108e4565b90509250929050565b600181811c908216806109dd57607f821691505b6020821081036109fb57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b6001815b6001841115610a5057808504811115610a3457610a34610a01565b6001841615610a4257908102905b60019390931c928002610a19565b935093915050565b5f82610a6657506001610329565b81610a7257505f610329565b8160018114610a885760028114610a9257610aae565b6001915050610329565b60ff841115610aa357610aa3610a01565b50506001821b610329565b5060208310610133831016604e8410600b8410161715610ad1575081810a610329565b610add5f198484610a15565b805f1904821115610af057610af0610a01565b029392505050565b5f61099160ff841683610a58565b808202811582820484141761032957610329610a01565b8082018082111561032957610329610a0156fea264697066735822122026b89f27dc5c3be5b406c514b679a2db27e6f0d84171f8e671d49db8480acb2c64736f6c634300081e0033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1177 CODESIZE SUB DUP1 PUSH2 0x1177 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x347 JUMP JUMPDEST CALLER PUSH2 0x3B PUSH1 0x12 PUSH1 0xA PUSH2 0x462 JUMP JUMPDEST PUSH2 0x45 SWAP1 DUP4 PUSH2 0x477 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x2A32B1B737A1B7B4B7 PUSH1 0xB9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x544E43 PUSH1 0xE8 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x92 SWAP2 SWAP1 PUSH2 0x51E JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x9F DUP3 DUP3 PUSH2 0x51E JUMP JUMPDEST POP POP POP DUP1 PUSH0 SUB PUSH2 0xC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x392E1E27 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xC0 JUMP JUMPDEST PUSH2 0xFE DUP2 PUSH2 0x125 JUMP JUMPDEST POP PUSH2 0x11E CALLER PUSH2 0x10F PUSH1 0x12 PUSH1 0xA PUSH2 0x462 JUMP JUMPDEST PUSH2 0x119 SWAP1 DUP6 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x176 JUMP JUMPDEST POP POP PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x19F JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xC0 JUMP JUMPDEST PUSH2 0x1AA PUSH0 DUP4 DUP4 PUSH2 0x1AE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1B9 DUP4 DUP4 DUP4 PUSH2 0x1BE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C9 DUP4 DUP4 DUP4 PUSH2 0x221 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1B9 JUMPI PUSH0 PUSH2 0x1E1 PUSH1 0x80 MLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1ED PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x21A JUMPI PUSH1 0x40 MLOAD PUSH4 0x279E7E15 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xC0 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x24B JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x5D8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2BB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x29D JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2D7 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x33A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x358 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0x3B8 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0x39C JUMPI PUSH2 0x39C PUSH2 0x369 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x3AA JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0x381 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x3CE JUMPI POP PUSH1 0x1 PUSH2 0x45C JUMP JUMPDEST DUP2 PUSH2 0x3DA JUMPI POP PUSH0 PUSH2 0x45C JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x3F0 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3FA JUMPI PUSH2 0x416 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x45C JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x40B JUMPI PUSH2 0x40B PUSH2 0x369 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x45C JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x439 JUMPI POP DUP2 DUP2 EXP PUSH2 0x45C JUMP JUMPDEST PUSH2 0x445 PUSH0 NOT DUP5 DUP5 PUSH2 0x37D JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x458 JUMPI PUSH2 0x458 PUSH2 0x369 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x470 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x3C0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x369 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x4B6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4D4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1B9 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x4FF JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x21A JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x50B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x537 JUMPI PUSH2 0x537 PUSH2 0x48E JUMP JUMPDEST PUSH2 0x54B DUP2 PUSH2 0x545 DUP5 SLOAD PUSH2 0x4A2 JUMP JUMPDEST DUP5 PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x57D JUMPI PUSH0 DUP4 ISZERO PUSH2 0x566 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x21A JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5AC JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x58C JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x5C9 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x369 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xB66 PUSH2 0x611 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x176 ADD MSTORE DUP2 DUP2 PUSH2 0x35C ADD MSTORE PUSH2 0x737 ADD MSTORE PUSH2 0xB66 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFB JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x273 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x205 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1AF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x152 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x107 PUSH2 0x286 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x114 SWAP2 SWAP1 PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x130 PUSH2 0x12B CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x316 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH2 0x130 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x927 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x144 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AD PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x961 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x1D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x3ED JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x415 JUMP JUMPDEST PUSH2 0x130 PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x998 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x431 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x295 SWAP1 PUSH2 0x9C9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2C1 SWAP1 PUSH2 0x9C9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x30C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x30C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2EF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x323 DUP2 DUP6 DUP6 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x33C DUP6 DUP3 DUP6 PUSH2 0x482 JUMP JUMPDEST PUSH2 0x347 DUP6 DUP6 DUP6 PUSH2 0x4FE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x35A PUSH2 0x55B JUMP JUMPDEST PUSH32 0x0 PUSH2 0x387 PUSH1 0x12 PUSH1 0xA PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0x391 SWAP1 DUP4 PUSH2 0xB06 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x39E SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST GT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF3AA03 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3DC DUP3 PUSH2 0x3CD PUSH1 0x12 PUSH1 0xA PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0x3D7 SWAP1 DUP5 PUSH2 0xB06 JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3EA CALLER DUP3 PUSH2 0x5BC JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3F5 PUSH2 0x55B JUMP JUMPDEST PUSH2 0x3FE PUSH0 PUSH2 0x5F0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x40B DUP3 CALLER DUP4 PUSH2 0x482 JUMP JUMPDEST PUSH2 0x3DC DUP3 DUP3 PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x295 SWAP1 PUSH2 0x9C9 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x323 DUP2 DUP6 DUP6 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x439 PUSH2 0x55B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x467 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3EA DUP2 PUSH2 0x5F0 JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x641 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 LT ISZERO PUSH2 0x4F8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x4F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x641 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x527 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x550 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x3DC PUSH0 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x3DC DUP3 PUSH0 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x66A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x693 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4F8 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x705 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH2 0x724 DUP4 DUP4 DUP4 PUSH2 0x789 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x47D JUMPI PUSH1 0x2 SLOAD PUSH32 0x0 SWAP1 DUP2 DUP2 GT ISZERO PUSH2 0x782 JUMPI PUSH1 0x40 MLOAD PUSH4 0x279E7E15 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x45E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7B3 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x823 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x805 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x83F JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x85D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x8A2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FA JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x910 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x919 DUP4 PUSH2 0x8E4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x939 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x942 DUP5 PUSH2 0x8E4 JUMP JUMPDEST SWAP3 POP PUSH2 0x950 PUSH1 0x20 DUP6 ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x971 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x988 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x991 DUP3 PUSH2 0x8E4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9B2 DUP4 PUSH2 0x8E4 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C0 PUSH1 0x20 DUP5 ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x9DD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9FB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0xA50 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0xA34 JUMPI PUSH2 0xA34 PUSH2 0xA01 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0xA42 JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0xA19 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0xA66 JUMPI POP PUSH1 0x1 PUSH2 0x329 JUMP JUMPDEST DUP2 PUSH2 0xA72 JUMPI POP PUSH0 PUSH2 0x329 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xA88 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xA92 JUMPI PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x329 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xAA3 JUMPI PUSH2 0xAA3 PUSH2 0xA01 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x329 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xAD1 JUMPI POP DUP2 DUP2 EXP PUSH2 0x329 JUMP JUMPDEST PUSH2 0xADD PUSH0 NOT DUP5 DUP5 PUSH2 0xA15 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0xAF0 JUMPI PUSH2 0xAF0 PUSH2 0xA01 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x991 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0xA58 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x329 JUMPI PUSH2 0x329 PUSH2 0xA01 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x329 JUMPI PUSH2 0x329 PUSH2 0xA01 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0xB8 SWAP16 0x27 0xDC TLOAD EXTCODESIZE JUMPF 0xB406 0xC5 EQ 0xB6 PUSH26 0xA2DB27E6F0D84171F8E671D49DB8480ACB2C64736F6C63430008 0x1E STOP CALLER ",
							"sourceMap": "267:878:8:-:0;;;367:298;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;524:10;489:16;2761:2:2;489::8;:16;:::i;:::-;477:28;;:9;:28;:::i;:::-;1582:113:2;;;;;;;;;;;;;-1:-1:-1;;;1582:113:2;;;;;;;;;;;;;;;;-1:-1:-1;;;1582:113:2;;;1656:5;1648;:13;;;;;;:::i;:::-;-1:-1:-1;1671:7:2;:17;1681:7;1671;:17;:::i;:::-;;1582:113;;756:4:5;764:1;756:9;752:65;;788:18;;-1:-1:-1;;;788:18:5;;804:1;788:18;;;4894:25:9;4867:18;;788::5;;;;;;;;752:65;826:11;;-1:-1:-1;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;5076:51:9;5049:18;;1322:31:0;4930:203:9;1269:95:0;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;606:51:8::3;612:10;640:16;2761:2:2::0;640::8::3;:16;:::i;:::-;624:32;::::0;:13;:32:::3;:::i;:::-;606:5;:51::i;:::-;367:298:::0;;267:878;;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;7439:208:2:-;-1:-1:-1;;;;;7509:21:2;;7505:91;;7553:32;;-1:-1:-1;;;7553:32:2;;7582:1;7553:32;;;5076:51:9;5049:18;;7553:32:2;4930:203:9;7505:91:2;7605:35;7621:1;7625:7;7634:5;7605:7;:35::i;:::-;7439:208;;:::o;974:168:8:-;1104:30;1118:4;1124:2;1128:5;1104:13;:30::i;:::-;974:168;;;:::o;1059:371:5:-;1153:30;1167:4;1173:2;1177:5;1153:13;:30::i;:::-;-1:-1:-1;;;;;1198:18:5;;1194:230;;1232:17;1252:5;993:4;;;923:81;1252:5;1232:25;-1:-1:-1;1271:14:5;1288:13;2908:12:2;;;2830:97;1288:13:5;1271:30;;1328:9;1319:6;:18;1315:99;;;1364:35;;-1:-1:-1;;;1364:35:5;;;;;5312:25:9;;;5353:18;;;5346:34;;;5285:18;;1364:35:5;5138:248:9;1315:99:5;1218:206;;1059:371;;;:::o;5989:1107:2:-;-1:-1:-1;;;;;6078:18:2;;6074:540;;6230:5;6214:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6074:540:2;;-1:-1:-1;6074:540:2;;-1:-1:-1;;;;;6288:15:2;;6266:19;6288:15;;;;;;;;;;;6321:19;;;6317:115;;;6367:50;;-1:-1:-1;;;6367:50:2;;-1:-1:-1;;;;;5741:32:9;;6367:50:2;;;5723:51:9;5790:18;;;5783:34;;;5833:18;;;5826:34;;;5696:18;;6367:50:2;5521:345:9;6317:115:2;-1:-1:-1;;;;;6552:15:2;;:9;:15;;;;;;;;;;6570:19;;;;6552:37;;6074:540;-1:-1:-1;;;;;6628:16:2;;6624:425;;6791:12;:21;;;;;;;6624:425;;;-1:-1:-1;;;;;7002:13:2;;:9;:13;;;;;;;;;;:22;;;;;;6624:425;7079:2;-1:-1:-1;;;;;7064:25:2;7073:4;-1:-1:-1;;;;;7064:25:2;;7083:5;7064:25;;;;4894::9;;4882:2;4867:18;;4740:185;7064:25:2;;;;;;;;5989:1107;;;:::o;14:343:9:-;93:6;101;154:2;142:9;133:7;129:23;125:32;122:52;;;170:1;167;160:12;122:52;-1:-1:-1;;215:16:9;;321:2;306:18;;;300:25;215:16;;300:25;;-1:-1:-1;14:343:9:o;362:127::-;423:10;418:3;414:20;411:1;404:31;454:4;451:1;444:15;478:4;475:1;468:15;494:375;582:1;600:5;614:249;635:1;625:8;622:15;614:249;;;685:4;680:3;676:14;670:4;667:24;664:50;;;694:18;;:::i;:::-;744:1;734:8;730:16;727:49;;;758:16;;;;727:49;841:1;837:16;;;;;797:15;;614:249;;;494:375;;;;;;:::o;874:902::-;923:5;953:8;943:80;;-1:-1:-1;994:1:9;1008:5;;943:80;1042:4;1032:76;;-1:-1:-1;1079:1:9;1093:5;;1032:76;1124:4;1142:1;1137:59;;;;1210:1;1205:174;;;;1117:262;;1137:59;1167:1;1158:10;;1181:5;;;1205:174;1242:3;1232:8;1229:17;1226:43;;;1249:18;;:::i;:::-;-1:-1:-1;;1305:1:9;1291:16;;1364:5;;1117:262;;1463:2;1453:8;1450:16;1444:3;1438:4;1435:13;1431:36;1425:2;1415:8;1412:16;1407:2;1401:4;1398:12;1394:35;1391:77;1388:203;;;-1:-1:-1;1500:19:9;;;1576:5;;1388:203;1623:42;-1:-1:-1;;1648:8:9;1642:4;1623:42;:::i;:::-;1701:6;1697:1;1693:6;1689:19;1680:7;1677:32;1674:58;;;1712:18;;:::i;:::-;1750:20;;-1:-1:-1;874:902:9;;;;;:::o;1781:140::-;1839:5;1868:47;1909:4;1899:8;1895:19;1889:4;1868:47;:::i;:::-;1859:56;1781:140;-1:-1:-1;;;1781:140:9:o;1926:168::-;1999:9;;;2030;;2047:15;;;2041:22;;2027:37;2017:71;;2068:18;;:::i;2099:127::-;2160:10;2155:3;2151:20;2148:1;2141:31;2191:4;2188:1;2181:15;2215:4;2212:1;2205:15;2231:380;2310:1;2306:12;;;;2353;;;2374:61;;2428:4;2420:6;2416:17;2406:27;;2374:61;2481:2;2473:6;2470:14;2450:18;2447:38;2444:161;;2527:10;2522:3;2518:20;2515:1;2508:31;2562:4;2559:1;2552:15;2590:4;2587:1;2580:15;2444:161;;2231:380;;;:::o;2742:518::-;2844:2;2839:3;2836:11;2833:421;;;2880:5;2877:1;2870:16;2924:4;2921:1;2911:18;2994:2;2982:10;2978:19;2975:1;2971:27;2965:4;2961:38;3030:4;3018:10;3015:20;3012:47;;;-1:-1:-1;3053:4:9;3012:47;3108:2;3103:3;3099:12;3096:1;3092:20;3086:4;3082:31;3072:41;;3163:81;3181:2;3174:5;3171:13;3163:81;;;3240:1;3226:16;;3207:1;3196:13;3163:81;;3436:1299;3556:10;;-1:-1:-1;;;;;3578:30:9;;3575:56;;;3611:18;;:::i;:::-;3640:97;3730:6;3690:38;3722:4;3716:11;3690:38;:::i;:::-;3684:4;3640:97;:::i;:::-;3786:4;3817:2;3806:14;;3834:1;3829:649;;;;4522:1;4539:6;4536:89;;;-1:-1:-1;4591:19:9;;;4585:26;4536:89;-1:-1:-1;;3393:1:9;3389:11;;;3385:24;3381:29;3371:40;3417:1;3413:11;;;3368:57;4638:81;;3799:930;;3829:649;2689:1;2682:14;;;2726:4;2713:18;;-1:-1:-1;;3865:20:9;;;3983:222;3997:7;3994:1;3991:14;3983:222;;;4079:19;;;4073:26;4058:42;;4186:4;4171:20;;;;4139:1;4127:14;;;;4013:12;3983:222;;;3987:3;4233:6;4224:7;4221:19;4218:201;;;4294:19;;;4288:26;-1:-1:-1;;4377:1:9;4373:14;;;4389:3;4369:24;4365:37;4361:42;4346:58;4331:74;;4218:201;-1:-1:-1;;;;4465:1:9;4449:14;;;4445:22;4432:36;;-1:-1:-1;3436:1299:9:o;5391:125::-;5456:9;;;5477:10;;;5474:36;;;5490:18;;:::i;5871:177::-;267:878:8;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_690": {
									"entryPoint": 1136,
									"id": 690,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_750": {
									"entryPoint": 1601,
									"id": 750,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_burn_672": {
									"entryPoint": 1468,
									"id": 672,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 1371,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_mint_639": {
									"entryPoint": 1416,
									"id": 639,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1060": {
									"entryPoint": null,
									"id": 1060,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_798": {
									"entryPoint": 1154,
									"id": 798,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 1520,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_529": {
									"entryPoint": 1278,
									"id": 529,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_1021": {
									"entryPoint": null,
									"id": 1021,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_1185": {
									"entryPoint": 1811,
									"id": 1185,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_606": {
									"entryPoint": 1929,
									"id": 606,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_426": {
									"entryPoint": null,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_450": {
									"entryPoint": 790,
									"id": 450,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_385": {
									"entryPoint": null,
									"id": 385,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_922": {
									"entryPoint": 1024,
									"id": 922,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_901": {
									"entryPoint": 992,
									"id": 901,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@cap_973": {
									"entryPoint": null,
									"id": 973,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decimals_363": {
									"entryPoint": null,
									"id": 363,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@mint_1164": {
									"entryPoint": 850,
									"id": 1164,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_345": {
									"entryPoint": 646,
									"id": 345,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 1005,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_354": {
									"entryPoint": 1045,
									"id": 354,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_372": {
									"entryPoint": null,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_482": {
									"entryPoint": 815,
									"id": 482,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 1073,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_409": {
									"entryPoint": 1060,
									"id": 409,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 2276,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2424,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2456,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2343,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2303,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2401,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2223,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2845,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 2581,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 2808,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 2648,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2822,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2505,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2561,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:5609:9",
										"nodeType": "YulBlock",
										"src": "0:5609:9",
										"statements": [
											{
												"nativeSrc": "6:3:9",
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "135:297:9",
													"nodeType": "YulBlock",
													"src": "135:297:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "152:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "152:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "163:2:9",
																		"nodeType": "YulLiteral",
																		"src": "163:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "145:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "145:6:9"
																},
																"nativeSrc": "145:21:9",
																"nodeType": "YulFunctionCall",
																"src": "145:21:9"
															},
															"nativeSrc": "145:21:9",
															"nodeType": "YulExpressionStatement",
															"src": "145:21:9"
														},
														{
															"nativeSrc": "175:27:9",
															"nodeType": "YulVariableDeclaration",
															"src": "175:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "195:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "195:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "189:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "189:5:9"
																},
																"nativeSrc": "189:13:9",
																"nodeType": "YulFunctionCall",
																"src": "189:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "179:6:9",
																	"nodeType": "YulTypedName",
																	"src": "179:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "222:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "222:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "233:2:9",
																				"nodeType": "YulLiteral",
																				"src": "233:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "218:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "218:3:9"
																		},
																		"nativeSrc": "218:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "218:18:9"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "238:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "238:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "211:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:9"
																},
																"nativeSrc": "211:34:9",
																"nodeType": "YulFunctionCall",
																"src": "211:34:9"
															},
															"nativeSrc": "211:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "211:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "264:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "264:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "275:2:9",
																				"nodeType": "YulLiteral",
																				"src": "275:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "260:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "260:3:9"
																		},
																		"nativeSrc": "260:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "260:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "284:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "284:6:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "292:2:9",
																				"nodeType": "YulLiteral",
																				"src": "292:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "280:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "280:3:9"
																		},
																		"nativeSrc": "280:15:9",
																		"nodeType": "YulFunctionCall",
																		"src": "280:15:9"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "297:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "297:6:9"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "254:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "254:5:9"
																},
																"nativeSrc": "254:50:9",
																"nodeType": "YulFunctionCall",
																"src": "254:50:9"
															},
															"nativeSrc": "254:50:9",
															"nodeType": "YulExpressionStatement",
															"src": "254:50:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "328:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "328:9:9"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "339:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "339:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "324:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "324:3:9"
																				},
																				"nativeSrc": "324:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "324:22:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "348:2:9",
																				"nodeType": "YulLiteral",
																				"src": "348:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "320:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "320:3:9"
																		},
																		"nativeSrc": "320:31:9",
																		"nodeType": "YulFunctionCall",
																		"src": "320:31:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "353:1:9",
																		"nodeType": "YulLiteral",
																		"src": "353:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "313:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "313:6:9"
																},
																"nativeSrc": "313:42:9",
																"nodeType": "YulFunctionCall",
																"src": "313:42:9"
															},
															"nativeSrc": "313:42:9",
															"nodeType": "YulExpressionStatement",
															"src": "313:42:9"
														},
														{
															"nativeSrc": "364:62:9",
															"nodeType": "YulAssignment",
															"src": "364:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "380:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "380:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "399:6:9",
																								"nodeType": "YulIdentifier",
																								"src": "399:6:9"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "407:2:9",
																								"nodeType": "YulLiteral",
																								"src": "407:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "395:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "395:3:9"
																						},
																						"nativeSrc": "395:15:9",
																						"nodeType": "YulFunctionCall",
																						"src": "395:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "416:2:9",
																								"nodeType": "YulLiteral",
																								"src": "416:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "412:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "412:3:9"
																						},
																						"nativeSrc": "412:7:9",
																						"nodeType": "YulFunctionCall",
																						"src": "412:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "391:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "391:3:9"
																				},
																				"nativeSrc": "391:29:9",
																				"nodeType": "YulFunctionCall",
																				"src": "391:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "376:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "376:3:9"
																		},
																		"nativeSrc": "376:45:9",
																		"nodeType": "YulFunctionCall",
																		"src": "376:45:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "423:2:9",
																		"nodeType": "YulLiteral",
																		"src": "423:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "372:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "372:3:9"
																},
																"nativeSrc": "372:54:9",
																"nodeType": "YulFunctionCall",
																"src": "372:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "364:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "364:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "14:418:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "104:9:9",
														"nodeType": "YulTypedName",
														"src": "104:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "115:6:9",
														"nodeType": "YulTypedName",
														"src": "115:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "126:4:9",
														"nodeType": "YulTypedName",
														"src": "126:4:9",
														"type": ""
													}
												],
												"src": "14:418:9"
											},
											{
												"body": {
													"nativeSrc": "486:124:9",
													"nodeType": "YulBlock",
													"src": "486:124:9",
													"statements": [
														{
															"nativeSrc": "496:29:9",
															"nodeType": "YulAssignment",
															"src": "496:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "518:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "518:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "505:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:9"
																},
																"nativeSrc": "505:20:9",
																"nodeType": "YulFunctionCall",
																"src": "505:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "496:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "496:5:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "588:16:9",
																"nodeType": "YulBlock",
																"src": "588:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "597:1:9",
																					"nodeType": "YulLiteral",
																					"src": "597:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "600:1:9",
																					"nodeType": "YulLiteral",
																					"src": "600:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "590:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "590:6:9"
																			},
																			"nativeSrc": "590:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "590:12:9"
																		},
																		"nativeSrc": "590:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "590:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "547:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "547:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "558:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "558:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "573:3:9",
																										"nodeType": "YulLiteral",
																										"src": "573:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "578:1:9",
																										"nodeType": "YulLiteral",
																										"src": "578:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "569:3:9",
																									"nodeType": "YulIdentifier",
																									"src": "569:3:9"
																								},
																								"nativeSrc": "569:11:9",
																								"nodeType": "YulFunctionCall",
																								"src": "569:11:9"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "582:1:9",
																								"nodeType": "YulLiteral",
																								"src": "582:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "565:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "565:3:9"
																						},
																						"nativeSrc": "565:19:9",
																						"nodeType": "YulFunctionCall",
																						"src": "565:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "554:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "554:3:9"
																				},
																				"nativeSrc": "554:31:9",
																				"nodeType": "YulFunctionCall",
																				"src": "554:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "544:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "544:2:9"
																		},
																		"nativeSrc": "544:42:9",
																		"nodeType": "YulFunctionCall",
																		"src": "544:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "537:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "537:6:9"
																},
																"nativeSrc": "537:50:9",
																"nodeType": "YulFunctionCall",
																"src": "537:50:9"
															},
															"nativeSrc": "534:70:9",
															"nodeType": "YulIf",
															"src": "534:70:9"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "437:173:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "465:6:9",
														"nodeType": "YulTypedName",
														"src": "465:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "476:5:9",
														"nodeType": "YulTypedName",
														"src": "476:5:9",
														"type": ""
													}
												],
												"src": "437:173:9"
											},
											{
												"body": {
													"nativeSrc": "702:213:9",
													"nodeType": "YulBlock",
													"src": "702:213:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "748:16:9",
																"nodeType": "YulBlock",
																"src": "748:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "757:1:9",
																					"nodeType": "YulLiteral",
																					"src": "757:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "760:1:9",
																					"nodeType": "YulLiteral",
																					"src": "760:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "750:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "750:6:9"
																			},
																			"nativeSrc": "750:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "750:12:9"
																		},
																		"nativeSrc": "750:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "750:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "723:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "723:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "732:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "732:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "719:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "719:3:9"
																		},
																		"nativeSrc": "719:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "719:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "744:2:9",
																		"nodeType": "YulLiteral",
																		"src": "744:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "715:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "715:3:9"
																},
																"nativeSrc": "715:32:9",
																"nodeType": "YulFunctionCall",
																"src": "715:32:9"
															},
															"nativeSrc": "712:52:9",
															"nodeType": "YulIf",
															"src": "712:52:9"
														},
														{
															"nativeSrc": "773:39:9",
															"nodeType": "YulAssignment",
															"src": "773:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "802:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "802:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "783:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "783:18:9"
																},
																"nativeSrc": "783:29:9",
																"nodeType": "YulFunctionCall",
																"src": "783:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "773:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:9"
																}
															]
														},
														{
															"nativeSrc": "821:14:9",
															"nodeType": "YulVariableDeclaration",
															"src": "821:14:9",
															"value": {
																"kind": "number",
																"nativeSrc": "834:1:9",
																"nodeType": "YulLiteral",
																"src": "834:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "825:5:9",
																	"nodeType": "YulTypedName",
																	"src": "825:5:9",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "844:41:9",
															"nodeType": "YulAssignment",
															"src": "844:41:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "870:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "870:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "881:2:9",
																				"nodeType": "YulLiteral",
																				"src": "881:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "866:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "866:3:9"
																		},
																		"nativeSrc": "866:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "866:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "853:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "853:12:9"
																},
																"nativeSrc": "853:32:9",
																"nodeType": "YulFunctionCall",
																"src": "853:32:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "844:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "844:5:9"
																}
															]
														},
														{
															"nativeSrc": "894:15:9",
															"nodeType": "YulAssignment",
															"src": "894:15:9",
															"value": {
																"name": "value",
																"nativeSrc": "904:5:9",
																"nodeType": "YulIdentifier",
																"src": "904:5:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "894:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "894:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "615:300:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "660:9:9",
														"nodeType": "YulTypedName",
														"src": "660:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "671:7:9",
														"nodeType": "YulTypedName",
														"src": "671:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "683:6:9",
														"nodeType": "YulTypedName",
														"src": "683:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "691:6:9",
														"nodeType": "YulTypedName",
														"src": "691:6:9",
														"type": ""
													}
												],
												"src": "615:300:9"
											},
											{
												"body": {
													"nativeSrc": "1015:92:9",
													"nodeType": "YulBlock",
													"src": "1015:92:9",
													"statements": [
														{
															"nativeSrc": "1025:26:9",
															"nodeType": "YulAssignment",
															"src": "1025:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1037:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1037:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1048:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1048:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1033:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1033:3:9"
																},
																"nativeSrc": "1033:18:9",
																"nodeType": "YulFunctionCall",
																"src": "1033:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1025:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "1025:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1067:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1067:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1092:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "1092:6:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1085:6:9",
																					"nodeType": "YulIdentifier",
																					"src": "1085:6:9"
																				},
																				"nativeSrc": "1085:14:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1085:14:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1078:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "1078:6:9"
																		},
																		"nativeSrc": "1078:22:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1078:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1060:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1060:6:9"
																},
																"nativeSrc": "1060:41:9",
																"nodeType": "YulFunctionCall",
																"src": "1060:41:9"
															},
															"nativeSrc": "1060:41:9",
															"nodeType": "YulExpressionStatement",
															"src": "1060:41:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "920:187:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "984:9:9",
														"nodeType": "YulTypedName",
														"src": "984:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "995:6:9",
														"nodeType": "YulTypedName",
														"src": "995:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1006:4:9",
														"nodeType": "YulTypedName",
														"src": "1006:4:9",
														"type": ""
													}
												],
												"src": "920:187:9"
											},
											{
												"body": {
													"nativeSrc": "1213:76:9",
													"nodeType": "YulBlock",
													"src": "1213:76:9",
													"statements": [
														{
															"nativeSrc": "1223:26:9",
															"nodeType": "YulAssignment",
															"src": "1223:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1235:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1235:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1246:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1246:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1231:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1231:3:9"
																},
																"nativeSrc": "1231:18:9",
																"nodeType": "YulFunctionCall",
																"src": "1231:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1223:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "1223:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1265:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1265:9:9"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1276:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1276:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1258:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1258:6:9"
																},
																"nativeSrc": "1258:25:9",
																"nodeType": "YulFunctionCall",
																"src": "1258:25:9"
															},
															"nativeSrc": "1258:25:9",
															"nodeType": "YulExpressionStatement",
															"src": "1258:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1112:177:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1182:9:9",
														"nodeType": "YulTypedName",
														"src": "1182:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1193:6:9",
														"nodeType": "YulTypedName",
														"src": "1193:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1204:4:9",
														"nodeType": "YulTypedName",
														"src": "1204:4:9",
														"type": ""
													}
												],
												"src": "1112:177:9"
											},
											{
												"body": {
													"nativeSrc": "1398:270:9",
													"nodeType": "YulBlock",
													"src": "1398:270:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "1444:16:9",
																"nodeType": "YulBlock",
																"src": "1444:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1453:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1453:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1456:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1456:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1446:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "1446:6:9"
																			},
																			"nativeSrc": "1446:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1446:12:9"
																		},
																		"nativeSrc": "1446:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1446:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1419:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "1419:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1428:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "1428:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1415:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1415:3:9"
																		},
																		"nativeSrc": "1415:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1415:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1440:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1440:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1411:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1411:3:9"
																},
																"nativeSrc": "1411:32:9",
																"nodeType": "YulFunctionCall",
																"src": "1411:32:9"
															},
															"nativeSrc": "1408:52:9",
															"nodeType": "YulIf",
															"src": "1408:52:9"
														},
														{
															"nativeSrc": "1469:39:9",
															"nodeType": "YulAssignment",
															"src": "1469:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1498:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1498:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1479:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "1479:18:9"
																},
																"nativeSrc": "1479:29:9",
																"nodeType": "YulFunctionCall",
																"src": "1479:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1469:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1469:6:9"
																}
															]
														},
														{
															"nativeSrc": "1517:48:9",
															"nodeType": "YulAssignment",
															"src": "1517:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1550:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "1550:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1561:2:9",
																				"nodeType": "YulLiteral",
																				"src": "1561:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1546:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1546:3:9"
																		},
																		"nativeSrc": "1546:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1546:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1527:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "1527:18:9"
																},
																"nativeSrc": "1527:38:9",
																"nodeType": "YulFunctionCall",
																"src": "1527:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1517:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1517:6:9"
																}
															]
														},
														{
															"nativeSrc": "1574:14:9",
															"nodeType": "YulVariableDeclaration",
															"src": "1574:14:9",
															"value": {
																"kind": "number",
																"nativeSrc": "1587:1:9",
																"nodeType": "YulLiteral",
																"src": "1587:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1578:5:9",
																	"nodeType": "YulTypedName",
																	"src": "1578:5:9",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1597:41:9",
															"nodeType": "YulAssignment",
															"src": "1597:41:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1623:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "1623:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1634:2:9",
																				"nodeType": "YulLiteral",
																				"src": "1634:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1619:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1619:3:9"
																		},
																		"nativeSrc": "1619:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1619:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1606:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "1606:12:9"
																},
																"nativeSrc": "1606:32:9",
																"nodeType": "YulFunctionCall",
																"src": "1606:32:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1597:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "1597:5:9"
																}
															]
														},
														{
															"nativeSrc": "1647:15:9",
															"nodeType": "YulAssignment",
															"src": "1647:15:9",
															"value": {
																"name": "value",
																"nativeSrc": "1657:5:9",
																"nodeType": "YulIdentifier",
																"src": "1657:5:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1647:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1647:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1294:374:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1348:9:9",
														"nodeType": "YulTypedName",
														"src": "1348:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1359:7:9",
														"nodeType": "YulTypedName",
														"src": "1359:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1371:6:9",
														"nodeType": "YulTypedName",
														"src": "1371:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1379:6:9",
														"nodeType": "YulTypedName",
														"src": "1379:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1387:6:9",
														"nodeType": "YulTypedName",
														"src": "1387:6:9",
														"type": ""
													}
												],
												"src": "1294:374:9"
											},
											{
												"body": {
													"nativeSrc": "1770:87:9",
													"nodeType": "YulBlock",
													"src": "1770:87:9",
													"statements": [
														{
															"nativeSrc": "1780:26:9",
															"nodeType": "YulAssignment",
															"src": "1780:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1792:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1792:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1803:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1803:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1788:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1788:3:9"
																},
																"nativeSrc": "1788:18:9",
																"nodeType": "YulFunctionCall",
																"src": "1788:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1780:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "1780:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1822:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "1822:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1837:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "1837:6:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1845:4:9",
																				"nodeType": "YulLiteral",
																				"src": "1845:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1833:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1833:3:9"
																		},
																		"nativeSrc": "1833:17:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1833:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1815:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1815:6:9"
																},
																"nativeSrc": "1815:36:9",
																"nodeType": "YulFunctionCall",
																"src": "1815:36:9"
															},
															"nativeSrc": "1815:36:9",
															"nodeType": "YulExpressionStatement",
															"src": "1815:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1673:184:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1739:9:9",
														"nodeType": "YulTypedName",
														"src": "1739:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1750:6:9",
														"nodeType": "YulTypedName",
														"src": "1750:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1761:4:9",
														"nodeType": "YulTypedName",
														"src": "1761:4:9",
														"type": ""
													}
												],
												"src": "1673:184:9"
											},
											{
												"body": {
													"nativeSrc": "1932:156:9",
													"nodeType": "YulBlock",
													"src": "1932:156:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "1978:16:9",
																"nodeType": "YulBlock",
																"src": "1978:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1987:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1987:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1990:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1990:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1980:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "1980:6:9"
																			},
																			"nativeSrc": "1980:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1980:12:9"
																		},
																		"nativeSrc": "1980:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1980:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1953:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "1953:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1962:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "1962:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1949:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1949:3:9"
																		},
																		"nativeSrc": "1949:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1949:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1974:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1974:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1945:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1945:3:9"
																},
																"nativeSrc": "1945:32:9",
																"nodeType": "YulFunctionCall",
																"src": "1945:32:9"
															},
															"nativeSrc": "1942:52:9",
															"nodeType": "YulIf",
															"src": "1942:52:9"
														},
														{
															"nativeSrc": "2003:14:9",
															"nodeType": "YulVariableDeclaration",
															"src": "2003:14:9",
															"value": {
																"kind": "number",
																"nativeSrc": "2016:1:9",
																"nodeType": "YulLiteral",
																"src": "2016:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2007:5:9",
																	"nodeType": "YulTypedName",
																	"src": "2007:5:9",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2026:32:9",
															"nodeType": "YulAssignment",
															"src": "2026:32:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2048:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "2048:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2035:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "2035:12:9"
																},
																"nativeSrc": "2035:23:9",
																"nodeType": "YulFunctionCall",
																"src": "2035:23:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2026:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "2026:5:9"
																}
															]
														},
														{
															"nativeSrc": "2067:15:9",
															"nodeType": "YulAssignment",
															"src": "2067:15:9",
															"value": {
																"name": "value",
																"nativeSrc": "2077:5:9",
																"nodeType": "YulIdentifier",
																"src": "2077:5:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2067:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2067:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "1862:226:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1898:9:9",
														"nodeType": "YulTypedName",
														"src": "1898:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1909:7:9",
														"nodeType": "YulTypedName",
														"src": "1909:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1921:6:9",
														"nodeType": "YulTypedName",
														"src": "1921:6:9",
														"type": ""
													}
												],
												"src": "1862:226:9"
											},
											{
												"body": {
													"nativeSrc": "2163:116:9",
													"nodeType": "YulBlock",
													"src": "2163:116:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "2209:16:9",
																"nodeType": "YulBlock",
																"src": "2209:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2218:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2218:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2221:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2221:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2211:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2211:6:9"
																			},
																			"nativeSrc": "2211:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2211:12:9"
																		},
																		"nativeSrc": "2211:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2211:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2184:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "2184:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2193:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "2193:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2180:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2180:3:9"
																		},
																		"nativeSrc": "2180:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2180:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2205:2:9",
																		"nodeType": "YulLiteral",
																		"src": "2205:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2176:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2176:3:9"
																},
																"nativeSrc": "2176:32:9",
																"nodeType": "YulFunctionCall",
																"src": "2176:32:9"
															},
															"nativeSrc": "2173:52:9",
															"nodeType": "YulIf",
															"src": "2173:52:9"
														},
														{
															"nativeSrc": "2234:39:9",
															"nodeType": "YulAssignment",
															"src": "2234:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2263:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "2263:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2244:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "2244:18:9"
																},
																"nativeSrc": "2244:29:9",
																"nodeType": "YulFunctionCall",
																"src": "2244:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2234:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2234:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "2093:186:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2129:9:9",
														"nodeType": "YulTypedName",
														"src": "2129:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2140:7:9",
														"nodeType": "YulTypedName",
														"src": "2140:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2152:6:9",
														"nodeType": "YulTypedName",
														"src": "2152:6:9",
														"type": ""
													}
												],
												"src": "2093:186:9"
											},
											{
												"body": {
													"nativeSrc": "2385:102:9",
													"nodeType": "YulBlock",
													"src": "2385:102:9",
													"statements": [
														{
															"nativeSrc": "2395:26:9",
															"nodeType": "YulAssignment",
															"src": "2395:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2407:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "2407:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2418:2:9",
																		"nodeType": "YulLiteral",
																		"src": "2418:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2403:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2403:3:9"
																},
																"nativeSrc": "2403:18:9",
																"nodeType": "YulFunctionCall",
																"src": "2403:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2395:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "2395:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2437:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "2437:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2452:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2452:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2468:3:9",
																								"nodeType": "YulLiteral",
																								"src": "2468:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2473:1:9",
																								"nodeType": "YulLiteral",
																								"src": "2473:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2464:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "2464:3:9"
																						},
																						"nativeSrc": "2464:11:9",
																						"nodeType": "YulFunctionCall",
																						"src": "2464:11:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2477:1:9",
																						"nodeType": "YulLiteral",
																						"src": "2477:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2460:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "2460:3:9"
																				},
																				"nativeSrc": "2460:19:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2460:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2448:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2448:3:9"
																		},
																		"nativeSrc": "2448:32:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2448:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2430:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2430:6:9"
																},
																"nativeSrc": "2430:51:9",
																"nodeType": "YulFunctionCall",
																"src": "2430:51:9"
															},
															"nativeSrc": "2430:51:9",
															"nodeType": "YulExpressionStatement",
															"src": "2430:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2284:203:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2354:9:9",
														"nodeType": "YulTypedName",
														"src": "2354:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2365:6:9",
														"nodeType": "YulTypedName",
														"src": "2365:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2376:4:9",
														"nodeType": "YulTypedName",
														"src": "2376:4:9",
														"type": ""
													}
												],
												"src": "2284:203:9"
											},
											{
												"body": {
													"nativeSrc": "2579:173:9",
													"nodeType": "YulBlock",
													"src": "2579:173:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "2625:16:9",
																"nodeType": "YulBlock",
																"src": "2625:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2634:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2634:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2637:1:9",
																					"nodeType": "YulLiteral",
																					"src": "2637:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2627:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2627:6:9"
																			},
																			"nativeSrc": "2627:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2627:12:9"
																		},
																		"nativeSrc": "2627:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2627:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2600:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "2600:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2609:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "2609:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2596:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2596:3:9"
																		},
																		"nativeSrc": "2596:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2596:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2621:2:9",
																		"nodeType": "YulLiteral",
																		"src": "2621:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2592:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2592:3:9"
																},
																"nativeSrc": "2592:32:9",
																"nodeType": "YulFunctionCall",
																"src": "2592:32:9"
															},
															"nativeSrc": "2589:52:9",
															"nodeType": "YulIf",
															"src": "2589:52:9"
														},
														{
															"nativeSrc": "2650:39:9",
															"nodeType": "YulAssignment",
															"src": "2650:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2679:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "2679:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2660:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "2660:18:9"
																},
																"nativeSrc": "2660:29:9",
																"nodeType": "YulFunctionCall",
																"src": "2660:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2650:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2650:6:9"
																}
															]
														},
														{
															"nativeSrc": "2698:48:9",
															"nodeType": "YulAssignment",
															"src": "2698:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2731:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "2731:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2742:2:9",
																				"nodeType": "YulLiteral",
																				"src": "2742:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2727:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2727:3:9"
																		},
																		"nativeSrc": "2727:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2727:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2708:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "2708:18:9"
																},
																"nativeSrc": "2708:38:9",
																"nodeType": "YulFunctionCall",
																"src": "2708:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "2698:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2698:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "2492:260:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2537:9:9",
														"nodeType": "YulTypedName",
														"src": "2537:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2548:7:9",
														"nodeType": "YulTypedName",
														"src": "2548:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2560:6:9",
														"nodeType": "YulTypedName",
														"src": "2560:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2568:6:9",
														"nodeType": "YulTypedName",
														"src": "2568:6:9",
														"type": ""
													}
												],
												"src": "2492:260:9"
											},
											{
												"body": {
													"nativeSrc": "2812:325:9",
													"nodeType": "YulBlock",
													"src": "2812:325:9",
													"statements": [
														{
															"nativeSrc": "2822:22:9",
															"nodeType": "YulAssignment",
															"src": "2822:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2836:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2836:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "2839:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "2839:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "2832:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2832:3:9"
																},
																"nativeSrc": "2832:12:9",
																"nodeType": "YulFunctionCall",
																"src": "2832:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "2822:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2822:6:9"
																}
															]
														},
														{
															"nativeSrc": "2853:38:9",
															"nodeType": "YulVariableDeclaration",
															"src": "2853:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "2883:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "2883:4:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2889:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2889:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2879:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2879:3:9"
																},
																"nativeSrc": "2879:12:9",
																"nodeType": "YulFunctionCall",
																"src": "2879:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "2857:18:9",
																	"nodeType": "YulTypedName",
																	"src": "2857:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2930:31:9",
																"nodeType": "YulBlock",
																"src": "2930:31:9",
																"statements": [
																	{
																		"nativeSrc": "2932:27:9",
																		"nodeType": "YulAssignment",
																		"src": "2932:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "2946:6:9",
																					"nodeType": "YulIdentifier",
																					"src": "2946:6:9"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2954:4:9",
																					"nodeType": "YulLiteral",
																					"src": "2954:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "2942:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "2942:3:9"
																			},
																			"nativeSrc": "2942:17:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2942:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "2932:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2932:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2910:18:9",
																		"nodeType": "YulIdentifier",
																		"src": "2910:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2903:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2903:6:9"
																},
																"nativeSrc": "2903:26:9",
																"nodeType": "YulFunctionCall",
																"src": "2903:26:9"
															},
															"nativeSrc": "2900:61:9",
															"nodeType": "YulIf",
															"src": "2900:61:9"
														},
														{
															"body": {
																"nativeSrc": "3020:111:9",
																"nodeType": "YulBlock",
																"src": "3020:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3041:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3041:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "3048:3:9",
																							"nodeType": "YulLiteral",
																							"src": "3048:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3053:10:9",
																							"nodeType": "YulLiteral",
																							"src": "3053:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "3044:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "3044:3:9"
																					},
																					"nativeSrc": "3044:20:9",
																					"nodeType": "YulFunctionCall",
																					"src": "3044:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3034:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "3034:6:9"
																			},
																			"nativeSrc": "3034:31:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3034:31:9"
																		},
																		"nativeSrc": "3034:31:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "3034:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3085:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3085:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3088:4:9",
																					"nodeType": "YulLiteral",
																					"src": "3088:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3078:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "3078:6:9"
																			},
																			"nativeSrc": "3078:15:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3078:15:9"
																		},
																		"nativeSrc": "3078:15:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "3078:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3113:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3113:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3116:4:9",
																					"nodeType": "YulLiteral",
																					"src": "3116:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3106:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "3106:6:9"
																			},
																			"nativeSrc": "3106:15:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3106:15:9"
																		},
																		"nativeSrc": "3106:15:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "3106:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2976:18:9",
																		"nodeType": "YulIdentifier",
																		"src": "2976:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2999:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2999:6:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3007:2:9",
																				"nodeType": "YulLiteral",
																				"src": "3007:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "2996:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "2996:2:9"
																		},
																		"nativeSrc": "2996:14:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2996:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "2973:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "2973:2:9"
																},
																"nativeSrc": "2973:38:9",
																"nodeType": "YulFunctionCall",
																"src": "2973:38:9"
															},
															"nativeSrc": "2970:161:9",
															"nodeType": "YulIf",
															"src": "2970:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "2757:380:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "2792:4:9",
														"nodeType": "YulTypedName",
														"src": "2792:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "2801:6:9",
														"nodeType": "YulTypedName",
														"src": "2801:6:9",
														"type": ""
													}
												],
												"src": "2757:380:9"
											},
											{
												"body": {
													"nativeSrc": "3174:95:9",
													"nodeType": "YulBlock",
													"src": "3174:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3191:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3191:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3198:3:9",
																				"nodeType": "YulLiteral",
																				"src": "3198:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3203:10:9",
																				"nodeType": "YulLiteral",
																				"src": "3203:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "3194:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "3194:3:9"
																		},
																		"nativeSrc": "3194:20:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3194:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3184:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3184:6:9"
																},
																"nativeSrc": "3184:31:9",
																"nodeType": "YulFunctionCall",
																"src": "3184:31:9"
															},
															"nativeSrc": "3184:31:9",
															"nodeType": "YulExpressionStatement",
															"src": "3184:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3231:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3231:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3234:4:9",
																		"nodeType": "YulLiteral",
																		"src": "3234:4:9",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3224:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3224:6:9"
																},
																"nativeSrc": "3224:15:9",
																"nodeType": "YulFunctionCall",
																"src": "3224:15:9"
															},
															"nativeSrc": "3224:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "3224:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3255:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3255:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3258:4:9",
																		"nodeType": "YulLiteral",
																		"src": "3258:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "3248:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3248:6:9"
																},
																"nativeSrc": "3248:15:9",
																"nodeType": "YulFunctionCall",
																"src": "3248:15:9"
															},
															"nativeSrc": "3248:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "3248:15:9"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "3142:127:9",
												"nodeType": "YulFunctionDefinition",
												"src": "3142:127:9"
											},
											{
												"body": {
													"nativeSrc": "3343:306:9",
													"nodeType": "YulBlock",
													"src": "3343:306:9",
													"statements": [
														{
															"nativeSrc": "3353:10:9",
															"nodeType": "YulAssignment",
															"src": "3353:10:9",
															"value": {
																"kind": "number",
																"nativeSrc": "3362:1:9",
																"nodeType": "YulLiteral",
																"src": "3362:1:9",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3353:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "3353:5:9"
																}
															]
														},
														{
															"nativeSrc": "3372:13:9",
															"nodeType": "YulAssignment",
															"src": "3372:13:9",
															"value": {
																"name": "_base",
																"nativeSrc": "3380:5:9",
																"nodeType": "YulIdentifier",
																"src": "3380:5:9"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "3372:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "3372:4:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3430:213:9",
																"nodeType": "YulBlock",
																"src": "3430:213:9",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "3472:22:9",
																			"nodeType": "YulBlock",
																			"src": "3472:22:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "3474:16:9",
																							"nodeType": "YulIdentifier",
																							"src": "3474:16:9"
																						},
																						"nativeSrc": "3474:18:9",
																						"nodeType": "YulFunctionCall",
																						"src": "3474:18:9"
																					},
																					"nativeSrc": "3474:18:9",
																					"nodeType": "YulExpressionStatement",
																					"src": "3474:18:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3450:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "3450:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "3460:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "3460:3:9"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "3465:4:9",
																							"nodeType": "YulIdentifier",
																							"src": "3465:4:9"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "3456:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "3456:3:9"
																					},
																					"nativeSrc": "3456:14:9",
																					"nodeType": "YulFunctionCall",
																					"src": "3456:14:9"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "3447:2:9",
																				"nodeType": "YulIdentifier",
																				"src": "3447:2:9"
																			},
																			"nativeSrc": "3447:24:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3447:24:9"
																		},
																		"nativeSrc": "3444:50:9",
																		"nodeType": "YulIf",
																		"src": "3444:50:9"
																	},
																	{
																		"body": {
																			"nativeSrc": "3527:29:9",
																			"nodeType": "YulBlock",
																			"src": "3527:29:9",
																			"statements": [
																				{
																					"nativeSrc": "3529:25:9",
																					"nodeType": "YulAssignment",
																					"src": "3529:25:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "3542:5:9",
																								"nodeType": "YulIdentifier",
																								"src": "3542:5:9"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "3549:4:9",
																								"nodeType": "YulIdentifier",
																								"src": "3549:4:9"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "3538:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "3538:3:9"
																						},
																						"nativeSrc": "3538:16:9",
																						"nodeType": "YulFunctionCall",
																						"src": "3538:16:9"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "3529:5:9",
																							"nodeType": "YulIdentifier",
																							"src": "3529:5:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "3514:8:9",
																					"nodeType": "YulIdentifier",
																					"src": "3514:8:9"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3524:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3524:1:9",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "3510:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "3510:3:9"
																			},
																			"nativeSrc": "3510:16:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3510:16:9"
																		},
																		"nativeSrc": "3507:49:9",
																		"nodeType": "YulIf",
																		"src": "3507:49:9"
																	},
																	{
																		"nativeSrc": "3569:23:9",
																		"nodeType": "YulAssignment",
																		"src": "3569:23:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3581:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "3581:4:9"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "3587:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "3587:4:9"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "3577:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "3577:3:9"
																			},
																			"nativeSrc": "3577:15:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3577:15:9"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "3569:4:9",
																				"nodeType": "YulIdentifier",
																				"src": "3569:4:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3605:28:9",
																		"nodeType": "YulAssignment",
																		"src": "3605:28:9",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3621:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3621:1:9",
																					"type": "",
																					"value": "1"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "3624:8:9",
																					"nodeType": "YulIdentifier",
																					"src": "3624:8:9"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "3617:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "3617:3:9"
																			},
																			"nativeSrc": "3617:16:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3617:16:9"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "3605:8:9",
																				"nodeType": "YulIdentifier",
																				"src": "3605:8:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3405:8:9",
																		"nodeType": "YulIdentifier",
																		"src": "3405:8:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3415:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3415:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3402:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "3402:2:9"
																},
																"nativeSrc": "3402:15:9",
																"nodeType": "YulFunctionCall",
																"src": "3402:15:9"
															},
															"nativeSrc": "3394:249:9",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3418:3:9",
																"nodeType": "YulBlock",
																"src": "3418:3:9",
																"statements": []
															},
															"pre": {
																"nativeSrc": "3398:3:9",
																"nodeType": "YulBlock",
																"src": "3398:3:9",
																"statements": []
															},
															"src": "3394:249:9"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "3274:375:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "3302:5:9",
														"nodeType": "YulTypedName",
														"src": "3302:5:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3309:8:9",
														"nodeType": "YulTypedName",
														"src": "3309:8:9",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "3319:3:9",
														"nodeType": "YulTypedName",
														"src": "3319:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3327:5:9",
														"nodeType": "YulTypedName",
														"src": "3327:5:9",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "3334:4:9",
														"nodeType": "YulTypedName",
														"src": "3334:4:9",
														"type": ""
													}
												],
												"src": "3274:375:9"
											},
											{
												"body": {
													"nativeSrc": "3713:843:9",
													"nodeType": "YulBlock",
													"src": "3713:843:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "3751:52:9",
																"nodeType": "YulBlock",
																"src": "3751:52:9",
																"statements": [
																	{
																		"nativeSrc": "3765:10:9",
																		"nodeType": "YulAssignment",
																		"src": "3765:10:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3774:1:9",
																			"nodeType": "YulLiteral",
																			"src": "3774:1:9",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3765:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "3765:5:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3788:5:9",
																		"nodeType": "YulLeave",
																		"src": "3788:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3733:8:9",
																		"nodeType": "YulIdentifier",
																		"src": "3733:8:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3726:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3726:6:9"
																},
																"nativeSrc": "3726:16:9",
																"nodeType": "YulFunctionCall",
																"src": "3726:16:9"
															},
															"nativeSrc": "3723:80:9",
															"nodeType": "YulIf",
															"src": "3723:80:9"
														},
														{
															"body": {
																"nativeSrc": "3836:52:9",
																"nodeType": "YulBlock",
																"src": "3836:52:9",
																"statements": [
																	{
																		"nativeSrc": "3850:10:9",
																		"nodeType": "YulAssignment",
																		"src": "3850:10:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3859:1:9",
																			"nodeType": "YulLiteral",
																			"src": "3859:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3850:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "3850:5:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3873:5:9",
																		"nodeType": "YulLeave",
																		"src": "3873:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3822:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "3822:4:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3815:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3815:6:9"
																},
																"nativeSrc": "3815:12:9",
																"nodeType": "YulFunctionCall",
																"src": "3815:12:9"
															},
															"nativeSrc": "3812:76:9",
															"nodeType": "YulIf",
															"src": "3812:76:9"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "3924:52:9",
																		"nodeType": "YulBlock",
																		"src": "3924:52:9",
																		"statements": [
																			{
																				"nativeSrc": "3938:10:9",
																				"nodeType": "YulAssignment",
																				"src": "3938:10:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3947:1:9",
																					"nodeType": "YulLiteral",
																					"src": "3947:1:9",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "3938:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "3938:5:9"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3961:5:9",
																				"nodeType": "YulLeave",
																				"src": "3961:5:9"
																			}
																		]
																	},
																	"nativeSrc": "3917:59:9",
																	"nodeType": "YulCase",
																	"src": "3917:59:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3922:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3922:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "3992:167:9",
																		"nodeType": "YulBlock",
																		"src": "3992:167:9",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "4027:22:9",
																					"nodeType": "YulBlock",
																					"src": "4027:22:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "4029:16:9",
																									"nodeType": "YulIdentifier",
																									"src": "4029:16:9"
																								},
																								"nativeSrc": "4029:18:9",
																								"nodeType": "YulFunctionCall",
																								"src": "4029:18:9"
																							},
																							"nativeSrc": "4029:18:9",
																							"nodeType": "YulExpressionStatement",
																							"src": "4029:18:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "4012:8:9",
																							"nodeType": "YulIdentifier",
																							"src": "4012:8:9"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4022:3:9",
																							"nodeType": "YulLiteral",
																							"src": "4022:3:9",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "4009:2:9",
																						"nodeType": "YulIdentifier",
																						"src": "4009:2:9"
																					},
																					"nativeSrc": "4009:17:9",
																					"nodeType": "YulFunctionCall",
																					"src": "4009:17:9"
																				},
																				"nativeSrc": "4006:43:9",
																				"nodeType": "YulIf",
																				"src": "4006:43:9"
																			},
																			{
																				"nativeSrc": "4062:25:9",
																				"nodeType": "YulAssignment",
																				"src": "4062:25:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "4075:8:9",
																							"nodeType": "YulIdentifier",
																							"src": "4075:8:9"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4085:1:9",
																							"nodeType": "YulLiteral",
																							"src": "4085:1:9",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4071:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "4071:3:9"
																					},
																					"nativeSrc": "4071:16:9",
																					"nodeType": "YulFunctionCall",
																					"src": "4071:16:9"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "4062:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "4062:5:9"
																					}
																				]
																			},
																			{
																				"nativeSrc": "4100:11:9",
																				"nodeType": "YulVariableDeclaration",
																				"src": "4100:11:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "4110:1:9",
																					"nodeType": "YulLiteral",
																					"src": "4110:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "_1",
																						"nativeSrc": "4104:2:9",
																						"nodeType": "YulTypedName",
																						"src": "4104:2:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "4124:7:9",
																				"nodeType": "YulAssignment",
																				"src": "4124:7:9",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "4130:1:9",
																					"nodeType": "YulLiteral",
																					"src": "4130:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variableNames": [
																					{
																						"name": "_1",
																						"nativeSrc": "4124:2:9",
																						"nodeType": "YulIdentifier",
																						"src": "4124:2:9"
																					}
																				]
																			},
																			{
																				"nativeSrc": "4144:5:9",
																				"nodeType": "YulLeave",
																				"src": "4144:5:9"
																			}
																		]
																	},
																	"nativeSrc": "3985:174:9",
																	"nodeType": "YulCase",
																	"src": "3985:174:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3990:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3990:1:9",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "3904:4:9",
																"nodeType": "YulIdentifier",
																"src": "3904:4:9"
															},
															"nativeSrc": "3897:262:9",
															"nodeType": "YulSwitch",
															"src": "3897:262:9"
														},
														{
															"body": {
																"nativeSrc": "4257:114:9",
																"nodeType": "YulBlock",
																"src": "4257:114:9",
																"statements": [
																	{
																		"nativeSrc": "4271:28:9",
																		"nodeType": "YulAssignment",
																		"src": "4271:28:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "4284:4:9",
																					"nodeType": "YulIdentifier",
																					"src": "4284:4:9"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "4290:8:9",
																					"nodeType": "YulIdentifier",
																					"src": "4290:8:9"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "4280:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "4280:3:9"
																			},
																			"nativeSrc": "4280:19:9",
																			"nodeType": "YulFunctionCall",
																			"src": "4280:19:9"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "4271:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "4271:5:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4312:11:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4312:11:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4322:1:9",
																			"nodeType": "YulLiteral",
																			"src": "4322:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nativeSrc": "4316:2:9",
																				"nodeType": "YulTypedName",
																				"src": "4316:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4336:7:9",
																		"nodeType": "YulAssignment",
																		"src": "4336:7:9",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4342:1:9",
																			"nodeType": "YulLiteral",
																			"src": "4342:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "_2",
																				"nativeSrc": "4336:2:9",
																				"nodeType": "YulIdentifier",
																				"src": "4336:2:9"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4356:5:9",
																		"nodeType": "YulLeave",
																		"src": "4356:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "4181:4:9",
																						"nodeType": "YulIdentifier",
																						"src": "4181:4:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4187:2:9",
																						"nodeType": "YulLiteral",
																						"src": "4187:2:9",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4178:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "4178:2:9"
																				},
																				"nativeSrc": "4178:12:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4178:12:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "4195:8:9",
																						"nodeType": "YulIdentifier",
																						"src": "4195:8:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4205:2:9",
																						"nodeType": "YulLiteral",
																						"src": "4205:2:9",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4192:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "4192:2:9"
																				},
																				"nativeSrc": "4192:16:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4192:16:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4174:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "4174:3:9"
																		},
																		"nativeSrc": "4174:35:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4174:35:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "4218:4:9",
																						"nodeType": "YulIdentifier",
																						"src": "4218:4:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4224:3:9",
																						"nodeType": "YulLiteral",
																						"src": "4224:3:9",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4215:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "4215:2:9"
																				},
																				"nativeSrc": "4215:13:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4215:13:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "4233:8:9",
																						"nodeType": "YulIdentifier",
																						"src": "4233:8:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4243:2:9",
																						"nodeType": "YulLiteral",
																						"src": "4243:2:9",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4230:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "4230:2:9"
																				},
																				"nativeSrc": "4230:16:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4230:16:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4211:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "4211:3:9"
																		},
																		"nativeSrc": "4211:36:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4211:36:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4171:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "4171:2:9"
																},
																"nativeSrc": "4171:77:9",
																"nodeType": "YulFunctionCall",
																"src": "4171:77:9"
															},
															"nativeSrc": "4168:203:9",
															"nodeType": "YulIf",
															"src": "4168:203:9"
														},
														{
															"nativeSrc": "4380:65:9",
															"nodeType": "YulVariableDeclaration",
															"src": "4380:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4422:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "4422:4:9"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "4428:8:9",
																		"nodeType": "YulIdentifier",
																		"src": "4428:8:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4442:1:9",
																				"nodeType": "YulLiteral",
																				"src": "4442:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "4438:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "4438:3:9"
																		},
																		"nativeSrc": "4438:6:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4438:6:9"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "4403:18:9",
																	"nodeType": "YulIdentifier",
																	"src": "4403:18:9"
																},
																"nativeSrc": "4403:42:9",
																"nodeType": "YulFunctionCall",
																"src": "4403:42:9"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "4384:7:9",
																	"nodeType": "YulTypedName",
																	"src": "4384:7:9",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "4393:6:9",
																	"nodeType": "YulTypedName",
																	"src": "4393:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4490:22:9",
																"nodeType": "YulBlock",
																"src": "4490:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4492:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "4492:16:9"
																			},
																			"nativeSrc": "4492:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "4492:18:9"
																		},
																		"nativeSrc": "4492:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "4492:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4460:7:9",
																		"nodeType": "YulIdentifier",
																		"src": "4460:7:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4477:1:9",
																						"nodeType": "YulLiteral",
																						"src": "4477:1:9",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4473:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "4473:3:9"
																				},
																				"nativeSrc": "4473:6:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4473:6:9"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "4481:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "4481:6:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "4469:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "4469:3:9"
																		},
																		"nativeSrc": "4469:19:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4469:19:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4457:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "4457:2:9"
																},
																"nativeSrc": "4457:32:9",
																"nodeType": "YulFunctionCall",
																"src": "4457:32:9"
															},
															"nativeSrc": "4454:58:9",
															"nodeType": "YulIf",
															"src": "4454:58:9"
														},
														{
															"nativeSrc": "4521:29:9",
															"nodeType": "YulAssignment",
															"src": "4521:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4534:7:9",
																		"nodeType": "YulIdentifier",
																		"src": "4534:7:9"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "4543:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "4543:6:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4530:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4530:3:9"
																},
																"nativeSrc": "4530:20:9",
																"nodeType": "YulFunctionCall",
																"src": "4530:20:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4521:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "4521:5:9"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "3654:902:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "3684:4:9",
														"nodeType": "YulTypedName",
														"src": "3684:4:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3690:8:9",
														"nodeType": "YulTypedName",
														"src": "3690:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3703:5:9",
														"nodeType": "YulTypedName",
														"src": "3703:5:9",
														"type": ""
													}
												],
												"src": "3654:902:9"
											},
											{
												"body": {
													"nativeSrc": "4629:72:9",
													"nodeType": "YulBlock",
													"src": "4629:72:9",
													"statements": [
														{
															"nativeSrc": "4639:56:9",
															"nodeType": "YulAssignment",
															"src": "4639:56:9",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4669:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "4669:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nativeSrc": "4679:8:9",
																				"nodeType": "YulIdentifier",
																				"src": "4679:8:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4689:4:9",
																				"nodeType": "YulLiteral",
																				"src": "4689:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4675:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "4675:3:9"
																		},
																		"nativeSrc": "4675:19:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4675:19:9"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "4648:20:9",
																	"nodeType": "YulIdentifier",
																	"src": "4648:20:9"
																},
																"nativeSrc": "4648:47:9",
																"nodeType": "YulFunctionCall",
																"src": "4648:47:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4639:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "4639:5:9"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "4561:140:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "4600:4:9",
														"nodeType": "YulTypedName",
														"src": "4600:4:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "4606:8:9",
														"nodeType": "YulTypedName",
														"src": "4606:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "4619:5:9",
														"nodeType": "YulTypedName",
														"src": "4619:5:9",
														"type": ""
													}
												],
												"src": "4561:140:9"
											},
											{
												"body": {
													"nativeSrc": "4758:116:9",
													"nodeType": "YulBlock",
													"src": "4758:116:9",
													"statements": [
														{
															"nativeSrc": "4768:20:9",
															"nodeType": "YulAssignment",
															"src": "4768:20:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4783:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "4783:1:9"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4786:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "4786:1:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4779:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4779:3:9"
																},
																"nativeSrc": "4779:9:9",
																"nodeType": "YulFunctionCall",
																"src": "4779:9:9"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "4768:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "4768:7:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4846:22:9",
																"nodeType": "YulBlock",
																"src": "4846:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4848:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "4848:16:9"
																			},
																			"nativeSrc": "4848:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "4848:18:9"
																		},
																		"nativeSrc": "4848:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "4848:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "4817:1:9",
																						"nodeType": "YulIdentifier",
																						"src": "4817:1:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "4810:6:9",
																					"nodeType": "YulIdentifier",
																					"src": "4810:6:9"
																				},
																				"nativeSrc": "4810:9:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4810:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "4824:1:9",
																						"nodeType": "YulIdentifier",
																						"src": "4824:1:9"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "4831:7:9",
																								"nodeType": "YulIdentifier",
																								"src": "4831:7:9"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "4840:1:9",
																								"nodeType": "YulIdentifier",
																								"src": "4840:1:9"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "4827:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "4827:3:9"
																						},
																						"nativeSrc": "4827:15:9",
																						"nodeType": "YulFunctionCall",
																						"src": "4827:15:9"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "4821:2:9",
																					"nodeType": "YulIdentifier",
																					"src": "4821:2:9"
																				},
																				"nativeSrc": "4821:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4821:22:9"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4807:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "4807:2:9"
																		},
																		"nativeSrc": "4807:37:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4807:37:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4800:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "4800:6:9"
																},
																"nativeSrc": "4800:45:9",
																"nodeType": "YulFunctionCall",
																"src": "4800:45:9"
															},
															"nativeSrc": "4797:71:9",
															"nodeType": "YulIf",
															"src": "4797:71:9"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "4706:168:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4737:1:9",
														"nodeType": "YulTypedName",
														"src": "4737:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4740:1:9",
														"nodeType": "YulTypedName",
														"src": "4740:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "4746:7:9",
														"nodeType": "YulTypedName",
														"src": "4746:7:9",
														"type": ""
													}
												],
												"src": "4706:168:9"
											},
											{
												"body": {
													"nativeSrc": "4927:77:9",
													"nodeType": "YulBlock",
													"src": "4927:77:9",
													"statements": [
														{
															"nativeSrc": "4937:16:9",
															"nodeType": "YulAssignment",
															"src": "4937:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4948:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "4948:1:9"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4951:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "4951:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4944:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4944:3:9"
																},
																"nativeSrc": "4944:9:9",
																"nodeType": "YulFunctionCall",
																"src": "4944:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "4937:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4937:3:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4976:22:9",
																"nodeType": "YulBlock",
																"src": "4976:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4978:16:9",
																				"nodeType": "YulIdentifier",
																				"src": "4978:16:9"
																			},
																			"nativeSrc": "4978:18:9",
																			"nodeType": "YulFunctionCall",
																			"src": "4978:18:9"
																		},
																		"nativeSrc": "4978:18:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "4978:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4968:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "4968:1:9"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "4971:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "4971:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4965:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "4965:2:9"
																},
																"nativeSrc": "4965:10:9",
																"nodeType": "YulFunctionCall",
																"src": "4965:10:9"
															},
															"nativeSrc": "4962:36:9",
															"nodeType": "YulIf",
															"src": "4962:36:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "4879:125:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4910:1:9",
														"nodeType": "YulTypedName",
														"src": "4910:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4913:1:9",
														"nodeType": "YulTypedName",
														"src": "4913:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "4919:3:9",
														"nodeType": "YulTypedName",
														"src": "4919:3:9",
														"type": ""
													}
												],
												"src": "4879:125:9"
											},
											{
												"body": {
													"nativeSrc": "5166:188:9",
													"nodeType": "YulBlock",
													"src": "5166:188:9",
													"statements": [
														{
															"nativeSrc": "5176:26:9",
															"nodeType": "YulAssignment",
															"src": "5176:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5188:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5188:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5199:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5199:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5184:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5184:3:9"
																},
																"nativeSrc": "5184:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5184:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5176:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5176:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5218:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5218:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5233:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "5233:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5249:3:9",
																								"nodeType": "YulLiteral",
																								"src": "5249:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5254:1:9",
																								"nodeType": "YulLiteral",
																								"src": "5254:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5245:3:9",
																							"nodeType": "YulIdentifier",
																							"src": "5245:3:9"
																						},
																						"nativeSrc": "5245:11:9",
																						"nodeType": "YulFunctionCall",
																						"src": "5245:11:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5258:1:9",
																						"nodeType": "YulLiteral",
																						"src": "5258:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5241:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "5241:3:9"
																				},
																				"nativeSrc": "5241:19:9",
																				"nodeType": "YulFunctionCall",
																				"src": "5241:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5229:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5229:3:9"
																		},
																		"nativeSrc": "5229:32:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5229:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5211:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5211:6:9"
																},
																"nativeSrc": "5211:51:9",
																"nodeType": "YulFunctionCall",
																"src": "5211:51:9"
															},
															"nativeSrc": "5211:51:9",
															"nodeType": "YulExpressionStatement",
															"src": "5211:51:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5282:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5282:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5293:2:9",
																				"nodeType": "YulLiteral",
																				"src": "5293:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5278:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5278:3:9"
																		},
																		"nativeSrc": "5278:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5278:18:9"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "5298:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5298:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5271:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5271:6:9"
																},
																"nativeSrc": "5271:34:9",
																"nodeType": "YulFunctionCall",
																"src": "5271:34:9"
															},
															"nativeSrc": "5271:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "5271:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5325:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5325:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5336:2:9",
																				"nodeType": "YulLiteral",
																				"src": "5336:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5321:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5321:3:9"
																		},
																		"nativeSrc": "5321:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5321:18:9"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "5341:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5341:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5314:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5314:6:9"
																},
																"nativeSrc": "5314:34:9",
																"nodeType": "YulFunctionCall",
																"src": "5314:34:9"
															},
															"nativeSrc": "5314:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "5314:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5009:345:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5119:9:9",
														"nodeType": "YulTypedName",
														"src": "5119:9:9",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5130:6:9",
														"nodeType": "YulTypedName",
														"src": "5130:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5138:6:9",
														"nodeType": "YulTypedName",
														"src": "5138:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5146:6:9",
														"nodeType": "YulTypedName",
														"src": "5146:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5157:4:9",
														"nodeType": "YulTypedName",
														"src": "5157:4:9",
														"type": ""
													}
												],
												"src": "5009:345:9"
											},
											{
												"body": {
													"nativeSrc": "5488:119:9",
													"nodeType": "YulBlock",
													"src": "5488:119:9",
													"statements": [
														{
															"nativeSrc": "5498:26:9",
															"nodeType": "YulAssignment",
															"src": "5498:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5510:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5510:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5521:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5521:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5506:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5506:3:9"
																},
																"nativeSrc": "5506:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5506:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5498:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5498:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5540:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5540:9:9"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "5551:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5551:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5533:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5533:6:9"
																},
																"nativeSrc": "5533:25:9",
																"nodeType": "YulFunctionCall",
																"src": "5533:25:9"
															},
															"nativeSrc": "5533:25:9",
															"nodeType": "YulExpressionStatement",
															"src": "5533:25:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5578:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5578:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5589:2:9",
																				"nodeType": "YulLiteral",
																				"src": "5589:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5574:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5574:3:9"
																		},
																		"nativeSrc": "5574:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5574:18:9"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "5594:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5594:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5567:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5567:6:9"
																},
																"nativeSrc": "5567:34:9",
																"nodeType": "YulFunctionCall",
																"src": "5567:34:9"
															},
															"nativeSrc": "5567:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "5567:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5359:248:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5449:9:9",
														"nodeType": "YulTypedName",
														"src": "5449:9:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5460:6:9",
														"nodeType": "YulTypedName",
														"src": "5460:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5468:6:9",
														"nodeType": "YulTypedName",
														"src": "5468:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5479:4:9",
														"nodeType": "YulTypedName",
														"src": "5479:4:9",
														"type": ""
													}
												],
												"src": "5359:248:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent, max) -> power, base\n    {\n        power := 1\n        base := _base\n        for { } gt(exponent, 1) { }\n        {\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            let _1 := 0\n            _1 := 0\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            let _2 := 0\n            _2 := 0\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent, not(0))\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"932": [
									{
										"length": 32,
										"start": 374
									},
									{
										"length": 32,
										"start": 860
									},
									{
										"length": 32,
										"start": 1847
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b50600436106100fb575f3560e01c806370a082311161009357806395d89b411161006357806395d89b4114610220578063a9059cbb14610228578063dd62ed3e1461023b578063f2fde38b14610273575f5ffd5b806370a08231146101c2578063715018a6146101ea57806379cc6790146101f25780638da5cb5b14610205575f5ffd5b8063313ce567116100ce578063313ce56714610165578063355274ea1461017457806340c10f191461019a57806342966c68146101af575f5ffd5b806306fdde03146100ff578063095ea7b31461011d57806318160ddd1461014057806323b872dd14610152575b5f5ffd5b610107610286565b60405161011491906108af565b60405180910390f35b61013061012b3660046108ff565b610316565b6040519015158152602001610114565b6002545b604051908152602001610114565b610130610160366004610927565b61032f565b60405160128152602001610114565b7f0000000000000000000000000000000000000000000000000000000000000000610144565b6101ad6101a83660046108ff565b610352565b005b6101ad6101bd366004610961565b6103e0565b6101446101d0366004610978565b6001600160a01b03165f9081526020819052604090205490565b6101ad6103ed565b6101ad6102003660046108ff565b610400565b6005546040516001600160a01b039091168152602001610114565b610107610415565b6101306102363660046108ff565b610424565b610144610249366004610998565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6101ad610281366004610978565b610431565b606060038054610295906109c9565b80601f01602080910402602001604051908101604052809291908181526020018280546102c1906109c9565b801561030c5780601f106102e35761010080835404028352916020019161030c565b820191905f5260205f20905b8154815290600101906020018083116102ef57829003601f168201915b5050505050905090565b5f33610323818585610470565b60019150505b92915050565b5f3361033c858285610482565b6103478585856104fe565b506001949350505050565b61035a61055b565b7f00000000000000000000000000000000000000000000000000000000000000006103876012600a610af8565b6103919083610b06565b60025461039e9190610b1d565b11156103bd57604051630bf3aa0360e41b815260040160405180910390fd5b6103dc826103cd6012600a610af8565b6103d79084610b06565b610588565b5050565b6103ea33826105bc565b50565b6103f561055b565b6103fe5f6105f0565b565b61040b823383610482565b6103dc82826105bc565b606060048054610295906109c9565b5f336103238185856104fe565b61043961055b565b6001600160a01b03811661046757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6103ea816105f0565b61047d8383836001610641565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156104f857818110156104ea57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161045e565b6104f884848484035f610641565b50505050565b6001600160a01b03831661052757604051634b637e8f60e11b81525f600482015260240161045e565b6001600160a01b0382166105505760405163ec442f0560e01b81525f600482015260240161045e565b61047d838383610713565b6005546001600160a01b031633146103fe5760405163118cdaa760e01b815233600482015260240161045e565b6001600160a01b0382166105b15760405163ec442f0560e01b81525f600482015260240161045e565b6103dc5f8383610713565b6001600160a01b0382166105e557604051634b637e8f60e11b81525f600482015260240161045e565b6103dc825f83610713565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b03841661066a5760405163e602df0560e01b81525f600482015260240161045e565b6001600160a01b03831661069357604051634a1406b160e11b81525f600482015260240161045e565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156104f857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161070591815260200190565b60405180910390a350505050565b61047d838383610724838383610789565b6001600160a01b03831661047d576002547f000000000000000000000000000000000000000000000000000000000000000090818111156107825760405163279e7e1560e21b8152600481018290526024810183905260440161045e565b5050505050565b6001600160a01b0383166107b3578060025f8282546107a89190610b1d565b909155506108239050565b6001600160a01b0383165f90815260208190526040902054818110156108055760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161045e565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661083f5760028054829003905561085d565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108a291815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146108fa575f5ffd5b919050565b5f5f60408385031215610910575f5ffd5b610919836108e4565b946020939093013593505050565b5f5f5f60608486031215610939575f5ffd5b610942846108e4565b9250610950602085016108e4565b929592945050506040919091013590565b5f60208284031215610971575f5ffd5b5035919050565b5f60208284031215610988575f5ffd5b610991826108e4565b9392505050565b5f5f604083850312156109a9575f5ffd5b6109b2836108e4565b91506109c0602084016108e4565b90509250929050565b600181811c908216806109dd57607f821691505b6020821081036109fb57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b6001815b6001841115610a5057808504811115610a3457610a34610a01565b6001841615610a4257908102905b60019390931c928002610a19565b935093915050565b5f82610a6657506001610329565b81610a7257505f610329565b8160018114610a885760028114610a9257610aae565b6001915050610329565b60ff841115610aa357610aa3610a01565b50506001821b610329565b5060208310610133831016604e8410600b8410161715610ad1575081810a610329565b610add5f198484610a15565b805f1904821115610af057610af0610a01565b029392505050565b5f61099160ff841683610a58565b808202811582820484141761032957610329610a01565b8082018082111561032957610329610a0156fea264697066735822122026b89f27dc5c3be5b406c514b679a2db27e6f0d84171f8e671d49db8480acb2c64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFB JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x273 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x205 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1AF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x152 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x107 PUSH2 0x286 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x114 SWAP2 SWAP1 PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x130 PUSH2 0x12B CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x316 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH2 0x130 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x927 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x144 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AD PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x961 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x1D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x3ED JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x415 JUMP JUMPDEST PUSH2 0x130 PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x998 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x431 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x295 SWAP1 PUSH2 0x9C9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2C1 SWAP1 PUSH2 0x9C9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x30C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x30C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2EF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x323 DUP2 DUP6 DUP6 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x33C DUP6 DUP3 DUP6 PUSH2 0x482 JUMP JUMPDEST PUSH2 0x347 DUP6 DUP6 DUP6 PUSH2 0x4FE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x35A PUSH2 0x55B JUMP JUMPDEST PUSH32 0x0 PUSH2 0x387 PUSH1 0x12 PUSH1 0xA PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0x391 SWAP1 DUP4 PUSH2 0xB06 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x39E SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST GT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF3AA03 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3DC DUP3 PUSH2 0x3CD PUSH1 0x12 PUSH1 0xA PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0x3D7 SWAP1 DUP5 PUSH2 0xB06 JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3EA CALLER DUP3 PUSH2 0x5BC JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3F5 PUSH2 0x55B JUMP JUMPDEST PUSH2 0x3FE PUSH0 PUSH2 0x5F0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x40B DUP3 CALLER DUP4 PUSH2 0x482 JUMP JUMPDEST PUSH2 0x3DC DUP3 DUP3 PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x295 SWAP1 PUSH2 0x9C9 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x323 DUP2 DUP6 DUP6 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x439 PUSH2 0x55B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x467 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3EA DUP2 PUSH2 0x5F0 JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x641 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 LT ISZERO PUSH2 0x4F8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x4F8 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x641 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x527 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x550 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x3DC PUSH0 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH2 0x3DC DUP3 PUSH0 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x66A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x693 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4F8 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x705 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH2 0x724 DUP4 DUP4 DUP4 PUSH2 0x789 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x47D JUMPI PUSH1 0x2 SLOAD PUSH32 0x0 SWAP1 DUP2 DUP2 GT ISZERO PUSH2 0x782 JUMPI PUSH1 0x40 MLOAD PUSH4 0x279E7E15 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x45E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7B3 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x823 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x805 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x83F JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x85D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x8A2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FA JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x910 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x919 DUP4 PUSH2 0x8E4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x939 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x942 DUP5 PUSH2 0x8E4 JUMP JUMPDEST SWAP3 POP PUSH2 0x950 PUSH1 0x20 DUP6 ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x971 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x988 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x991 DUP3 PUSH2 0x8E4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9B2 DUP4 PUSH2 0x8E4 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C0 PUSH1 0x20 DUP5 ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x9DD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9FB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0xA50 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0xA34 JUMPI PUSH2 0xA34 PUSH2 0xA01 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0xA42 JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0xA19 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0xA66 JUMPI POP PUSH1 0x1 PUSH2 0x329 JUMP JUMPDEST DUP2 PUSH2 0xA72 JUMPI POP PUSH0 PUSH2 0x329 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xA88 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xA92 JUMPI PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x329 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xAA3 JUMPI PUSH2 0xAA3 PUSH2 0xA01 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x329 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xAD1 JUMPI POP DUP2 DUP2 EXP PUSH2 0x329 JUMP JUMPDEST PUSH2 0xADD PUSH0 NOT DUP5 DUP5 PUSH2 0xA15 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0xAF0 JUMPI PUSH2 0xAF0 PUSH2 0xA01 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x991 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0xA58 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x329 JUMPI PUSH2 0x329 PUSH2 0xA01 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x329 JUMPI PUSH2 0x329 PUSH2 0xA01 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0xB8 SWAP16 0x27 0xDC TLOAD EXTCODESIZE JUMPF 0xB406 0xC5 EQ 0xB6 PUSH26 0xA2DB27E6F0D84171F8E671D49DB8480ACB2C64736F6C63430008 0x1E STOP CALLER ",
							"sourceMap": "267:878:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3979:186;;;;;;:::i;:::-;;:::i;:::-;;;1085:14:9;;1078:22;1060:41;;1048:2;1033:18;3979:186:2;920:187:9;2830:97:2;2908:12;;2830:97;;;1258:25:9;;;1246:2;1231:18;2830:97:2;1112:177:9;4757:244:2;;;;;;:::i;:::-;;:::i;2688:82::-;;;2761:2;1815:36:9;;1803:2;1788:18;2688:82:2;1673:184:9;923:81:5;993:4;923:81;;673:235:8;;;;;;:::i;:::-;;:::i;:::-;;618:87:4;;;;;;:::i;:::-;;:::i;2985:116:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3076:18:2;3050:7;3076:18;;;;;;;;;;;;2985:116;2293:101:0;;;:::i;1021:158:4:-;;;;;;:::i;:::-;;:::i;1638:85:0:-;1710:6;;1638:85;;-1:-1:-1;;;;;1710:6:0;;;2430:51:9;;2418:2;2403:18;1638:85:0;2284:203:9;1962:93:2;;;:::i;3296:178::-;;;;;;:::i;:::-;;:::i;3532:140::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3638:18:2;;;3612:7;3638:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3532:140;2543:215:0;;;;;;:::i;:::-;;:::i;1760:89:2:-;1805:13;1837:5;1830:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89;:::o;3979:186::-;4052:4;735:10:7;4106:31:2;735:10:7;4122:7:2;4131:5;4106:8;:31::i;:::-;4154:4;4147:11;;;3979:186;;;;;:::o;4757:244::-;4844:4;735:10:7;4900:37:2;4916:4;735:10:7;4931:5:2;4900:15;:37::i;:::-;4947:26;4957:4;4963:2;4967:5;4947:9;:26::i;:::-;-1:-1:-1;4990:4:2;;4757:244;-1:-1:-1;;;;4757:244:2:o;673:235:8:-;1531:13:0;:11;:13::i;:::-;993:4:5;773:16:8::1;2761:2:2::0;773::8::1;:16;:::i;:::-;764:25;::::0;:6;:25:::1;:::i;:::-;2908:12:2::0;;747:43:8::1;;;;:::i;:::-;:51;743:111;;;822:20;;-1:-1:-1::0;;;822:20:8::1;;;;;;;;;;;743:111;864:36;870:2:::0;883:16:::1;2761:2:2::0;883::8::1;:16;:::i;:::-;874:25;::::0;:6;:25:::1;:::i;:::-;864:5;:36::i;:::-;673:235:::0;;:::o;618:87:4:-;672:26;735:10:7;692:5:4;672;:26::i;:::-;618:87;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1021:158:4:-;1096:45;1112:7;735:10:7;1135:5:4;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;1962:93:2:-;2009:13;2041:7;2034:14;;;;;:::i;3296:178::-;3365:4;735:10:7;3419:27:2;735:10:7;3436:2:2;3440:5;3419:9;:27::i;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;2430:51:9::0;2403:18;;2672:31:0::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;8707:128:2:-:0;8791:37;8800:5;8807:7;8816:5;8823:4;8791:8;:37::i;:::-;8707:128;;;:::o;10396:476::-;-1:-1:-1;;;;;3638:18:2;;;10495:24;3638:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10561:36:2;;10557:309;;;10636:5;10617:16;:24;10613:130;;;10668:60;;-1:-1:-1;;;10668:60:2;;-1:-1:-1;;;;;5229:32:9;;10668:60:2;;;5211:51:9;5278:18;;;5271:34;;;5321:18;;;5314:34;;;5184:18;;10668:60:2;5009:345:9;10613:130:2;10784:57;10793:5;10800:7;10828:5;10809:16;:24;10835:5;10784:8;:57::i;:::-;10485:387;10396:476;;;:::o;5374:300::-;-1:-1:-1;;;;;5457:18:2;;5453:86;;5498:30;;-1:-1:-1;;;5498:30:2;;5525:1;5498:30;;;2430:51:9;2403:18;;5498:30:2;2284:203:9;5453:86:2;-1:-1:-1;;;;;5552:16:2;;5548:86;;5591:32;;-1:-1:-1;;;5591:32:2;;5620:1;5591:32;;;2430:51:9;2403:18;;5591:32:2;2284:203:9;5548:86:2;5643:24;5651:4;5657:2;5661:5;5643:7;:24::i;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:7;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:7;1901:40:0;;;2430:51:9;2403:18;;1901:40:0;2284:203:9;7439:208:2;-1:-1:-1;;;;;7509:21:2;;7505:91;;7553:32;;-1:-1:-1;;;7553:32:2;;7582:1;7553:32;;;2430:51:9;2403:18;;7553:32:2;2284:203:9;7505:91:2;7605:35;7621:1;7625:7;7634:5;7605:7;:35::i;7965:206::-;-1:-1:-1;;;;;8035:21:2;;8031:89;;8079:30;;-1:-1:-1;;;8079:30:2;;8106:1;8079:30;;;2430:51:9;2403:18;;8079:30:2;2284:203:9;8031:89:2;8129:35;8137:7;8154:1;8158:5;8129:7;:35::i;2912:187:0:-;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;9682:432:2:-;-1:-1:-1;;;;;9794:19:2;;9790:89;;9836:32;;-1:-1:-1;;;9836:32:2;;9865:1;9836:32;;;2430:51:9;2403:18;;9836:32:2;2284:203:9;9790:89:2;-1:-1:-1;;;;;9892:21:2;;9888:90;;9936:31;;-1:-1:-1;;;9936:31:2;;9964:1;9936:31;;;2430:51:9;2403:18;;9936:31:2;2284:203:9;9888:90:2;-1:-1:-1;;;;;9987:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10032:76;;;;10082:7;-1:-1:-1;;;;;10066:31:2;10075:5;-1:-1:-1;;;;;10066:31:2;;10091:5;10066:31;;;;1258:25:9;;1246:2;1231:18;;1112:177;10066:31:2;;;;;;;;9682:432;;;;:::o;974:168:8:-;1104:30;1118:4;1124:2;1128:5;1153:30:5;1167:4;1173:2;1177:5;1153:13;:30::i;:::-;-1:-1:-1;;;;;1198:18:5;;1194:230;;2908:12:2;;993:4:5;;1328:9;1319:6;:18;1315:99;;;1364:35;;-1:-1:-1;;;1364:35:5;;;;;5533:25:9;;;5574:18;;;5567:34;;;5506:18;;1364:35:5;5359:248:9;1315:99:5;1218:206;;1059:371;;;:::o;5989:1107:2:-;-1:-1:-1;;;;;6078:18:2;;6074:540;;6230:5;6214:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6074:540:2;;-1:-1:-1;6074:540:2;;-1:-1:-1;;;;;6288:15:2;;6266:19;6288:15;;;;;;;;;;;6321:19;;;6317:115;;;6367:50;;-1:-1:-1;;;6367:50:2;;-1:-1:-1;;;;;5229:32:9;;6367:50:2;;;5211:51:9;5278:18;;;5271:34;;;5321:18;;;5314:34;;;5184:18;;6367:50:2;5009:345:9;6317:115:2;-1:-1:-1;;;;;6552:15:2;;:9;:15;;;;;;;;;;6570:19;;;;6552:37;;6074:540;-1:-1:-1;;;;;6628:16:2;;6624:425;;6791:12;:21;;;;;;;6624:425;;;-1:-1:-1;;;;;7002:13:2;;:9;:13;;;;;;;;;;:22;;;;;;6624:425;7079:2;-1:-1:-1;;;;;7064:25:2;7073:4;-1:-1:-1;;;;;7064:25:2;;7083:5;7064:25;;;;1258::9;;1246:2;1231:18;;1112:177;7064:25:2;;;;;;;;5989:1107;;;:::o;14:418:9:-;163:2;152:9;145:21;126:4;195:6;189:13;238:6;233:2;222:9;218:18;211:34;297:6;292:2;284:6;280:15;275:2;264:9;260:18;254:50;353:1;348:2;339:6;328:9;324:22;320:31;313:42;423:2;416;412:7;407:2;399:6;395:15;391:29;380:9;376:45;372:54;364:62;;;14:418;;;;:::o;437:173::-;505:20;;-1:-1:-1;;;;;554:31:9;;544:42;;534:70;;600:1;597;590:12;534:70;437:173;;;:::o;615:300::-;683:6;691;744:2;732:9;723:7;719:23;715:32;712:52;;;760:1;757;750:12;712:52;783:29;802:9;783:29;:::i;:::-;773:39;881:2;866:18;;;;853:32;;-1:-1:-1;;;615:300:9:o;1294:374::-;1371:6;1379;1387;1440:2;1428:9;1419:7;1415:23;1411:32;1408:52;;;1456:1;1453;1446:12;1408:52;1479:29;1498:9;1479:29;:::i;:::-;1469:39;;1527:38;1561:2;1550:9;1546:18;1527:38;:::i;:::-;1294:374;;1517:48;;-1:-1:-1;;;1634:2:9;1619:18;;;;1606:32;;1294:374::o;1862:226::-;1921:6;1974:2;1962:9;1953:7;1949:23;1945:32;1942:52;;;1990:1;1987;1980:12;1942:52;-1:-1:-1;2035:23:9;;1862:226;-1:-1:-1;1862:226:9:o;2093:186::-;2152:6;2205:2;2193:9;2184:7;2180:23;2176:32;2173:52;;;2221:1;2218;2211:12;2173:52;2244:29;2263:9;2244:29;:::i;:::-;2234:39;2093:186;-1:-1:-1;;;2093:186:9:o;2492:260::-;2560:6;2568;2621:2;2609:9;2600:7;2596:23;2592:32;2589:52;;;2637:1;2634;2627:12;2589:52;2660:29;2679:9;2660:29;:::i;:::-;2650:39;;2708:38;2742:2;2731:9;2727:18;2708:38;:::i;:::-;2698:48;;2492:260;;;;;:::o;2757:380::-;2836:1;2832:12;;;;2879;;;2900:61;;2954:4;2946:6;2942:17;2932:27;;2900:61;3007:2;2999:6;2996:14;2976:18;2973:38;2970:161;;3053:10;3048:3;3044:20;3041:1;3034:31;3088:4;3085:1;3078:15;3116:4;3113:1;3106:15;2970:161;;2757:380;;;:::o;3142:127::-;3203:10;3198:3;3194:20;3191:1;3184:31;3234:4;3231:1;3224:15;3258:4;3255:1;3248:15;3274:375;3362:1;3380:5;3394:249;3415:1;3405:8;3402:15;3394:249;;;3465:4;3460:3;3456:14;3450:4;3447:24;3444:50;;;3474:18;;:::i;:::-;3524:1;3514:8;3510:16;3507:49;;;3538:16;;;;3507:49;3621:1;3617:16;;;;;3577:15;;3394:249;;;3274:375;;;;;;:::o;3654:902::-;3703:5;3733:8;3723:80;;-1:-1:-1;3774:1:9;3788:5;;3723:80;3822:4;3812:76;;-1:-1:-1;3859:1:9;3873:5;;3812:76;3904:4;3922:1;3917:59;;;;3990:1;3985:174;;;;3897:262;;3917:59;3947:1;3938:10;;3961:5;;;3985:174;4022:3;4012:8;4009:17;4006:43;;;4029:18;;:::i;:::-;-1:-1:-1;;4085:1:9;4071:16;;4144:5;;3897:262;;4243:2;4233:8;4230:16;4224:3;4218:4;4215:13;4211:36;4205:2;4195:8;4192:16;4187:2;4181:4;4178:12;4174:35;4171:77;4168:203;;;-1:-1:-1;4280:19:9;;;4356:5;;4168:203;4403:42;-1:-1:-1;;4428:8:9;4422:4;4403:42;:::i;:::-;4481:6;4477:1;4473:6;4469:19;4460:7;4457:32;4454:58;;;4492:18;;:::i;:::-;4530:20;;3654:902;-1:-1:-1;;;3654:902:9:o;4561:140::-;4619:5;4648:47;4689:4;4679:8;4675:19;4669:4;4648:47;:::i;4706:168::-;4779:9;;;4810;;4827:15;;;4821:22;;4807:37;4797:71;;4848:18;;:::i;4879:125::-;4944:9;;;4965:10;;;4962:36;;;4978:18;;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "583600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24757",
								"balanceOf(address)": "2560",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"cap()": "infinite",
								"decimals()": "199",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "2389",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2348",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28421"
							},
							"internal": {
								"_update(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 367,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 367,
									"end": 665,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 524,
									"end": 534,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 489,
									"end": 505,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 2761,
									"end": 2763,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 489,
									"end": 491,
									"name": "PUSH",
									"source": 8,
									"value": "A"
								},
								{
									"begin": 489,
									"end": 505,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 489,
									"end": 505,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 489,
									"end": 505,
									"name": "tag",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 489,
									"end": 505,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 477,
									"end": 505,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "10"
								},
								{
									"begin": 477,
									"end": 505,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 477,
									"end": 486,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 477,
									"end": 505,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 477,
									"end": 505,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 477,
									"end": 505,
									"name": "tag",
									"source": 8,
									"value": "10"
								},
								{
									"begin": 477,
									"end": 505,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2A32B1B737A1B7B4B7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "B9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "544E43"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1656,
									"end": 1661,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1648,
									"end": 1653,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1648,
									"end": 1661,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1671,
									"end": 1678,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1681,
									"end": 1688,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1671,
									"end": 1678,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1671,
									"end": 1688,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "tag",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 756,
									"end": 760,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 764,
									"end": 765,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 756,
									"end": 765,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 752,
									"end": 817,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 752,
									"end": 817,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 788,
									"end": 806,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "392E1E27"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 788,
									"end": 806,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 804,
									"end": 805,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 788,
									"end": 806,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 788,
									"end": 806,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4894,
									"end": 4919,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4867,
									"end": 4885,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 4867,
									"end": 4885,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 788,
									"end": 806,
									"name": "tag",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 788,
									"end": 806,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 788,
									"end": 806,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 788,
									"end": 806,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 752,
									"end": 817,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 752,
									"end": 817,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 826,
									"end": 837,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 826,
									"end": 837,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 5076,
									"end": 5127,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5049,
									"end": 5067,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 5049,
									"end": 5067,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 4930,
									"end": 5133,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "27"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 606,
									"end": 657,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 612,
									"end": 622,
									"modifierDepth": 3,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 640,
									"end": 656,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 2761,
									"end": 2763,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 640,
									"end": 642,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 8,
									"value": "A"
								},
								{
									"begin": 640,
									"end": 656,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 640,
									"end": 656,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 640,
									"end": 656,
									"modifierDepth": 3,
									"name": "tag",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 640,
									"end": 656,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 624,
									"end": 656,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 624,
									"end": 656,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 624,
									"end": 637,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 624,
									"end": 656,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 624,
									"end": 656,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 624,
									"end": 656,
									"modifierDepth": 3,
									"name": "tag",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 624,
									"end": 656,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 606,
									"end": 611,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "33"
								},
								{
									"begin": 606,
									"end": 657,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 606,
									"end": 657,
									"modifierDepth": 3,
									"name": "tag",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 606,
									"end": 657,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 367,
									"end": 665,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "78"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "27"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7439,
									"end": 7647,
									"name": "tag",
									"source": 2,
									"value": "33"
								},
								{
									"begin": 7439,
									"end": 7647,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7509,
									"end": 7530,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7509,
									"end": 7530,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7505,
									"end": 7596,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "38"
								},
								{
									"begin": 7505,
									"end": 7596,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EC442F05"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7582,
									"end": 7583,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 5076,
									"end": 5127,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5049,
									"end": 5067,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 5049,
									"end": 5067,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 7553,
									"end": 7585,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4930,
									"end": 5133,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 7505,
									"end": 7596,
									"name": "tag",
									"source": 2,
									"value": "38"
								},
								{
									"begin": 7505,
									"end": 7596,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7605,
									"end": 7640,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7621,
									"end": 7622,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7625,
									"end": 7632,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7634,
									"end": 7639,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7605,
									"end": 7612,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 7605,
									"end": 7640,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 7605,
									"end": 7640,
									"name": "tag",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7605,
									"end": 7640,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7439,
									"end": 7647,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7439,
									"end": 7647,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7439,
									"end": 7647,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 974,
									"end": 1142,
									"name": "tag",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 974,
									"end": 1142,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1104,
									"end": 1134,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1118,
									"end": 1122,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1124,
									"end": 1126,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1128,
									"end": 1133,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1104,
									"end": 1117,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "44"
								},
								{
									"begin": 1104,
									"end": 1134,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1104,
									"end": 1134,
									"name": "tag",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1104,
									"end": 1134,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 974,
									"end": 1142,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 974,
									"end": 1142,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 974,
									"end": 1142,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 974,
									"end": 1142,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1059,
									"end": 1430,
									"name": "tag",
									"source": 5,
									"value": "44"
								},
								{
									"begin": 1059,
									"end": 1430,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1153,
									"end": 1183,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "46"
								},
								{
									"begin": 1167,
									"end": 1171,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1173,
									"end": 1175,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1177,
									"end": 1182,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1153,
									"end": 1166,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "47"
								},
								{
									"begin": 1153,
									"end": 1183,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1153,
									"end": 1183,
									"name": "tag",
									"source": 5,
									"value": "46"
								},
								{
									"begin": 1153,
									"end": 1183,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1198,
									"end": 1216,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1198,
									"end": 1216,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1194,
									"end": 1424,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "43"
								},
								{
									"begin": 1194,
									"end": 1424,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1232,
									"end": 1249,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1252,
									"end": 1257,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 993,
									"end": 997,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 993,
									"end": 997,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 993,
									"end": 997,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 923,
									"end": 1004,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1252,
									"end": 1257,
									"name": "tag",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 1252,
									"end": 1257,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1232,
									"end": 1257,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1271,
									"end": 1285,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1301,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "51"
								},
								{
									"begin": 2908,
									"end": 2920,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 2908,
									"end": 2920,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2908,
									"end": 2920,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2830,
									"end": 2927,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1288,
									"end": 1301,
									"name": "tag",
									"source": 5,
									"value": "51"
								},
								{
									"begin": 1288,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1271,
									"end": 1301,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1271,
									"end": 1301,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1328,
									"end": 1337,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1319,
									"end": 1325,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1319,
									"end": 1337,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 1315,
									"end": 1414,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1315,
									"end": 1414,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "53"
								},
								{
									"begin": 1315,
									"end": 1414,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "279E7E15"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 5312,
									"end": 5337,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5312,
									"end": 5337,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5312,
									"end": 5337,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5353,
									"end": 5371,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 5353,
									"end": 5371,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5353,
									"end": 5371,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5346,
									"end": 5380,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 5346,
									"end": 5380,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5346,
									"end": 5380,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5285,
									"end": 5303,
									"name": "PUSH",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 5285,
									"end": 5303,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1364,
									"end": 1399,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 5138,
									"end": 5386,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1315,
									"end": 1414,
									"name": "tag",
									"source": 5,
									"value": "53"
								},
								{
									"begin": 1315,
									"end": 1414,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1218,
									"end": 1424,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1218,
									"end": 1424,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1059,
									"end": 1430,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1059,
									"end": 1430,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1059,
									"end": 1430,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1059,
									"end": 1430,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 5989,
									"end": 7096,
									"name": "tag",
									"source": 2,
									"value": "47"
								},
								{
									"begin": 5989,
									"end": 7096,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6078,
									"end": 6096,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 6078,
									"end": 6096,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6230,
									"end": 6235,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6226,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 6214,
									"end": 6226,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "58"
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "59"
								},
								{
									"begin": 6214,
									"end": 6235,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "tag",
									"source": 2,
									"value": "58"
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6214,
									"end": 6235,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "60"
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "tag",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6266,
									"end": 6285,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 6288,
									"end": 6303,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6321,
									"end": 6340,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6321,
									"end": 6340,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6321,
									"end": 6340,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 6317,
									"end": 6432,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 6317,
									"end": 6432,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "61"
								},
								{
									"begin": 6317,
									"end": 6432,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "391434E3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 5741,
									"end": 5773,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 5741,
									"end": 5773,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 5723,
									"end": 5774,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5790,
									"end": 5808,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 5790,
									"end": 5808,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5790,
									"end": 5808,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5783,
									"end": 5817,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5783,
									"end": 5817,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5783,
									"end": 5817,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5833,
									"end": 5851,
									"name": "PUSH",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 5833,
									"end": 5851,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5833,
									"end": 5851,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5826,
									"end": 5860,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 5826,
									"end": 5860,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5826,
									"end": 5860,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5696,
									"end": 5714,
									"name": "PUSH",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 5696,
									"end": 5714,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6367,
									"end": 6417,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 5521,
									"end": 5866,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6317,
									"end": 6432,
									"name": "tag",
									"source": 2,
									"value": "61"
								},
								{
									"begin": 6317,
									"end": 6432,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6561,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6567,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6589,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6589,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6589,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6570,
									"end": 6589,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6589,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6552,
									"end": 6589,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "tag",
									"source": 2,
									"value": "60"
								},
								{
									"begin": 6074,
									"end": 6614,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6628,
									"end": 6644,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6628,
									"end": 6644,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6803,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6791,
									"end": 6812,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "65"
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "tag",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7015,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7024,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7024,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7024,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7024,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7024,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7002,
									"end": 7024,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "tag",
									"source": 2,
									"value": "65"
								},
								{
									"begin": 6624,
									"end": 7049,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7079,
									"end": 7081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7073,
									"end": 7077,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "PUSH",
									"source": 2,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 7083,
									"end": 7088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "66"
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4894,
									"end": 4919,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4894,
									"end": 4919,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4882,
									"end": 4884,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 4867,
									"end": 4885,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4867,
									"end": 4885,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4740,
									"end": 4925,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "tag",
									"source": 2,
									"value": "66"
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7064,
									"end": 7089,
									"name": "LOG3",
									"source": 2
								},
								{
									"begin": 5989,
									"end": 7096,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 5989,
									"end": 7096,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 5989,
									"end": 7096,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 5989,
									"end": 7096,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 357,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 357,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 93,
									"end": 99,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 107,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 154,
									"end": 156,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 142,
									"end": 151,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 133,
									"end": 140,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 129,
									"end": 152,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 125,
									"end": 157,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 122,
									"end": 174,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 122,
									"end": 174,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 122,
									"end": 174,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 170,
									"end": 171,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 168,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 160,
									"end": 172,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 122,
									"end": 174,
									"name": "tag",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 122,
									"end": 174,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 215,
									"end": 231,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 215,
									"end": 231,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 321,
									"end": 323,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 306,
									"end": 324,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 306,
									"end": 324,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 306,
									"end": 324,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 300,
									"end": 325,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 215,
									"end": 231,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 215,
									"end": 231,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 300,
									"end": 325,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 300,
									"end": 325,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 357,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 362,
									"end": 489,
									"name": "tag",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 362,
									"end": 489,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 423,
									"end": 433,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 418,
									"end": 421,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 414,
									"end": 434,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 411,
									"end": 412,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 404,
									"end": 435,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 454,
									"end": 458,
									"name": "PUSH",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 451,
									"end": 452,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 444,
									"end": 459,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 478,
									"end": 482,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 475,
									"end": 476,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 468,
									"end": 483,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "tag",
									"source": 9,
									"value": "71"
								},
								{
									"begin": 494,
									"end": 869,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 582,
									"end": 583,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 600,
									"end": 605,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 614,
									"end": 863,
									"name": "tag",
									"source": 9,
									"value": "83"
								},
								{
									"begin": 614,
									"end": 863,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 635,
									"end": 636,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 625,
									"end": 633,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 622,
									"end": 637,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 614,
									"end": 863,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 614,
									"end": 863,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "85"
								},
								{
									"begin": 614,
									"end": 863,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 685,
									"end": 689,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 680,
									"end": 683,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 676,
									"end": 690,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 670,
									"end": 674,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 667,
									"end": 691,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 664,
									"end": 714,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 664,
									"end": 714,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 664,
									"end": 714,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 694,
									"end": 712,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 694,
									"end": 712,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 694,
									"end": 712,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 694,
									"end": 712,
									"name": "tag",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 694,
									"end": 712,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 744,
									"end": 745,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 734,
									"end": 742,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 730,
									"end": 746,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 727,
									"end": 776,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 727,
									"end": 776,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "88"
								},
								{
									"begin": 727,
									"end": 776,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 758,
									"end": 774,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 758,
									"end": 774,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 758,
									"end": 774,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 758,
									"end": 774,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 727,
									"end": 776,
									"name": "tag",
									"source": 9,
									"value": "88"
								},
								{
									"begin": 727,
									"end": 776,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 841,
									"end": 842,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 837,
									"end": 853,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 837,
									"end": 853,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 837,
									"end": 853,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 837,
									"end": 853,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 837,
									"end": 853,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 797,
									"end": 812,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 797,
									"end": 812,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 614,
									"end": 863,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "83"
								},
								{
									"begin": 614,
									"end": 863,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 614,
									"end": 863,
									"name": "tag",
									"source": 9,
									"value": "85"
								},
								{
									"begin": 614,
									"end": 863,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 494,
									"end": 869,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "tag",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 923,
									"end": 928,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 953,
									"end": 961,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 943,
									"end": 1023,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "90"
								},
								{
									"begin": 943,
									"end": 1023,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 994,
									"end": 995,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1008,
									"end": 1013,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 1008,
									"end": 1013,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 943,
									"end": 1023,
									"name": "tag",
									"source": 9,
									"value": "90"
								},
								{
									"begin": 943,
									"end": 1023,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1042,
									"end": 1046,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1032,
									"end": 1108,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 1032,
									"end": 1108,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1079,
									"end": 1080,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1093,
									"end": 1098,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 1093,
									"end": 1098,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1032,
									"end": 1108,
									"name": "tag",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 1032,
									"end": 1108,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1124,
									"end": 1128,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1142,
									"end": 1143,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1137,
									"end": 1196,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1137,
									"end": 1196,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 1137,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "93"
								},
								{
									"begin": 1137,
									"end": 1196,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1210,
									"end": 1211,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1205,
									"end": 1379,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1205,
									"end": 1379,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 1205,
									"end": 1379,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "94"
								},
								{
									"begin": 1205,
									"end": 1379,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1117,
									"end": 1379,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "92"
								},
								{
									"begin": 1117,
									"end": 1379,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1137,
									"end": 1196,
									"name": "tag",
									"source": 9,
									"value": "93"
								},
								{
									"begin": 1137,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1167,
									"end": 1168,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1158,
									"end": 1168,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1158,
									"end": 1168,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1181,
									"end": 1186,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1181,
									"end": 1186,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 1181,
									"end": 1186,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1205,
									"end": 1379,
									"name": "tag",
									"source": 9,
									"value": "94"
								},
								{
									"begin": 1205,
									"end": 1379,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1242,
									"end": 1245,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 1232,
									"end": 1240,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1229,
									"end": 1246,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1226,
									"end": 1269,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1226,
									"end": 1269,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "96"
								},
								{
									"begin": 1226,
									"end": 1269,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1249,
									"end": 1267,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "96"
								},
								{
									"begin": 1249,
									"end": 1267,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 1249,
									"end": 1267,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1249,
									"end": 1267,
									"name": "tag",
									"source": 9,
									"value": "96"
								},
								{
									"begin": 1249,
									"end": 1267,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1305,
									"end": 1306,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1291,
									"end": 1307,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1291,
									"end": 1307,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1364,
									"end": 1369,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 1364,
									"end": 1369,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1117,
									"end": 1379,
									"name": "tag",
									"source": 9,
									"value": "92"
								},
								{
									"begin": 1117,
									"end": 1379,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1117,
									"end": 1379,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1463,
									"end": 1465,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1453,
									"end": 1461,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1450,
									"end": 1466,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1444,
									"end": 1447,
									"name": "PUSH",
									"source": 9,
									"value": "133"
								},
								{
									"begin": 1438,
									"end": 1442,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1435,
									"end": 1448,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1431,
									"end": 1467,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1425,
									"end": 1427,
									"name": "PUSH",
									"source": 9,
									"value": "4E"
								},
								{
									"begin": 1415,
									"end": 1423,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1412,
									"end": 1428,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1407,
									"end": 1409,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 1401,
									"end": 1405,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1398,
									"end": 1410,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1394,
									"end": 1429,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1391,
									"end": 1468,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1388,
									"end": 1591,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1388,
									"end": 1591,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "97"
								},
								{
									"begin": 1388,
									"end": 1591,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1500,
									"end": 1519,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1500,
									"end": 1519,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1500,
									"end": 1519,
									"name": "EXP",
									"source": 9
								},
								{
									"begin": 1576,
									"end": 1581,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 1576,
									"end": 1581,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1388,
									"end": 1591,
									"name": "tag",
									"source": 9,
									"value": "97"
								},
								{
									"begin": 1388,
									"end": 1591,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1623,
									"end": 1665,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "98"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1648,
									"end": 1656,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1642,
									"end": 1646,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1623,
									"end": 1665,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "71"
								},
								{
									"begin": 1623,
									"end": 1665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1623,
									"end": 1665,
									"name": "tag",
									"source": 9,
									"value": "98"
								},
								{
									"begin": 1623,
									"end": 1665,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1701,
									"end": 1707,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1697,
									"end": 1698,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1693,
									"end": 1699,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 1689,
									"end": 1708,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 1680,
									"end": 1687,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1677,
									"end": 1709,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1674,
									"end": 1732,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1674,
									"end": 1732,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 1674,
									"end": 1732,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1712,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 1712,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 1712,
									"end": 1730,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1712,
									"end": 1730,
									"name": "tag",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 1712,
									"end": 1730,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1750,
									"end": 1770,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 1750,
									"end": 1770,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "tag",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 874,
									"end": 1776,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 874,
									"end": 1776,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1781,
									"end": 1921,
									"name": "tag",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 1781,
									"end": 1921,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1839,
									"end": 1844,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1868,
									"end": 1915,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "102"
								},
								{
									"begin": 1909,
									"end": 1913,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 1899,
									"end": 1907,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1895,
									"end": 1914,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1889,
									"end": 1893,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1868,
									"end": 1915,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 1868,
									"end": 1915,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1868,
									"end": 1915,
									"name": "tag",
									"source": 9,
									"value": "102"
								},
								{
									"begin": 1868,
									"end": 1915,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1859,
									"end": 1915,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1781,
									"end": 1921,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1781,
									"end": 1921,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1926,
									"end": 2094,
									"name": "tag",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 1926,
									"end": 2094,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1999,
									"end": 2008,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1999,
									"end": 2008,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1999,
									"end": 2008,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 2030,
									"end": 2039,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2030,
									"end": 2039,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2047,
									"end": 2062,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2047,
									"end": 2062,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2047,
									"end": 2062,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 2041,
									"end": 2063,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2041,
									"end": 2063,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 2027,
									"end": 2064,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 2017,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 2017,
									"end": 2088,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2068,
									"end": 2086,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 2068,
									"end": 2086,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 2068,
									"end": 2086,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2099,
									"end": 2226,
									"name": "tag",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 2099,
									"end": 2226,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2160,
									"end": 2170,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 2155,
									"end": 2158,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 2151,
									"end": 2171,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2148,
									"end": 2149,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2141,
									"end": 2172,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2191,
									"end": 2195,
									"name": "PUSH",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 2188,
									"end": 2189,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 2181,
									"end": 2196,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2215,
									"end": 2219,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 2212,
									"end": 2213,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2205,
									"end": 2220,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 2231,
									"end": 2611,
									"name": "tag",
									"source": 9,
									"value": "74"
								},
								{
									"begin": 2231,
									"end": 2611,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2310,
									"end": 2311,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2306,
									"end": 2318,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2318,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2318,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2318,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2353,
									"end": 2365,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2353,
									"end": 2365,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 2353,
									"end": 2365,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2374,
									"end": 2435,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "108"
								},
								{
									"begin": 2374,
									"end": 2435,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2428,
									"end": 2432,
									"name": "PUSH",
									"source": 9,
									"value": "7F"
								},
								{
									"begin": 2420,
									"end": 2426,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2416,
									"end": 2433,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 2406,
									"end": 2433,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2406,
									"end": 2433,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2374,
									"end": 2435,
									"name": "tag",
									"source": 9,
									"value": "108"
								},
								{
									"begin": 2374,
									"end": 2435,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2481,
									"end": 2483,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2473,
									"end": 2479,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2470,
									"end": 2484,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 2450,
									"end": 2468,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2447,
									"end": 2485,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 2444,
									"end": 2605,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "109"
								},
								{
									"begin": 2444,
									"end": 2605,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2527,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 2522,
									"end": 2525,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 2518,
									"end": 2538,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2515,
									"end": 2516,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2508,
									"end": 2539,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2562,
									"end": 2566,
									"name": "PUSH",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 2559,
									"end": 2560,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 2552,
									"end": 2567,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2590,
									"end": 2594,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 2587,
									"end": 2588,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2580,
									"end": 2595,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 2444,
									"end": 2605,
									"name": "tag",
									"source": 9,
									"value": "109"
								},
								{
									"begin": 2444,
									"end": 2605,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2444,
									"end": 2605,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2231,
									"end": 2611,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2231,
									"end": 2611,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2231,
									"end": 2611,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2231,
									"end": 2611,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2742,
									"end": 3260,
									"name": "tag",
									"source": 9,
									"value": "76"
								},
								{
									"begin": 2742,
									"end": 3260,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2844,
									"end": 2846,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 2839,
									"end": 2842,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2836,
									"end": 2847,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 2833,
									"end": 3254,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2833,
									"end": 3254,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "43"
								},
								{
									"begin": 2833,
									"end": 3254,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2880,
									"end": 2885,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2877,
									"end": 2878,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2870,
									"end": 2886,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2924,
									"end": 2928,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2921,
									"end": 2922,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2911,
									"end": 2929,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 2994,
									"end": 2996,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 2982,
									"end": 2992,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2978,
									"end": 2997,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2975,
									"end": 2976,
									"name": "PUSH",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 2971,
									"end": 2998,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2965,
									"end": 2969,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2961,
									"end": 2999,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3030,
									"end": 3034,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3018,
									"end": 3028,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3015,
									"end": 3035,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3012,
									"end": 3059,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3012,
									"end": 3059,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "113"
								},
								{
									"begin": 3012,
									"end": 3059,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3053,
									"end": 3057,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3012,
									"end": 3059,
									"name": "tag",
									"source": 9,
									"value": "113"
								},
								{
									"begin": 3012,
									"end": 3059,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3108,
									"end": 3110,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 3103,
									"end": 3106,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3099,
									"end": 3111,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3096,
									"end": 3097,
									"name": "PUSH",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 3092,
									"end": 3112,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 3086,
									"end": 3090,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3082,
									"end": 3113,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3072,
									"end": 3113,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3072,
									"end": 3113,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "tag",
									"source": 9,
									"value": "114"
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3181,
									"end": 3183,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3174,
									"end": 3179,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3171,
									"end": 3184,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "53"
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3240,
									"end": 3241,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3226,
									"end": 3242,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3226,
									"end": 3242,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 3207,
									"end": 3208,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3196,
									"end": 3209,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "114"
								},
								{
									"begin": 3163,
									"end": 3244,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3436,
									"end": 4735,
									"name": "tag",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 3436,
									"end": 4735,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3556,
									"end": 3566,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3556,
									"end": 3566,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3578,
									"end": 3608,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3578,
									"end": 3608,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3575,
									"end": 3631,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3575,
									"end": 3631,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "120"
								},
								{
									"begin": 3575,
									"end": 3631,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3611,
									"end": 3629,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "120"
								},
								{
									"begin": 3611,
									"end": 3629,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 3611,
									"end": 3629,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3611,
									"end": 3629,
									"name": "tag",
									"source": 9,
									"value": "120"
								},
								{
									"begin": 3611,
									"end": 3629,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3640,
									"end": 3737,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "121"
								},
								{
									"begin": 3730,
									"end": 3736,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3690,
									"end": 3728,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "122"
								},
								{
									"begin": 3722,
									"end": 3726,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3716,
									"end": 3727,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 3690,
									"end": 3728,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "74"
								},
								{
									"begin": 3690,
									"end": 3728,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3690,
									"end": 3728,
									"name": "tag",
									"source": 9,
									"value": "122"
								},
								{
									"begin": 3690,
									"end": 3728,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3684,
									"end": 3688,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3640,
									"end": 3737,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "76"
								},
								{
									"begin": 3640,
									"end": 3737,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3640,
									"end": 3737,
									"name": "tag",
									"source": 9,
									"value": "121"
								},
								{
									"begin": 3640,
									"end": 3737,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3786,
									"end": 3790,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3817,
									"end": 3819,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 3806,
									"end": 3820,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3806,
									"end": 3820,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3834,
									"end": 3835,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3829,
									"end": 4478,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3829,
									"end": 4478,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 3829,
									"end": 4478,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "124"
								},
								{
									"begin": 3829,
									"end": 4478,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4522,
									"end": 4523,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4539,
									"end": 4545,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 4536,
									"end": 4625,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4536,
									"end": 4625,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "125"
								},
								{
									"begin": 4536,
									"end": 4625,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4591,
									"end": 4610,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4591,
									"end": 4610,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4591,
									"end": 4610,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4585,
									"end": 4611,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 4536,
									"end": 4625,
									"name": "tag",
									"source": 9,
									"value": "125"
								},
								{
									"begin": 4536,
									"end": 4625,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3393,
									"end": 3394,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 3389,
									"end": 3400,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3389,
									"end": 3400,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3389,
									"end": 3400,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 3385,
									"end": 3409,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 3381,
									"end": 3410,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 3411,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3417,
									"end": 3418,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3413,
									"end": 3424,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3413,
									"end": 3424,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3413,
									"end": 3424,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 3368,
									"end": 3425,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 4638,
									"end": 4719,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4638,
									"end": 4719,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 3799,
									"end": 4729,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "53"
								},
								{
									"begin": 3799,
									"end": 4729,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3829,
									"end": 4478,
									"name": "tag",
									"source": 9,
									"value": "124"
								},
								{
									"begin": 3829,
									"end": 4478,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2689,
									"end": 2690,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2682,
									"end": 2696,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2682,
									"end": 2696,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2682,
									"end": 2696,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2726,
									"end": 2730,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2713,
									"end": 2731,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2713,
									"end": 2731,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3865,
									"end": 3885,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3865,
									"end": 3885,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3865,
									"end": 3885,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "tag",
									"source": 9,
									"value": "128"
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3997,
									"end": 4004,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3994,
									"end": 3995,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3991,
									"end": 4005,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "130"
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4079,
									"end": 4098,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 4079,
									"end": 4098,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 4079,
									"end": 4098,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4073,
									"end": 4099,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 4058,
									"end": 4100,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4058,
									"end": 4100,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 4186,
									"end": 4190,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 4171,
									"end": 4191,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 4171,
									"end": 4191,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 4171,
									"end": 4191,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4171,
									"end": 4191,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 4139,
									"end": 4140,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4127,
									"end": 4141,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4127,
									"end": 4141,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 4127,
									"end": 4141,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4127,
									"end": 4141,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 4013,
									"end": 4025,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "128"
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "tag",
									"source": 9,
									"value": "130"
								},
								{
									"begin": 3983,
									"end": 4205,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3987,
									"end": 3990,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4233,
									"end": 4239,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4224,
									"end": 4231,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4221,
									"end": 4240,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 4218,
									"end": 4419,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4218,
									"end": 4419,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "131"
								},
								{
									"begin": 4218,
									"end": 4419,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4294,
									"end": 4313,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 4294,
									"end": 4313,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4294,
									"end": 4313,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4288,
									"end": 4314,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4377,
									"end": 4378,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 4373,
									"end": 4387,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 4373,
									"end": 4387,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4373,
									"end": 4387,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 4389,
									"end": 4392,
									"name": "PUSH",
									"source": 9,
									"value": "F8"
								},
								{
									"begin": 4369,
									"end": 4393,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 4365,
									"end": 4402,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 4361,
									"end": 4403,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 4346,
									"end": 4404,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 4331,
									"end": 4405,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4331,
									"end": 4405,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 4218,
									"end": 4419,
									"name": "tag",
									"source": 9,
									"value": "131"
								},
								{
									"begin": 4218,
									"end": 4419,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4465,
									"end": 4466,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4449,
									"end": 4463,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4449,
									"end": 4463,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4449,
									"end": 4463,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 4445,
									"end": 4467,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4432,
									"end": 4468,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4432,
									"end": 4468,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3436,
									"end": 4735,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5391,
									"end": 5516,
									"name": "tag",
									"source": 9,
									"value": "59"
								},
								{
									"begin": 5391,
									"end": 5516,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5456,
									"end": 5465,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 5456,
									"end": 5465,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5456,
									"end": 5465,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5477,
									"end": 5487,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 5477,
									"end": 5487,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5477,
									"end": 5487,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 5474,
									"end": 5510,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 5474,
									"end": 5510,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 5474,
									"end": 5510,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 5490,
									"end": 5508,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 5490,
									"end": 5508,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 5490,
									"end": 5508,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5871,
									"end": 6048,
									"name": "tag",
									"source": 9,
									"value": "78"
								},
								{
									"begin": 5871,
									"end": 6048,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "932"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 1145,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122026b89f27dc5c3be5b406c514b679a2db27e6f0d84171f8e671d49db8480acb2c64736f6c634300081e0033",
									".code": [
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "95D89B41"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "95D89B41"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "DD62ED3E"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "79CC6790"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "313CE567"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "313CE567"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "355274EA"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "40C10F19"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "42966C68"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "6FDDE03"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B3"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "18160DDD"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 267,
											"end": 1145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1760,
											"end": 1849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1760,
											"end": 1849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3979,
											"end": 4165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3979,
											"end": 4165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1085,
											"end": 1099,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1085,
											"end": 1099,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1078,
											"end": 1100,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1060,
											"end": 1101,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1060,
											"end": 1101,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1048,
											"end": 1050,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1033,
											"end": 1051,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 920,
											"end": 1107,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2830,
											"end": 2927,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 4757,
											"end": 5001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4757,
											"end": 5001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1815,
											"end": 1851,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1815,
											"end": 1851,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1788,
											"end": 1806,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1673,
											"end": 1857,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 923,
											"end": 1004,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 923,
											"end": 1004,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 993,
											"end": 997,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "932"
										},
										{
											"begin": 923,
											"end": 1004,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 923,
											"end": 1004,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 673,
											"end": 908,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 673,
											"end": 908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 673,
											"end": 908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "tag",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 2985,
											"end": 3101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3050,
											"end": 3057,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3076,
											"end": 3094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2985,
											"end": 3101,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2418,
											"end": 2420,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 1962,
											"end": 2055,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3296,
											"end": 3474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 3296,
											"end": 3474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 3532,
											"end": 3672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3612,
											"end": 3619,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3649,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3532,
											"end": 3672,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1805,
											"end": 1818,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 1837,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 1830,
											"end": 1842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 1830,
											"end": 1842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1760,
											"end": 1849,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4052,
											"end": 4056,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4106,
											"end": 4137,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4122,
											"end": 4129,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4131,
											"end": 4136,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4106,
											"end": 4114,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 4106,
											"end": 4137,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4106,
											"end": 4137,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 4106,
											"end": 4137,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4154,
											"end": 4158,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4147,
											"end": 4158,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4147,
											"end": 4158,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4147,
											"end": 4158,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3979,
											"end": 4165,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4844,
											"end": 4848,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4900,
											"end": 4937,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 4916,
											"end": 4920,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4931,
											"end": 4936,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4900,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4900,
											"end": 4937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4900,
											"end": 4937,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 4900,
											"end": 4937,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4947,
											"end": 4973,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 4957,
											"end": 4961,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4963,
											"end": 4965,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4947,
											"end": 4956,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 4947,
											"end": 4973,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4947,
											"end": 4973,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 4947,
											"end": 4973,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4990,
											"end": 4994,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4990,
											"end": 4994,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4757,
											"end": 5001,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4757,
											"end": 5001,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 673,
											"end": 908,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 673,
											"end": 908,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 993,
											"end": 997,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "932"
										},
										{
											"begin": 773,
											"end": 789,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "111"
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 773,
											"end": 775,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 773,
											"end": 789,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "112"
										},
										{
											"begin": 773,
											"end": 789,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 773,
											"end": 789,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "111"
										},
										{
											"begin": 773,
											"end": 789,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 764,
											"end": 789,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 764,
											"end": 789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 764,
											"end": 770,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 764,
											"end": 789,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 764,
											"end": 789,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 764,
											"end": 789,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 764,
											"end": 789,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 747,
											"end": 790,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 747,
											"end": 790,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 747,
											"end": 790,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 747,
											"end": 790,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 747,
											"end": 790,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 747,
											"end": 790,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 747,
											"end": 790,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 747,
											"end": 798,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 743,
											"end": 854,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 743,
											"end": 854,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 743,
											"end": 854,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BF3AA03"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 822,
											"end": 842,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 743,
											"end": 854,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 743,
											"end": 854,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 864,
											"end": 900,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 870,
											"end": 872,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 883,
											"end": 899,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 883,
											"end": 885,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 883,
											"end": 899,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "112"
										},
										{
											"begin": 883,
											"end": 899,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 883,
											"end": 899,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 883,
											"end": 899,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 874,
											"end": 899,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 874,
											"end": 899,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 874,
											"end": 880,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 874,
											"end": 899,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 874,
											"end": 899,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 874,
											"end": 899,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 874,
											"end": 899,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 864,
											"end": 869,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 864,
											"end": 900,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 864,
											"end": 900,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 864,
											"end": 900,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 673,
											"end": 908,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 672,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 692,
											"end": 697,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 672,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 672,
											"end": 698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 672,
											"end": 698,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 672,
											"end": 698,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 1112,
											"end": 1119,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1135,
											"end": 1140,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1096,
											"end": 1141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1166,
											"end": 1171,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1151,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1151,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2009,
											"end": 2022,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2041,
											"end": 2048,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2034,
											"end": 2048,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 3296,
											"end": 3474,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3365,
											"end": 3369,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3419,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3436,
											"end": 3438,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3419,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 3419,
											"end": 3446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8707,
											"end": 8835,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 8707,
											"end": 8835,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8791,
											"end": 8828,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 8800,
											"end": 8805,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8807,
											"end": 8814,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8816,
											"end": 8821,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8823,
											"end": 8827,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 8791,
											"end": 8799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 8791,
											"end": 8828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8791,
											"end": 8828,
											"name": "tag",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 8791,
											"end": 8828,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8707,
											"end": 8835,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8707,
											"end": 8835,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8707,
											"end": 8835,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8707,
											"end": 8835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10396,
											"end": 10872,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10396,
											"end": 10872,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10495,
											"end": 10519,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3649,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10561,
											"end": 10597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10561,
											"end": 10597,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10636,
											"end": 10641,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10617,
											"end": 10633,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5211,
											"end": 5262,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5278,
											"end": 5296,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5278,
											"end": 5296,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5278,
											"end": 5296,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5305,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5305,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5305,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5314,
											"end": 5348,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5314,
											"end": 5348,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5314,
											"end": 5348,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 5009,
											"end": 5354,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 10793,
											"end": 10798,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10807,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10828,
											"end": 10833,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10809,
											"end": 10825,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10809,
											"end": 10833,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10840,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10784,
											"end": 10792,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 10784,
											"end": 10841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10841,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 10784,
											"end": 10841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10485,
											"end": 10872,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10396,
											"end": 10872,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10396,
											"end": 10872,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10396,
											"end": 10872,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10396,
											"end": 10872,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5374,
											"end": 5674,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 5374,
											"end": 5674,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5457,
											"end": 5475,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5457,
											"end": 5475,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5525,
											"end": 5526,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "tag",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5620,
											"end": 5621,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5643,
											"end": 5667,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 5651,
											"end": 5655,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5657,
											"end": 5659,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5661,
											"end": 5666,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5643,
											"end": 5650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5643,
											"end": 5667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7439,
											"end": 7647,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 7439,
											"end": 7647,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7509,
											"end": 7530,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7509,
											"end": 7530,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7582,
											"end": 7583,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7605,
											"end": 7640,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 7621,
											"end": 7622,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7625,
											"end": 7632,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7634,
											"end": 7639,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7605,
											"end": 7612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 7605,
											"end": 7640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8035,
											"end": 8056,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8035,
											"end": 8056,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8106,
											"end": 8107,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "tag",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8129,
											"end": 8164,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 8137,
											"end": 8144,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8154,
											"end": 8155,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8158,
											"end": 8163,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8129,
											"end": 8136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 8129,
											"end": 8164,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9682,
											"end": 10114,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 9682,
											"end": 10114,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9865,
											"end": 9866,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9964,
											"end": 9965,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2430,
											"end": 2481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2403,
											"end": 2421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2284,
											"end": 2487,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "tag",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 9998,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10005,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10014,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10022,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10022,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9987,
											"end": 10022,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10032,
											"end": 10108,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10032,
											"end": 10108,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10032,
											"end": 10108,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 10032,
											"end": 10108,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10082,
											"end": 10089,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10075,
											"end": 10080,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10091,
											"end": 10096,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 9682,
											"end": 10114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9682,
											"end": 10114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9682,
											"end": 10114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9682,
											"end": 10114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9682,
											"end": 10114,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1142,
											"name": "tag",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 974,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1104,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1118,
											"end": 1122,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1124,
											"end": 1126,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1128,
											"end": 1133,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "199"
										},
										{
											"begin": 1167,
											"end": 1171,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1173,
											"end": 1175,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1177,
											"end": 1182,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1153,
											"end": 1166,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "200"
										},
										{
											"begin": 1153,
											"end": 1183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1153,
											"end": 1183,
											"name": "tag",
											"source": 5,
											"value": "199"
										},
										{
											"begin": 1153,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1198,
											"end": 1216,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1198,
											"end": 1216,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1194,
											"end": 1424,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 1194,
											"end": 1424,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 993,
											"end": 997,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "932"
										},
										{
											"begin": 993,
											"end": 997,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1337,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1319,
											"end": 1325,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1319,
											"end": 1337,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1315,
											"end": 1414,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1315,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "204"
										},
										{
											"begin": 1315,
											"end": 1414,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "279E7E15"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5533,
											"end": 5558,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5533,
											"end": 5558,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5533,
											"end": 5558,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5567,
											"end": 5601,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5567,
											"end": 5601,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5567,
											"end": 5601,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5506,
											"end": 5524,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5506,
											"end": 5524,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1364,
											"end": 1399,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "153"
										},
										{
											"begin": 5359,
											"end": 5607,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1315,
											"end": 1414,
											"name": "tag",
											"source": 5,
											"value": "204"
										},
										{
											"begin": 1315,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1218,
											"end": 1424,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1218,
											"end": 1424,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1059,
											"end": 1430,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1059,
											"end": 1430,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1059,
											"end": 1430,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1059,
											"end": 1430,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5989,
											"end": 7096,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 5989,
											"end": 7096,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6078,
											"end": 6096,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6078,
											"end": 6096,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6230,
											"end": 6235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6226,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6214,
											"end": 6226,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 6214,
											"end": 6235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6266,
											"end": 6285,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6288,
											"end": 6303,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5229,
											"end": 5261,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5211,
											"end": 5262,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5278,
											"end": 5296,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5278,
											"end": 5296,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5278,
											"end": 5296,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5305,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5305,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5271,
											"end": 5305,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5314,
											"end": 5348,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5314,
											"end": 5348,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5314,
											"end": 5348,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 5009,
											"end": 5354,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6561,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6567,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6589,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6589,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6589,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6589,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6589,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6552,
											"end": 6589,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 6074,
											"end": 6614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6628,
											"end": 6644,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6628,
											"end": 6644,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6803,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "tag",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7015,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7024,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7024,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7024,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7024,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7024,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7002,
											"end": 7024,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "tag",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 6624,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7079,
											"end": 7081,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7077,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7083,
											"end": 7088,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "tag",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 5989,
											"end": 7096,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5989,
											"end": 7096,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5989,
											"end": 7096,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5989,
											"end": 7096,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 432,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 14,
											"end": 432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 163,
											"end": 165,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 152,
											"end": 161,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 145,
											"end": 166,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 201,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 189,
											"end": 202,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 238,
											"end": 244,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 233,
											"end": 235,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 222,
											"end": 231,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 218,
											"end": 236,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 211,
											"end": 245,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 297,
											"end": 303,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 292,
											"end": 294,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 284,
											"end": 290,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 280,
											"end": 295,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 275,
											"end": 277,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 264,
											"end": 273,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 260,
											"end": 278,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MCOPY",
											"source": 9
										},
										{
											"begin": 353,
											"end": 354,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 350,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 345,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 328,
											"end": 337,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 324,
											"end": 346,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 320,
											"end": 351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 313,
											"end": 355,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 423,
											"end": 425,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 412,
											"end": 419,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 407,
											"end": 409,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 399,
											"end": 405,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 395,
											"end": 410,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 391,
											"end": 420,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 380,
											"end": 389,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 376,
											"end": 421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 372,
											"end": 426,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 364,
											"end": 426,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 364,
											"end": 426,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 364,
											"end": 426,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 432,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 14,
											"end": 432,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14,
											"end": 432,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 432,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 437,
											"end": 610,
											"name": "tag",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 437,
											"end": 610,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 505,
											"end": 525,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 505,
											"end": 525,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 554,
											"end": 585,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 554,
											"end": 585,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 544,
											"end": 586,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 544,
											"end": 586,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 534,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 534,
											"end": 604,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 600,
											"end": 601,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 598,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 590,
											"end": 602,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 534,
											"end": 604,
											"name": "tag",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 534,
											"end": 604,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 437,
											"end": 610,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 437,
											"end": 610,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 437,
											"end": 610,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 437,
											"end": 610,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 615,
											"end": 915,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 615,
											"end": 915,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 683,
											"end": 689,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 691,
											"end": 697,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 746,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 732,
											"end": 741,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 723,
											"end": 730,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 719,
											"end": 742,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 715,
											"end": 747,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 712,
											"end": 764,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 712,
											"end": 764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 712,
											"end": 764,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 760,
											"end": 761,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 758,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 750,
											"end": 762,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 712,
											"end": 764,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 712,
											"end": 764,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 783,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 783,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 783,
											"end": 812,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 783,
											"end": 812,
											"name": "tag",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 783,
											"end": 812,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 773,
											"end": 812,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 881,
											"end": 883,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 866,
											"end": 884,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 853,
											"end": 885,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 853,
											"end": 885,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 615,
											"end": 915,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1377,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1379,
											"end": 1385,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1387,
											"end": 1393,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1440,
											"end": 1442,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1428,
											"end": 1437,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1419,
											"end": 1426,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1415,
											"end": 1438,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1411,
											"end": 1443,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1456,
											"end": 1457,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1453,
											"end": 1454,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1446,
											"end": 1458,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 1479,
											"end": 1508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1469,
											"end": 1508,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1469,
											"end": 1508,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 1561,
											"end": 1563,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1550,
											"end": 1559,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1546,
											"end": 1564,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 1527,
											"end": 1565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "tag",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 1517,
											"end": 1565,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1517,
											"end": 1565,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1634,
											"end": 1636,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1606,
											"end": 1638,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1606,
											"end": 1638,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 1668,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1862,
											"end": 2088,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 1862,
											"end": 2088,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1921,
											"end": 1927,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1974,
											"end": 1976,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1962,
											"end": 1971,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1953,
											"end": 1960,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1945,
											"end": 1977,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1990,
											"end": 1991,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1987,
											"end": 1988,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1980,
											"end": 1992,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2035,
											"end": 2058,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2035,
											"end": 2058,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1862,
											"end": 2088,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1862,
											"end": 2088,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2093,
											"end": 2279,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2093,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2152,
											"end": 2158,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2205,
											"end": 2207,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2193,
											"end": 2202,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2184,
											"end": 2191,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2180,
											"end": 2203,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2176,
											"end": 2208,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2173,
											"end": 2225,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2173,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 2173,
											"end": 2225,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2221,
											"end": 2222,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2218,
											"end": 2219,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2211,
											"end": 2223,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2173,
											"end": 2225,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 2173,
											"end": 2225,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2244,
											"end": 2273,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 2263,
											"end": 2272,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2244,
											"end": 2273,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 2244,
											"end": 2273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2244,
											"end": 2273,
											"name": "tag",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 2244,
											"end": 2273,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2234,
											"end": 2273,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2093,
											"end": 2279,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2093,
											"end": 2279,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2560,
											"end": 2566,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2568,
											"end": 2574,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2621,
											"end": 2623,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2609,
											"end": 2618,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2607,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2596,
											"end": 2619,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2592,
											"end": 2624,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2637,
											"end": 2638,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2634,
											"end": 2635,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2627,
											"end": 2639,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "tag",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 2679,
											"end": 2688,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 2660,
											"end": 2689,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "tag",
											"source": 9,
											"value": "242"
										},
										{
											"begin": 2660,
											"end": 2689,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2650,
											"end": 2689,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2650,
											"end": 2689,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2708,
											"end": 2746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 2742,
											"end": 2744,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2731,
											"end": 2740,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2727,
											"end": 2745,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2708,
											"end": 2746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 2708,
											"end": 2746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2708,
											"end": 2746,
											"name": "tag",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 2708,
											"end": 2746,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2698,
											"end": 2746,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2698,
											"end": 2746,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2492,
											"end": 2752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2757,
											"end": 3137,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 2757,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2836,
											"end": 2837,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2879,
											"end": 2891,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2879,
											"end": 2891,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2879,
											"end": 2891,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2900,
											"end": 2961,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 2900,
											"end": 2961,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2954,
											"end": 2958,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 2946,
											"end": 2952,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2942,
											"end": 2959,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2932,
											"end": 2959,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2932,
											"end": 2959,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2900,
											"end": 2961,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 2900,
											"end": 2961,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3009,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2999,
											"end": 3005,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2996,
											"end": 3010,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 2994,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2973,
											"end": 3011,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2970,
											"end": 3131,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 2970,
											"end": 3131,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3063,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 3048,
											"end": 3051,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 3044,
											"end": 3064,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3042,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3034,
											"end": 3065,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3088,
											"end": 3092,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 3085,
											"end": 3086,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3078,
											"end": 3093,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3116,
											"end": 3120,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3113,
											"end": 3114,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3106,
											"end": 3121,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2970,
											"end": 3131,
											"name": "tag",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 2970,
											"end": 3131,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2970,
											"end": 3131,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2757,
											"end": 3137,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2757,
											"end": 3137,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2757,
											"end": 3137,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2757,
											"end": 3137,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3142,
											"end": 3269,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 3142,
											"end": 3269,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3203,
											"end": 3213,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 3198,
											"end": 3201,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 3194,
											"end": 3214,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3191,
											"end": 3192,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3184,
											"end": 3215,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3234,
											"end": 3238,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 3231,
											"end": 3232,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3224,
											"end": 3239,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3258,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3255,
											"end": 3256,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3248,
											"end": 3263,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "tag",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3362,
											"end": 3363,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3380,
											"end": 3385,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "tag",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3415,
											"end": 3416,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3405,
											"end": 3413,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3402,
											"end": 3417,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3465,
											"end": 3469,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3460,
											"end": 3463,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3456,
											"end": 3470,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3450,
											"end": 3454,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3471,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3444,
											"end": 3494,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3444,
											"end": 3494,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 3444,
											"end": 3494,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3492,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 3474,
											"end": 3492,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 3474,
											"end": 3492,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3492,
											"name": "tag",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 3474,
											"end": 3492,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3524,
											"end": 3525,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3514,
											"end": 3522,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3526,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3507,
											"end": 3556,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3507,
											"end": 3556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 3507,
											"end": 3556,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3538,
											"end": 3554,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3538,
											"end": 3554,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3538,
											"end": 3554,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3538,
											"end": 3554,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3507,
											"end": 3556,
											"name": "tag",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 3507,
											"end": 3556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3621,
											"end": 3622,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3617,
											"end": 3633,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3617,
											"end": 3633,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3617,
											"end": 3633,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3617,
											"end": 3633,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3617,
											"end": 3633,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 3394,
											"end": 3643,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3274,
											"end": 3649,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 4556,
											"name": "tag",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 3654,
											"end": 4556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3703,
											"end": 3708,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3733,
											"end": 3741,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3723,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 3723,
											"end": 3803,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3774,
											"end": 3775,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3788,
											"end": 3793,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3788,
											"end": 3793,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3723,
											"end": 3803,
											"name": "tag",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 3723,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3822,
											"end": 3826,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3812,
											"end": 3888,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "257"
										},
										{
											"begin": 3812,
											"end": 3888,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3859,
											"end": 3860,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3873,
											"end": 3878,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3873,
											"end": 3878,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3812,
											"end": 3888,
											"name": "tag",
											"source": 9,
											"value": "257"
										},
										{
											"begin": 3812,
											"end": 3888,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3904,
											"end": 3908,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3922,
											"end": 3923,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3917,
											"end": 3976,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3917,
											"end": 3976,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3917,
											"end": 3976,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 3917,
											"end": 3976,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3990,
											"end": 3991,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3985,
											"end": 4159,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4159,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4159,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 3985,
											"end": 4159,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3897,
											"end": 4159,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 3897,
											"end": 4159,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3917,
											"end": 3976,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 3917,
											"end": 3976,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3947,
											"end": 3948,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3938,
											"end": 3948,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3938,
											"end": 3948,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3961,
											"end": 3966,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3961,
											"end": 3966,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3961,
											"end": 3966,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4159,
											"name": "tag",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 3985,
											"end": 4159,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4022,
											"end": 4025,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 4012,
											"end": 4020,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4009,
											"end": 4026,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 4006,
											"end": 4049,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4006,
											"end": 4049,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 4006,
											"end": 4049,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4029,
											"end": 4047,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 4029,
											"end": 4047,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 4029,
											"end": 4047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4029,
											"end": 4047,
											"name": "tag",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 4029,
											"end": 4047,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4085,
											"end": 4086,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4071,
											"end": 4087,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4071,
											"end": 4087,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 4144,
											"end": 4149,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 4144,
											"end": 4149,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3897,
											"end": 4159,
											"name": "tag",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 3897,
											"end": 4159,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3897,
											"end": 4159,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4243,
											"end": 4245,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4233,
											"end": 4241,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4230,
											"end": 4246,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4224,
											"end": 4227,
											"name": "PUSH",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 4218,
											"end": 4222,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4215,
											"end": 4228,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4211,
											"end": 4247,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4205,
											"end": 4207,
											"name": "PUSH",
											"source": 9,
											"value": "4E"
										},
										{
											"begin": 4195,
											"end": 4203,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4192,
											"end": 4208,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4187,
											"end": 4189,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 4181,
											"end": 4185,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4174,
											"end": 4209,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4171,
											"end": 4248,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 4168,
											"end": 4371,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4168,
											"end": 4371,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 4168,
											"end": 4371,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4280,
											"end": 4299,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4299,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4280,
											"end": 4299,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4356,
											"end": 4361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 4356,
											"end": 4361,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4168,
											"end": 4371,
											"name": "tag",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 4168,
											"end": 4371,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4403,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4428,
											"end": 4436,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4422,
											"end": 4426,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4403,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 4403,
											"end": 4445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4403,
											"end": 4445,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 4403,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4481,
											"end": 4487,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4477,
											"end": 4478,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4473,
											"end": 4479,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4460,
											"end": 4467,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4457,
											"end": 4489,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 4454,
											"end": 4512,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4454,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 4454,
											"end": 4512,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 4492,
											"end": 4510,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4530,
											"end": 4550,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4530,
											"end": 4550,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 4556,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3654,
											"end": 4556,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4561,
											"end": 4701,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 4561,
											"end": 4701,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4619,
											"end": 4624,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4648,
											"end": 4695,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 4689,
											"end": 4693,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 4679,
											"end": 4687,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4675,
											"end": 4694,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4669,
											"end": 4673,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4648,
											"end": 4695,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 4648,
											"end": 4695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4706,
											"end": 4874,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 4706,
											"end": 4874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4779,
											"end": 4788,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4779,
											"end": 4788,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4779,
											"end": 4788,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4810,
											"end": 4819,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4810,
											"end": 4819,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4827,
											"end": 4842,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4827,
											"end": 4842,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4827,
											"end": 4842,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4843,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4843,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4868,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 4797,
											"end": 4868,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4848,
											"end": 4866,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 4848,
											"end": 4866,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 4848,
											"end": 4866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4879,
											"end": 5004,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 4879,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4953,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4953,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4953,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4965,
											"end": 4975,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4965,
											"end": 4975,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4965,
											"end": 4975,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 4962,
											"end": 4998,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4962,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 4962,
											"end": 4998,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4978,
											"end": 4996,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 4978,
											"end": 4996,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 4978,
											"end": 4996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"TecnoCoin.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"cap()": "355274ea",
							"decimals()": "313ce567",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20InvalidCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyAlcanzado\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20ExceededCap(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidCap(uint256)\":[{\"details\":\"The supplied cap is not a valid cap.\"}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"TecnoCoin.sol\":\"TecnoCoin\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"keccak256\":\"0x9a961321311c070327b31fba89d821346225a411f946c9e84b330afdfdbb1d60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://084698c9feace630ff29919baad9df0721944eb2ecaf942ef807935bbbe41b5a\",\"dweb:/ipfs/Qmet4EQYqPLSKo7UPBNGaVw5NPATNkiLsqSCnCgg5kAPg4\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"TecnoCoin.sol\":{\"keccak256\":\"0xcbd56f9b5256eaf6f34ddc1f6bf12f3b8109e0c58024476750f8a77344eea916\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c8058c4917dd66d58c98113489d8f23d9899cb9164ea52fec8cf84cb9352065\",\"dweb:/ipfs/QmRdXbfiDrUdPR8XvCrXLBqD6wzY7ryZWnUzfb4Bv2LcEP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "TecnoCoin.sol:TecnoCoin",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "TecnoCoin.sol:TecnoCoin",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "TecnoCoin.sol:TecnoCoin",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "TecnoCoin.sol:TecnoCoin",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "TecnoCoin.sol:TecnoCoin",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 8,
								"contract": "TecnoCoin.sol:TecnoCoin",
								"label": "_owner",
								"offset": 0,
								"slot": "5",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1078
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1079,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1078,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1078,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1078
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1060,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1060,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							284
						],
						"IERC20Errors": [
							189
						],
						"IERC721Errors": [
							237
						]
					},
					"id": 285,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 150,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:1",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 189,
							"linearizedBaseContracts": [
								189
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 159,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "654:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "670:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "687:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:1"
									},
									"src": "623:80:1"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 164,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "891:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:1"
									},
									"src": "866:41:1"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 169,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "1104:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:1"
									},
									"src": "1077:45:1"
								},
								{
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 178,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1511:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1528:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1547:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:1"
									},
									"src": "1478:85:1"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 183,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "1775:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:1"
									},
									"src": "1748:45:1"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 188,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2025:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:1"
									},
									"src": "1999:43:1"
								}
							],
							"scope": 285,
							"src": "280:1764:1",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 190,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:1",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 237,
							"linearizedBaseContracts": [
								237
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 195,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "2469:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:1"
									},
									"src": "2444:40:1"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 200,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2656:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:1"
									},
									"src": "2627:46:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 209,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3000:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3016:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3033:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:1"
									},
									"src": "2973:75:1"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 214,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "3237:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:1"
									},
									"src": "3211:42:1"
								},
								{
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 219,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3451:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:1"
									},
									"src": "3423:46:1"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 226,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3760:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3778:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:1"
									},
									"src": "3727:68:1"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 231,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "4008:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:1"
									},
									"src": "3980:46:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 236,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "4262:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:1"
									},
									"src": "4234:46:1"
								}
							],
							"scope": 285,
							"src": "2190:2092:1",
							"usedErrors": [
								195,
								200,
								209,
								214,
								219,
								226,
								231,
								236
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 238,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:1",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 284,
							"linearizedBaseContracts": [
								284
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 249,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4860:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4876:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4893:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4909:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:1"
									},
									"src": "4827:99:1"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 254,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "5116:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:1"
									},
									"src": "5089:43:1"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 259,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "5331:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:1"
									},
									"src": "5302:47:1"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 266,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5651:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5669:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:1"
									},
									"src": "5616:68:1"
								},
								{
									"documentation": {
										"id": 267,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 271,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "5898:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:1"
									},
									"src": "5869:47:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 276,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6153:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:1"
									},
									"src": "6124:47:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 283,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6494:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6513:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:1"
									},
									"src": "6462:73:1"
								}
							],
							"scope": 285,
							"src": "4430:2107:1",
							"usedErrors": [
								249,
								254,
								259,
								266,
								271,
								276,
								283
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1078
						],
						"ERC20": [
							799
						],
						"IERC20": [
							877
						],
						"IERC20Errors": [
							189
						],
						"IERC20Metadata": [
							1048
						]
					},
					"id": 800,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 286,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 288,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 878,
							"src": "131:36:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 287,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 290,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 1049,
							"src": "168:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 289,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1048,
										"src": "176:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 292,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 1079,
							"src": "232:48:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 291,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1078,
										"src": "240:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 294,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 285,
							"src": "281:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 293,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 189,
										"src": "289:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 296,
										"name": "Context",
										"nameLocations": [
											"1133:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1078,
										"src": "1133:7:2"
									},
									"id": 297,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:2"
								},
								{
									"baseName": {
										"id": 298,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "1142:6:2"
									},
									"id": 299,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:2"
								},
								{
									"baseName": {
										"id": 300,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1048,
										"src": "1150:14:2"
									},
									"id": 301,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:2"
								},
								{
									"baseName": {
										"id": 302,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 189,
										"src": "1166:12:2"
									},
									"id": 303,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 295,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 799,
							"linearizedBaseContracts": [
								799,
								189,
								1048,
								877,
								1078
							],
							"name": "ERC20",
							"nameLocation": "1124:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 307,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1185:53:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 306,
										"keyName": "account",
										"keyNameLocation": "1201:7:2",
										"keyType": {
											"id": 304,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 305,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 313,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1245:83:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 312,
										"keyName": "account",
										"keyNameLocation": "1261:7:2",
										"keyType": {
											"id": 308,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 311,
											"keyName": "spender",
											"keyNameLocation": "1288:7:2",
											"keyType": {
												"id": 309,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 310,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 315,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1335:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 314,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 317,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1370:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 316,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 319,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1396:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 318,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "1638:57:2",
										"statements": [
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 327,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "1648:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "1656:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1648:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "1648:13:2"
											},
											{
												"expression": {
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 331,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "1671:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 332,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 324,
														"src": "1681:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1671:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "1671:17:2"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "1425:152:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
									},
									"id": 336,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1608:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1594:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 321,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1594:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1629:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1615:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1615:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1593:44:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1638:0:2"
									},
									"scope": 799,
									"src": "1582:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1035
									],
									"body": {
										"id": 344,
										"nodeType": "Block",
										"src": "1820:29:2",
										"statements": [
											{
												"expression": {
													"id": 342,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 317,
													"src": "1837:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 341,
												"id": 343,
												"nodeType": "Return",
												"src": "1830:12:2"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "1701:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1769:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:2"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "1805:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 339,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1805:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:15:2"
									},
									"scope": 799,
									"src": "1760:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1041
									],
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2024:31:2",
										"statements": [
											{
												"expression": {
													"id": 351,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 319,
													"src": "2041:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 350,
												"id": 352,
												"nodeType": "Return",
												"src": "2034:14:2"
											}
										]
									},
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "1855:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1971:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1977:2:2"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "2009:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2009:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2008:15:2"
									},
									"scope": 799,
									"src": "1962:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1047
									],
									"body": {
										"id": 362,
										"nodeType": "Block",
										"src": "2744:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 360,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2761:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 359,
												"id": 361,
												"nodeType": "Return",
												"src": "2754:9:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2061:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2697:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2705:2:2"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "2737:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 357,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2737:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2736:7:2"
									},
									"scope": 799,
									"src": "2688:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										826
									],
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "2891:36:2",
										"statements": [
											{
												"expression": {
													"id": 369,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 315,
													"src": "2908:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 368,
												"id": 370,
												"nodeType": "Return",
												"src": "2901:19:2"
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "2776:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2839:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2850:2:2"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "2882:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2881:9:2"
									},
									"scope": 799,
									"src": "2830:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										834
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "3059:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 380,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "3076:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 382,
													"indexExpression": {
														"id": 381,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 375,
														"src": "3086:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3076:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 379,
												"id": 383,
												"nodeType": "Return",
												"src": "3069:25:2"
											}
										]
									},
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "2933:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2994:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3012:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3004:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3004:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3003:17:2"
									},
									"returnParameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3050:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:9:2"
									},
									"scope": 799,
									"src": "2985:116:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										844
									],
									"body": {
										"id": 408,
										"nodeType": "Block",
										"src": "3371:103:2",
										"statements": [
											{
												"assignments": [
													396
												],
												"declarations": [
													{
														"constant": false,
														"id": 396,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3389:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 408,
														"src": "3381:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 395,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3381:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 399,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 397,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "3397:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3397:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3381:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 401,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "3429:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 402,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "3436:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 403,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "3440:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 400,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "3419:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3419:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "3419:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3463:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 394,
												"id": 407,
												"nodeType": "Return",
												"src": "3456:11:2"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "3107:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3305:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3322:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3314:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3314:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3334:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3326:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3326:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3313:27:2"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3365:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 392,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3365:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3364:6:2"
									},
									"scope": 799,
									"src": "3296:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										854
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "3621:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 419,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "3638:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 421,
														"indexExpression": {
															"id": 420,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "3650:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3638:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 423,
													"indexExpression": {
														"id": 422,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "3657:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3638:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 418,
												"id": 424,
												"nodeType": "Return",
												"src": "3631:34:2"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "3480:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3541:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3559:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3551:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3574:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3566:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:32:2"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3611:9:2"
									},
									"scope": 799,
									"src": "3532:140:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										864
									],
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "4058:107:2",
										"statements": [
											{
												"assignments": [
													437
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4076:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 449,
														"src": "4068:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 436,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4068:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 440,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 438,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "4084:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4084:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4068:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "4115:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4122:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "4131:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 441,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 690,
														"src": "4106:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4106:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "4106:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4154:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 435,
												"id": 448,
												"nodeType": "Return",
												"src": "4147:11:2"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "3678:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3988:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4004:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "3996:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3996:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4021:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4013:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4013:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:32:2"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4052:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4052:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4051:6:2"
									},
									"scope": 799,
									"src": "3979:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										876
									],
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "4850:151:2",
										"statements": [
											{
												"assignments": [
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4868:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 481,
														"src": "4860:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 462,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4860:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 466,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 464,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "4878:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4878:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4860:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 468,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "4916:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "4922:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "4931:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 467,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "4900:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4900:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "4900:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 474,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "4957:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 475,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 455,
															"src": "4963:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 476,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "4967:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 473,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "4947:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4947:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 478,
												"nodeType": "ExpressionStatement",
												"src": "4947:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4990:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 461,
												"id": 480,
												"nodeType": "Return",
												"src": "4983:11:2"
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "4171:581:2",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4766:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4787:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4779:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4779:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4801:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4793:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4793:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4813:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4805:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4805:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4778:41:2"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4844:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 459,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4844:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:6:2"
									},
									"scope": 799,
									"src": "4757:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "5443:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 492,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "5457:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5473:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5465:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 493,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5465:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5465:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5457:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 506,
												"nodeType": "IfStatement",
												"src": "5453:86:2",
												"trueBody": {
													"id": 505,
													"nodeType": "Block",
													"src": "5477:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 501,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5525:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5517:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 499,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5517:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5517:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 498,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "5498:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5498:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 504,
															"nodeType": "RevertStatement",
															"src": "5491:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 507,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "5552:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5566:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5558:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 508,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5558:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 511,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5558:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5552:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 521,
												"nodeType": "IfStatement",
												"src": "5548:86:2",
												"trueBody": {
													"id": 520,
													"nodeType": "Block",
													"src": "5570:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 516,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5620:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5612:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 514,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5612:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5612:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 513,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "5591:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5591:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 519,
															"nodeType": "RevertStatement",
															"src": "5584:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 523,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "5651:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "5657:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 525,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "5661:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "5643:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5643:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5643:24:2"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "5007:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5383:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5401:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5393:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5393:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5415:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5407:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5407:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5427:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5419:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5392:41:2"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5443:0:2"
									},
									"scope": 799,
									"src": "5374:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "6064:1032:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 539,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "6078:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6094:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6086:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 540,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6086:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6086:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6078:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 576,
													"nodeType": "Block",
													"src": "6252:362:2",
													"statements": [
														{
															"assignments": [
																551
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 551,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6274:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 576,
																	"src": "6266:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 550,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6266:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 555,
															"initialValue": {
																"baseExpression": {
																	"id": 552,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 307,
																	"src": "6288:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 554,
																"indexExpression": {
																	"id": 553,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 532,
																	"src": "6298:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6288:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6266:37:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 556,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 551,
																	"src": "6321:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 557,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6335:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6321:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 566,
															"nodeType": "IfStatement",
															"src": "6317:115:2",
															"trueBody": {
																"id": 565,
																"nodeType": "Block",
																"src": "6342:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 560,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 532,
																					"src": "6392:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 561,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 551,
																					"src": "6398:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 562,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 536,
																					"src": "6411:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 559,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6367:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6367:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 564,
																		"nodeType": "RevertStatement",
																		"src": "6360:57:2"
																	}
																]
															}
														},
														{
															"id": 575,
															"nodeType": "UncheckedBlock",
															"src": "6445:159:2",
															"statements": [
																{
																	"expression": {
																		"id": 573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 567,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "6552:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 569,
																			"indexExpression": {
																				"id": 568,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "6562:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6552:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 570,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 551,
																				"src": "6570:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 571,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 536,
																				"src": "6584:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6570:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6552:37:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 574,
																	"nodeType": "ExpressionStatement",
																	"src": "6552:37:2"
																}
															]
														}
													]
												},
												"id": 577,
												"nodeType": "IfStatement",
												"src": "6074:540:2",
												"trueBody": {
													"id": 549,
													"nodeType": "Block",
													"src": "6098:148:2",
													"statements": [
														{
															"expression": {
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 545,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 315,
																	"src": "6214:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 546,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6230:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6214:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 548,
															"nodeType": "ExpressionStatement",
															"src": "6214:21:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 578,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "6628:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6642:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6634:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 579,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6634:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6634:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6628:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 597,
													"nodeType": "Block",
													"src": "6843:206:2",
													"statements": [
														{
															"id": 596,
															"nodeType": "UncheckedBlock",
															"src": "6857:182:2",
															"statements": [
																{
																	"expression": {
																		"id": 594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 590,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "7002:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 592,
																			"indexExpression": {
																				"id": 591,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 534,
																				"src": "7012:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7002:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 593,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "7019:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7002:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 595,
																	"nodeType": "ExpressionStatement",
																	"src": "7002:22:2"
																}
															]
														}
													]
												},
												"id": 598,
												"nodeType": "IfStatement",
												"src": "6624:425:2",
												"trueBody": {
													"id": 589,
													"nodeType": "Block",
													"src": "6646:191:2",
													"statements": [
														{
															"id": 588,
															"nodeType": "UncheckedBlock",
															"src": "6660:167:2",
															"statements": [
																{
																	"expression": {
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 584,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "6791:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 585,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "6807:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6791:21:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 587,
																	"nodeType": "ExpressionStatement",
																	"src": "6791:21:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 600,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "7073:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 601,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "7079:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 602,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "7083:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 599,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "7064:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7064:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "EmitStatement",
												"src": "7059:30:2"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "5680:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "5998:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6014:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6006:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6006:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6028:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6020:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6040:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6032:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6032:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6005:41:2"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6064:0:2"
									},
									"scope": 799,
									"src": "5989:1107:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 638,
										"nodeType": "Block",
										"src": "7495:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 614,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 609,
														"src": "7509:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 617,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7528:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7520:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 615,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7520:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7520:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7509:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 628,
												"nodeType": "IfStatement",
												"src": "7505:91:2",
												"trueBody": {
													"id": 627,
													"nodeType": "Block",
													"src": "7532:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 623,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7582:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7574:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 621,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7574:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7574:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 620,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "7553:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7553:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 626,
															"nodeType": "RevertStatement",
															"src": "7546:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7621:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7613:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 630,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7613:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7613:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 634,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "7625:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 635,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "7634:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 629,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "7605:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7605:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 637,
												"nodeType": "ExpressionStatement",
												"src": "7605:35:2"
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "7102:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7448:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7462:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7454:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7454:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7471:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:32:2"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7495:0:2"
									},
									"scope": 799,
									"src": "7439:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "8021:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 647,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 642,
														"src": "8035:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8054:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8046:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 648,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8046:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8046:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8035:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 661,
												"nodeType": "IfStatement",
												"src": "8031:89:2",
												"trueBody": {
													"id": 660,
													"nodeType": "Block",
													"src": "8058:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 656,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8106:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8098:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 654,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8098:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8098:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 653,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "8079:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8079:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 659,
															"nodeType": "RevertStatement",
															"src": "8072:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 663,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "8137:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8154:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8146:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 664,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8146:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8146:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "8158:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 662,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "8129:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8129:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "8129:35:2"
											}
										]
									},
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "7653:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7974:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7988:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "7980:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7980:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8005:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "7997:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7997:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7979:32:2"
									},
									"returnParameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8021:0:2"
									},
									"scope": 799,
									"src": "7965:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "8781:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 683,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "8800:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 684,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "8807:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "8816:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 686,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8823:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 682,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 750,
														"src": "8791:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8791:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "8791:37:2"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "8177:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8716:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8733:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "8725:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8725:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8748:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "8740:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8740:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8765:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "8757:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8757:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8724:47:2"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8781:0:2"
									},
									"scope": 799,
									"src": "8707:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 749,
										"nodeType": "Block",
										"src": "9780:334:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 702,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "9794:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9811:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9803:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 703,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9803:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9803:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9794:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 716,
												"nodeType": "IfStatement",
												"src": "9790:89:2",
												"trueBody": {
													"id": 715,
													"nodeType": "Block",
													"src": "9815:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 711,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9865:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9857:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 709,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9857:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9857:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 708,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "9836:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9836:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 714,
															"nodeType": "RevertStatement",
															"src": "9829:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 717,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 695,
														"src": "9892:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 720,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9911:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9903:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 718,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9903:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9903:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9892:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 731,
												"nodeType": "IfStatement",
												"src": "9888:90:2",
												"trueBody": {
													"id": 730,
													"nodeType": "Block",
													"src": "9915:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9964:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9956:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 724,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9956:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9956:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 723,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 188,
																	"src": "9936:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9936:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 729,
															"nodeType": "RevertStatement",
															"src": "9929:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 732,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "9987:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 735,
															"indexExpression": {
																"id": 733,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "9999:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9987:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 736,
														"indexExpression": {
															"id": 734,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "10006:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9987:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 737,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "10017:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9987:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 739,
												"nodeType": "ExpressionStatement",
												"src": "9987:35:2"
											},
											{
												"condition": {
													"id": 740,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 699,
													"src": "10036:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 748,
												"nodeType": "IfStatement",
												"src": "10032:76:2",
												"trueBody": {
													"id": 747,
													"nodeType": "Block",
													"src": "10047:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 742,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 693,
																		"src": "10075:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 743,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 695,
																		"src": "10082:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 744,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "10091:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 741,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 820,
																	"src": "10066:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10066:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 746,
															"nodeType": "EmitStatement",
															"src": "10061:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "8841:836:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9691:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9708:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9700:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9700:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9723:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9715:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9715:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9740:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9732:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9732:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9752:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9747:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9747:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9699:63:2"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9780:0:2"
									},
									"scope": 799,
									"src": "9682:432:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 797,
										"nodeType": "Block",
										"src": "10485:387:2",
										"statements": [
											{
												"assignments": [
													761
												],
												"declarations": [
													{
														"constant": false,
														"id": 761,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10503:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 797,
														"src": "10495:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 760,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10495:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 766,
												"initialValue": {
													"arguments": [
														{
															"id": 763,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "10532:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 764,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "10539:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 762,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 426,
														"src": "10522:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10522:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10495:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 767,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "10561:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10585:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 769,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10585:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 768,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10580:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10580:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10594:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10580:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10561:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 796,
												"nodeType": "IfStatement",
												"src": "10557:309:2",
												"trueBody": {
													"id": 795,
													"nodeType": "Block",
													"src": "10599:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 774,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 761,
																	"src": "10617:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 775,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "10636:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10617:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 784,
															"nodeType": "IfStatement",
															"src": "10613:130:2",
															"trueBody": {
																"id": 783,
																"nodeType": "Block",
																"src": "10643:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 778,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 755,
																					"src": "10695:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 779,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "10704:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 780,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "10722:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 777,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 178,
																				"src": "10668:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10668:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 782,
																		"nodeType": "RevertStatement",
																		"src": "10661:67:2"
																	}
																]
															}
														},
														{
															"id": 794,
															"nodeType": "UncheckedBlock",
															"src": "10756:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 786,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 753,
																				"src": "10793:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 787,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 755,
																				"src": "10800:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 790,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 788,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "10809:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 789,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "10828:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10809:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 791,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10835:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 785,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				690,
																				750
																			],
																			"referencedDeclaration": 750,
																			"src": "10784:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10784:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 793,
																	"nodeType": "ExpressionStatement",
																	"src": "10784:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "10120:271:2",
										"text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10405:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10429:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10421:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10421:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10444:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10436:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10436:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10461:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10453:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10453:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10420:47:2"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10485:0:2"
									},
									"scope": 799,
									"src": "10396:476:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 800,
							"src": "1106:9768:2",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "105:10770:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						]
					},
					"id": 878,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 801,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 802,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:3",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 877,
							"linearizedBaseContracts": [
								877
							],
							"name": "IERC20",
							"nameLocation": "214:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 811,
									"name": "Transfer",
									"nameLocation": "396:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "405:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "427:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "447:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:3"
									},
									"src": "390:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 820,
									"name": "Approval",
									"nameLocation": "627:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "636:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "659:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "684:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:3"
									},
									"src": "621:78:3"
								},
								{
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:3"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "821:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:3"
									},
									"scope": 877,
									"src": "775:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 834,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "931:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:3"
									},
									"returnParameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "971:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:3"
									},
									"scope": 877,
									"src": "912:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1222:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1234:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:3"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1267:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 841,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:3"
									},
									"scope": 877,
									"src": "1204:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1567:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1582:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:3"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1622:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:3"
									},
									"scope": 877,
									"src": "1548:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 864,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2326:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2343:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:3"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2376:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 861,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:3"
									},
									"scope": 877,
									"src": "2309:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2712:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2726:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2738:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2771:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:3"
									},
									"scope": 877,
									"src": "2690:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 878,
							"src": "204:2575:3",
							"usedErrors": [],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "106:2674:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							1078
						],
						"ERC20": [
							799
						],
						"ERC20Burnable": [
							923
						]
					},
					"id": 924,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 879,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 881,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 924,
							"sourceUnit": 800,
							"src": "150:35:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 880,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 799,
										"src": "158:5:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 883,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 924,
							"sourceUnit": 1079,
							"src": "186:51:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 882,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1078,
										"src": "194:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 885,
										"name": "Context",
										"nameLocations": [
											"483:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1078,
										"src": "483:7:4"
									},
									"id": 886,
									"nodeType": "InheritanceSpecifier",
									"src": "483:7:4"
								},
								{
									"baseName": {
										"id": 887,
										"name": "ERC20",
										"nameLocations": [
											"492:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 799,
										"src": "492:5:4"
									},
									"id": 888,
									"nodeType": "InheritanceSpecifier",
									"src": "492:5:4"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 884,
								"nodeType": "StructuredDocumentation",
								"src": "239:208:4",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 923,
							"linearizedBaseContracts": [
								923,
								799,
								189,
								1048,
								877,
								1078
							],
							"name": "ERC20Burnable",
							"nameLocation": "466:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 900,
										"nodeType": "Block",
										"src": "662:43:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 895,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1060,
																"src": "678:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "678:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 897,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 891,
															"src": "692:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 894,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "672:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "672:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 899,
												"nodeType": "ExpressionStatement",
												"src": "672:26:4"
											}
										]
									},
									"documentation": {
										"id": 889,
										"nodeType": "StructuredDocumentation",
										"src": "504:109:4",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "627:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "640:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "632:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:15:4"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "662:0:4"
									},
									"scope": 923,
									"src": "618:87:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "1086:93:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 910,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "1112:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 911,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1060,
																"src": "1121:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1121:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 913,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "1135:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 909,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "1096:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1096:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 915,
												"nodeType": "ExpressionStatement",
												"src": "1096:45:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 917,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "1157:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 918,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "1166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 916,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "1151:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1151:21:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "1151:21:4"
											}
										]
									},
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "711:305:4",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1030:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1047:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "1039:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 903,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1064:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "1056:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:32:4"
									},
									"returnParameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1086:0:4"
									},
									"scope": 923,
									"src": "1021:158:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 924,
							"src": "448:733:4",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "124:1058:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol",
					"exportedSymbols": {
						"ERC20": [
							799
						],
						"ERC20Capped": [
							1022
						]
					},
					"id": 1023,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 925,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 927,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1023,
							"sourceUnit": 800,
							"src": "148:35:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 926,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 799,
										"src": "156:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 929,
										"name": "ERC20",
										"nameLocations": [
											"296:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 799,
										"src": "296:5:5"
									},
									"id": 930,
									"nodeType": "InheritanceSpecifier",
									"src": "296:5:5"
								}
							],
							"canonicalName": "ERC20Capped",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 928,
								"nodeType": "StructuredDocumentation",
								"src": "185:77:5",
								"text": " @dev Extension of {ERC20} that adds a cap to the supply of tokens."
							},
							"fullyImplemented": true,
							"id": 1022,
							"linearizedBaseContracts": [
								1022,
								799,
								189,
								1048,
								877,
								1078
							],
							"name": "ERC20Capped",
							"nameLocation": "281:11:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 932,
									"mutability": "immutable",
									"name": "_cap",
									"nameLocation": "334:4:5",
									"nodeType": "VariableDeclaration",
									"scope": 1022,
									"src": "308:30:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 931,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "308:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 933,
										"nodeType": "StructuredDocumentation",
										"src": "345:59:5",
										"text": " @dev Total supply cap has been exceeded."
									},
									"errorSelector": "9e79f854",
									"id": 939,
									"name": "ERC20ExceededCap",
									"nameLocation": "415:16:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "increasedSupply",
												"nameLocation": "440:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "432:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "432:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "cap",
												"nameLocation": "465:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "457:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "457:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "431:38:5"
									},
									"src": "409:61:5"
								},
								{
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "476:60:5",
										"text": " @dev The supplied cap is not a valid cap."
									},
									"errorSelector": "392e1e27",
									"id": 944,
									"name": "ERC20InvalidCap",
									"nameLocation": "547:15:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "cap",
												"nameLocation": "571:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "563:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "563:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "562:13:5"
									},
									"src": "541:35:5"
								},
								{
									"body": {
										"id": 963,
										"nodeType": "Block",
										"src": "742:102:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 950,
														"name": "cap_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 947,
														"src": "756:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "764:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "756:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 958,
												"nodeType": "IfStatement",
												"src": "752:65:5",
												"trueBody": {
													"id": 957,
													"nodeType": "Block",
													"src": "767:50:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 954,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "804:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 953,
																	"name": "ERC20InvalidCap",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 944,
																	"src": "788:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 955,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "788:18:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 956,
															"nodeType": "RevertStatement",
															"src": "781:25:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 959,
														"name": "_cap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 932,
														"src": "826:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 960,
														"name": "cap_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 947,
														"src": "833:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "826:11:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 962,
												"nodeType": "ExpressionStatement",
												"src": "826:11:5"
											}
										]
									},
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "582:129:5",
										"text": " @dev Sets the value of the `cap`. This value is immutable, it can only be\n set once during construction."
									},
									"id": 964,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "cap_",
												"nameLocation": "736:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 964,
												"src": "728:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "728:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "727:14:5"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "742:0:5"
									},
									"scope": 1022,
									"src": "716:128:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "976:28:5",
										"statements": [
											{
												"expression": {
													"id": 970,
													"name": "_cap",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 932,
													"src": "993:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 969,
												"id": 971,
												"nodeType": "Return",
												"src": "986:11:5"
											}
										]
									},
									"documentation": {
										"id": 965,
										"nodeType": "StructuredDocumentation",
										"src": "850:68:5",
										"text": " @dev Returns the cap on the token's total supply."
									},
									"functionSelector": "355274ea",
									"id": 973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cap",
									"nameLocation": "932:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "935:2:5"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "967:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "967:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "966:9:5"
									},
									"scope": 1022,
									"src": "923:81:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										606
									],
									"body": {
										"id": 1020,
										"nodeType": "Block",
										"src": "1143:287:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 987,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 976,
															"src": "1167:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 988,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "1173:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 989,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "1177:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 984,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1153:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Capped_$1022_$",
																"typeString": "type(contract super ERC20Capped)"
															}
														},
														"id": 986,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1159:7:5",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 606,
														"src": "1153:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1153:30:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 991,
												"nodeType": "ExpressionStatement",
												"src": "1153:30:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 992,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "1198:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 995,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 994,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1206:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 993,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1206:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 996,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1206:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1198:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1019,
												"nodeType": "IfStatement",
												"src": "1194:230:5",
												"trueBody": {
													"id": 1018,
													"nodeType": "Block",
													"src": "1218:206:5",
													"statements": [
														{
															"assignments": [
																999
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 999,
																	"mutability": "mutable",
																	"name": "maxSupply",
																	"nameLocation": "1240:9:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1018,
																	"src": "1232:17:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 998,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1232:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1002,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1000,
																	"name": "cap",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 973,
																	"src": "1252:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1252:5:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1232:25:5"
														},
														{
															"assignments": [
																1004
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1004,
																	"mutability": "mutable",
																	"name": "supply",
																	"nameLocation": "1279:6:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1018,
																	"src": "1271:14:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1003,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1271:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1007,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1005,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 372,
																	"src": "1288:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1006,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1288:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1271:30:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1010,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1008,
																	"name": "supply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1004,
																	"src": "1319:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 1009,
																	"name": "maxSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 999,
																	"src": "1328:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1319:18:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1017,
															"nodeType": "IfStatement",
															"src": "1315:99:5",
															"trueBody": {
																"id": 1016,
																"nodeType": "Block",
																"src": "1339:75:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1012,
																					"name": "supply",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1004,
																					"src": "1381:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1013,
																					"name": "maxSupply",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 999,
																					"src": "1389:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1011,
																				"name": "ERC20ExceededCap",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 939,
																				"src": "1364:16:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 1014,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1364:35:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1015,
																		"nodeType": "RevertStatement",
																		"src": "1357:42:5"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 974,
										"nodeType": "StructuredDocumentation",
										"src": "1010:44:5",
										"text": " @dev See {ERC20-_update}."
									},
									"id": 1021,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "1068:7:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 982,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1134:8:5"
									},
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1084:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "1076:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1076:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1098:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "1090:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1090:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1110:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "1102:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1075:41:5"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1143:0:5"
									},
									"scope": 1022,
									"src": "1059:371:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1023,
							"src": "263:1169:5",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188,
								939,
								944
							],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "122:1311:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						],
						"IERC20Metadata": [
							1048
						]
					},
					"id": 1049,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1024,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1026,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1049,
							"sourceUnit": 878,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1025,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1028,
										"name": "IERC20",
										"nameLocations": [
											"306:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "306:6:6"
									},
									"id": 1029,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1027,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:6",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 1048,
							"linearizedBaseContracts": [
								1048,
								877
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1030,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1035,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:6"
									},
									"returnParameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "417:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1032,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:6"
									},
									"scope": 1048,
									"src": "378:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1041,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:6"
									},
									"returnParameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "540:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1038,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:6"
									},
									"scope": 1048,
									"src": "499:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1042,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1047,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:6"
									},
									"returnParameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "674:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1044,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:6"
									},
									"scope": 1048,
									"src": "631:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1049,
							"src": "278:405:6",
							"usedErrors": [],
							"usedEvents": [
								811,
								820
							]
						}
					],
					"src": "125:559:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1078
						]
					},
					"id": 1079,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1050,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1051,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1078,
							"linearizedBaseContracts": [
								1078
							],
							"name": "Context",
							"nameLocation": "642:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1059,
										"nodeType": "Block",
										"src": "718:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1056,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1055,
												"id": 1058,
												"nodeType": "Return",
												"src": "728:17:7"
											}
										]
									},
									"id": 1060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1052,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:7"
									},
									"returnParameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "709:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:7"
									},
									"scope": 1078,
									"src": "656:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1068,
										"nodeType": "Block",
										"src": "825:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1065,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1064,
												"id": 1067,
												"nodeType": "Return",
												"src": "835:15:7"
											}
										]
									},
									"id": 1069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:7"
									},
									"returnParameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "809:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1062,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:7"
									},
									"scope": 1078,
									"src": "758:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1076,
										"nodeType": "Block",
										"src": "935:25:7",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1074,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1073,
												"id": 1075,
												"nodeType": "Return",
												"src": "945:8:7"
											}
										]
									},
									"id": 1077,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:7"
									},
									"returnParameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "926:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:7"
									},
									"scope": 1078,
									"src": "863:97:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1079,
							"src": "624:338:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:7"
				},
				"id": 7
			},
			"TecnoCoin.sol": {
				"ast": {
					"absolutePath": "TecnoCoin.sol",
					"exportedSymbols": {
						"Context": [
							1078
						],
						"ERC20": [
							799
						],
						"ERC20Burnable": [
							923
						],
						"ERC20Capped": [
							1022
						],
						"Ownable": [
							147
						],
						"TecnoCoin": [
							1186
						]
					},
					"id": 1187,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1080,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 1081,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1187,
							"sourceUnit": 924,
							"src": "61:74:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol",
							"id": 1082,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1187,
							"sourceUnit": 1023,
							"src": "137:72:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1083,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1187,
							"sourceUnit": 148,
							"src": "211:52:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1084,
										"name": "ERC20Capped",
										"nameLocations": [
											"289:11:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1022,
										"src": "289:11:8"
									},
									"id": 1085,
									"nodeType": "InheritanceSpecifier",
									"src": "289:11:8"
								},
								{
									"baseName": {
										"id": 1086,
										"name": "ERC20Burnable",
										"nameLocations": [
											"302:13:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 923,
										"src": "302:13:8"
									},
									"id": 1087,
									"nodeType": "InheritanceSpecifier",
									"src": "302:13:8"
								},
								{
									"baseName": {
										"id": 1088,
										"name": "Ownable",
										"nameLocations": [
											"317:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "317:7:8"
									},
									"id": 1089,
									"nodeType": "InheritanceSpecifier",
									"src": "317:7:8"
								}
							],
							"canonicalName": "TecnoCoin",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1186,
							"linearizedBaseContracts": [
								1186,
								147,
								923,
								1022,
								799,
								189,
								1048,
								877,
								1078
							],
							"name": "TecnoCoin",
							"nameLocation": "276:9:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "bf3aa030",
									"id": 1091,
									"name": "MaxSupplyAlcanzado",
									"nameLocation": "338:18:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "356:2:8"
									},
									"src": "332:27:8"
								},
								{
									"body": {
										"id": 1125,
										"nodeType": "Block",
										"src": "595:70:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1115,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "612:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "616:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "612:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1117,
																"name": "initialSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "624:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1118,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "640:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1119,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 363,
																		"src": "646:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "646:10:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "640:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "624:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1114,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "606:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "606:51:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1124,
												"nodeType": "ExpressionStatement",
												"src": "606:51:8"
											}
										]
									},
									"id": 1126,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "5465636e6f436f696e",
													"id": 1098,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "436:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_d2376f60af85ad7715c74eac6dc769d10e998b384658b25756c0cea9e16ff78e",
														"typeString": "literal_string \"TecnoCoin\""
													},
													"value": "TecnoCoin"
												},
												{
													"hexValue": "544e43",
													"id": 1099,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "449:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_0c59d6910ca422f99f9e34c50d175a0daa4d4dfdd86bb2eb66a7bf8c8ae0b44a",
														"typeString": "literal_string \"TNC\""
													},
													"value": "TNC"
												}
											],
											"id": 1100,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1097,
												"name": "ERC20",
												"nameLocations": [
													"430:5:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 799,
												"src": "430:5:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "430:25:8"
										},
										{
											"arguments": [
												{
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1102,
														"name": "maxSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "477:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "3130",
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "489:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														},
														"nodeType": "BinaryOperation",
														"operator": "**",
														"rightExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1104,
																"name": "decimals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 363,
																"src": "495:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																	"typeString": "function () view returns (uint8)"
																}
															},
															"id": 1105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "495:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"src": "489:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "477:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1108,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1101,
												"name": "ERC20Capped",
												"nameLocations": [
													"465:11:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1022,
												"src": "465:11:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "465:41:8"
										},
										{
											"arguments": [
												{
													"expression": {
														"id": 1110,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "524:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "528:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "524:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1112,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1109,
												"name": "Ownable",
												"nameLocations": [
													"516:7:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "516:7:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "516:19:8"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "initialSupply",
												"nameLocation": "387:13:8",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "379:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "379:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "maxSupply",
												"nameLocation": "410:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "402:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "402:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "378:42:8"
									},
									"returnParameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "595:0:8"
									},
									"scope": 1186,
									"src": "367:298:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1163,
										"nodeType": "Block",
										"src": "732:176:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1144,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1135,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 372,
																"src": "747:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "747:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1137,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1130,
																		"src": "764:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1141,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "3130",
																			"id": 1138,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "773:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "**",
																		"rightExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1139,
																				"name": "decimals",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 363,
																				"src": "779:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																					"typeString": "function () view returns (uint8)"
																				}
																			},
																			"id": 1140,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "779:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "773:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "764:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1143,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "763:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "747:43:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1145,
															"name": "cap",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "793:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "793:5:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "747:51:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1152,
												"nodeType": "IfStatement",
												"src": "743:111:8",
												"trueBody": {
													"id": 1151,
													"nodeType": "Block",
													"src": "800:54:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1148,
																	"name": "MaxSupplyAlcanzado",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "822:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "822:20:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1150,
															"nodeType": "RevertStatement",
															"src": "815:27:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1154,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "870:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1155,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1130,
																"src": "874:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "883:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1157,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 363,
																		"src": "889:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "889:10:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "883:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "874:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1153,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "864:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "864:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1162,
												"nodeType": "ExpressionStatement",
												"src": "864:36:8"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 1164,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1133,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1132,
												"name": "onlyOwner",
												"nameLocations": [
													"722:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "722:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "722:9:8"
										}
									],
									"name": "mint",
									"nameLocation": "682:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "695:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "687:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "707:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "699:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:28:8"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "732:0:8"
									},
									"scope": 1186,
									"src": "673:235:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										606,
										1021
									],
									"body": {
										"id": 1184,
										"nodeType": "Block",
										"src": "1093:49:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1179,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1166,
															"src": "1118:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1180,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1168,
															"src": "1124:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1181,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1170,
															"src": "1128:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1176,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1104:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_TecnoCoin_$1186_$",
																"typeString": "type(contract super TecnoCoin)"
															}
														},
														"id": 1178,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1110:7:8",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1021,
														"src": "1104:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1104:30:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1183,
												"nodeType": "ExpressionStatement",
												"src": "1104:30:8"
											}
										]
									},
									"id": 1185,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "983:7:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1174,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1172,
												"name": "ERC20",
												"nameLocations": [
													"1068:5:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 799,
												"src": "1068:5:8"
											},
											{
												"id": 1173,
												"name": "ERC20Capped",
												"nameLocations": [
													"1075:11:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1022,
												"src": "1075:11:8"
											}
										],
										"src": "1059:28:8"
									},
									"parameters": {
										"id": 1171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "999:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "991:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1013:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "1005:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1005:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1025:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "1017:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1017:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "990:41:8"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1093:0:8"
									},
									"scope": 1186,
									"src": "974:168:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1187,
							"src": "267:878:8",
							"usedErrors": [
								13,
								18,
								159,
								164,
								169,
								178,
								183,
								188,
								939,
								944,
								1091
							],
							"usedEvents": [
								24,
								811,
								820
							]
						}
					],
					"src": "33:1114:8"
				},
				"id": 8
			}
		}
	}
}